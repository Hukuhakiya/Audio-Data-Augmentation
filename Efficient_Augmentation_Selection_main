{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "65090618",
   "metadata": {
    "papermill": {
     "duration": 0.007654,
     "end_time": "2024-09-11T14:56:11.286607",
     "exception": false,
     "start_time": "2024-09-11T14:56:11.278953",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# LIBRARY PULL"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "22e3c624",
   "metadata": {
    "papermill": {
     "duration": 0.006969,
     "end_time": "2024-09-11T14:56:11.301018",
     "exception": false,
     "start_time": "2024-09-11T14:56:11.294049",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "* The model utilized in this script is a pretrained model from UrbanSound8k, and it uses 8 layers with 128 inputs in the first layer using a Keras.Sequential structure. The generic audio processing utilizes the features of the Librosa library together with the array characteristics of the Pandas and NumPy libraries. Some other visualization and training libraries are also included in the library imports as side tools or potential improvements to the script in observing the analysis and the complete characteristics of the behavior of the model and its augmented versions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a91ffee4",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-09-11T14:56:11.317159Z",
     "iopub.status.busy": "2024-09-11T14:56:11.316756Z",
     "iopub.status.idle": "2024-09-11T14:56:28.331550Z",
     "shell.execute_reply": "2024-09-11T14:56:28.330084Z"
    },
    "papermill": {
     "duration": 17.026134,
     "end_time": "2024-09-11T14:56:28.334394",
     "exception": false,
     "start_time": "2024-09-11T14:56:11.308260",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting resampy\r\n",
      "  Downloading resampy-0.4.3-py3-none-any.whl.metadata (3.0 kB)\r\n",
      "Requirement already satisfied: numpy>=1.17 in /opt/conda/lib/python3.10/site-packages (from resampy) (1.26.4)\r\n",
      "Requirement already satisfied: numba>=0.53 in /opt/conda/lib/python3.10/site-packages (from resampy) (0.58.1)\r\n",
      "Requirement already satisfied: llvmlite<0.42,>=0.41.0dev0 in /opt/conda/lib/python3.10/site-packages (from numba>=0.53->resampy) (0.41.1)\r\n",
      "Downloading resampy-0.4.3-py3-none-any.whl (3.1 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.1/3.1 MB\u001b[0m \u001b[31m20.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hInstalling collected packages: resampy\r\n",
      "Successfully installed resampy-0.4.3\r\n"
     ]
    }
   ],
   "source": [
    "# Basic Libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import random\n",
    "import time\n",
    "\n",
    "pd.plotting.register_matplotlib_converters()\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "import seaborn as sns\n",
    "import random\n",
    "\n",
    "from IPython.display import Audio\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "!pip install resampy "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "758a57b9",
   "metadata": {
    "_kg_hide-input": true,
    "execution": {
     "iopub.execute_input": "2024-09-11T14:56:28.352585Z",
     "iopub.status.busy": "2024-09-11T14:56:28.351788Z",
     "iopub.status.idle": "2024-09-11T14:56:42.554486Z",
     "shell.execute_reply": "2024-09-11T14:56:42.553256Z"
    },
    "papermill": {
     "duration": 14.214692,
     "end_time": "2024-09-11T14:56:42.557078",
     "exception": false,
     "start_time": "2024-09-11T14:56:28.342386",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-09-11 14:56:30.592368: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-09-11 14:56:30.592515: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-09-11 14:56:30.747432: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[]\n"
     ]
    }
   ],
   "source": [
    "# Libraries for Classification and building Models\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Conv2D, Flatten, Dense, MaxPool2D, Dropout\n",
    "from tensorflow.keras.utils import to_categorical \n",
    "import tensorflow as tf; print(tf.config.list_physical_devices('GPU'))\n",
    "\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.svm import SVC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7a17b1f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-11T14:56:42.575033Z",
     "iopub.status.busy": "2024-09-11T14:56:42.574348Z",
     "iopub.status.idle": "2024-09-11T14:56:42.694578Z",
     "shell.execute_reply": "2024-09-11T14:56:42.693512Z"
    },
    "papermill": {
     "duration": 0.131978,
     "end_time": "2024-09-11T14:56:42.697171",
     "exception": false,
     "start_time": "2024-09-11T14:56:42.565193",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Project Specific Libraries\n",
    "import os\n",
    "import librosa\n",
    "import librosa.display\n",
    "import glob \n",
    "import skimage"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2ce367c",
   "metadata": {
    "papermill": {
     "duration": 0.007674,
     "end_time": "2024-09-11T14:56:42.713143",
     "exception": false,
     "start_time": "2024-09-11T14:56:42.705469",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# AUDIO AUGMENTATION FUNCTION DEFINITIONS"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a575a3b",
   "metadata": {
    "papermill": {
     "duration": 0.008076,
     "end_time": "2024-09-11T14:56:42.729236",
     "exception": false,
     "start_time": "2024-09-11T14:56:42.721160",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Explanations and Input Parameter Properties for Augmentation Methods\n",
    "* arrange_duration: allows for the user to put in a sampling rate for the audio file, which may be beneficial in augmentaiton; however, the method has not been seen to enhance the efficiency hence was not considered in the general structure as an option. sample rate and the duration can be taken from the user to modify the signal.\n",
    "\n",
    "* add_noise(): direct addition of white noise, takes zero and positive values as the \"snr_dbs\" input, corresponding to the signal to noise ratio in terms of the power. the addition is done through superposition and can be observed in both time and the frequency domain representations. \"noise_factor\" is the flag activating the noise addition.\\\n",
    "    -noise_factor: flag for noise addition activation\\\n",
    "    -snr_dbs: signal to noise power ratio\n",
    "\n",
    "* shift_sound(): creates direct shift in the vector notation, hence the time representation of the signal creating a time-shift. \"shift_factor\" is taken from [0,1] interval and the shift value has been randomized to give a randomized effect to the sound shift. however, the method has been observed not to decrease the accuracy that much, not contributing much to the training set and the not-augmented model performance.\\\n",
    "    -shift_factor: percentage shift of the vector specified, in [0,1]\n",
    "    \n",
    "* shift_sound_add(): to compensate for the reflection type of effects in especially hollow halls with the lack of sound absorption in the environment, this function adds the shift_sound specified by the shift_factor onto the original audio signal. in contrast to the mere shifting, reflection effect has been observed to lower the validation accuracy while not contributing pure noise.\\\n",
    "    -shift_factor: percentage shift of the vector specified, in [0,1]\n",
    "    \n",
    "* change_pitch(): directly uses the built-in function utilizing time stretch and resampling to change the pitch of the audio signal. changes are over seminotes in \"pitch_factor\". no requirement is done on pitch_factor, although to observe possible pitch change, it would come sufficient to observe positive pitch changes. the important thing is the size matching of the two vectors and the approximate energy equality between them.\\\n",
    "    -pitch_facotr: step number for pitch shift, can take floating number values\n",
    "  \n",
    "* change_speed(): creates a speed change effect, which can be used in representing environmental passages and audio transfer through these. \"speed_rate\" equated to the value 1 would give the original data.\\\n",
    "    -speed_rate: could be any positive number.\n",
    "\n",
    "* rand_cancel(): randomized data cropping, as per the standard distribution, some part of the signal dependent on the \"crop_factor\" is equated to 0. the function can be used for masking purposes in the time domain, the mel-freqeuncy domain and in both of them, as in the double mask.\\\n",
    "    -crop_factor: determinant for the cropping amount, in [0,1]\n",
    "   \n",
    "* main_effect(): applies the effective augmentation methods as a whole, no order of operation has been signified due to the inspection of the beneficial inclusion of single augmentation methods. the function is called in parser and audio_inspector functions. the input to the function are the inputs of the other functions given above. \n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "20d99c24",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-11T14:56:42.748177Z",
     "iopub.status.busy": "2024-09-11T14:56:42.747531Z",
     "iopub.status.idle": "2024-09-11T14:56:42.764328Z",
     "shell.execute_reply": "2024-09-11T14:56:42.763026Z"
    },
    "papermill": {
     "duration": 0.028649,
     "end_time": "2024-09-11T14:56:42.766849",
     "exception": false,
     "start_time": "2024-09-11T14:56:42.738200",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def arrange_duration(data, sample_rate, duration, decimal = True):\n",
    "    \"\"\"\n",
    "    the function allows the manual sampling and duration specification\n",
    "    also returns the original data for further preprocessing\n",
    "    \"\"\"\n",
    "    if duration <= 0:\n",
    "        return data\n",
    "    \n",
    "    data_duration = librosa.get_duration(y = data, sr = sample_rate)\n",
    "    duration_ratio = duration / data_duration\n",
    "    \n",
    "    new_data = []\n",
    "    for i in range(int(duration_ratio)):\n",
    "        new_data = np.append(new_data, data)\n",
    "        \n",
    "    if decimal:\n",
    "        decimal_duration = int(len(data) * (duration_ratio % 1))\n",
    "        new_data = np.append(new_data, data[:decimal_duration])\n",
    "\n",
    "    return new_data\n",
    "\n",
    "def squared_norm(vector):\n",
    "    \"\"\"\n",
    "    used for SNR integration into the noise function\n",
    "    \"\"\"\n",
    "    return np.sum(np.square(vector))\n",
    "\n",
    "def add_noise(data, snr_dbs, noise_factor):\n",
    "    \"\"\"\n",
    "    white noise addition through the formulation in reference to https://pytorch.org/audio/main/generated/torchaudio.functional.add_noise.html\n",
    "    \"\"\"\n",
    "    noise = np.random.randn(len(data))\n",
    "    sq_norm_noise, sq_norm_data = squared_norm(noise), squared_norm(data)\n",
    "    noisy_data = np.sqrt((sq_norm_data/sq_norm_noise)*(10**(-snr_dbs/10)))*noise_factor*noise + data\n",
    "    return noisy_data\n",
    "\n",
    "def shift_sound(data, shift_factor):\n",
    "    \"\"\"\n",
    "    shifts the audio waveform in time domain\n",
    "    shift is randomized as per the shift_factor provided in [0,1]\n",
    "    \"\"\"\n",
    "    shift_factor = np.random.randint(0, shift_factor * len(data) + 1)\n",
    "    rolled_data = np.roll(data, shift_factor)\n",
    "    return rolled_data\n",
    "\n",
    "def shift_sound_add(data, shift_factor):\n",
    "    \"\"\"\n",
    "    adds the shifted sound onto the original audio\n",
    "    creates a reflection like effect\n",
    "    \"\"\"\n",
    "    if shift_factor != 0:\n",
    "        shift_factor = np.random.randint(0, shift_factor * len(data) + 1)\n",
    "        rolled_data = np.roll(data, shift_factor)\n",
    "        rolled_data = rolled_data + data\n",
    "        return rolled_data\n",
    "    else:\n",
    "        return data\n",
    "\n",
    "def change_pitch(data, sample_rate, pitch_factor):\n",
    "    \"\"\"\n",
    "    direct pitch change using librosa.effects library\n",
    "    \"\"\"\n",
    "    if pitch_factor != 0:\n",
    "        changed_pitch_data = librosa.effects.pitch_shift(data, sr = sample_rate, n_steps = pitch_factor)\n",
    "        return changed_pitch_data\n",
    "    else:\n",
    "        return data\n",
    "\n",
    "\n",
    "def change_speed(data, speed_rate):\n",
    "    \"\"\"\n",
    "    time stretchs through librosa.effects library, changes the processing speed rate\n",
    "    \"\"\"\n",
    "    if speed_rate !=1:\n",
    "        stretched_data = librosa.effects.time_stretch(data, rate = speed_rate)\n",
    "        return stretched_data\n",
    "    else:\n",
    "        return data\n",
    "\n",
    "\n",
    "def rand_cancel(data, crop_factor):\n",
    "    \"\"\"\n",
    "    makes some portion of the audio, either in mel-frequency or time domain vanish\n",
    "    in small portions, it is found effective augmenting the dataset\n",
    "    for a more developed version refer to doi: 10.21437/Interspeech.2019-2680\n",
    "    \"\"\"\n",
    "    if crop_factor != 0:\n",
    "        data_length = len(data)\n",
    "        lower_bound = np.random.randint(0, data_length)\n",
    "        upper_bound = min(lower_bound + round(crop_factor * data_length), data_length)  # Ensure it doesn't exceed bounds\n",
    "        rand_num = random.random() # Randomization to prevent pattern recog.\n",
    "\n",
    "        # randomization as per the different volumes\n",
    "        if 0.1 <= rand_num <= 0.95:\n",
    "            data[lower_bound:upper_bound] = 0\n",
    "\n",
    "        return data\n",
    "    else:\n",
    "        return data\n",
    "\n",
    "# def doppler_effective(data, )\n",
    "\n",
    "\n",
    "def main_effect(data, sample_rate, added_shift_factor = 0, crop_factor=0, noise_factor = 0, snr_dbs = 1, shift_factor = 0, pitch_factor = 0, speed_rate = 1, duration = 0, decimal = True):\n",
    "    \"\"\"\n",
    "    merges all the effect functions to give the complete form of the preprocessed audio data\n",
    "    \"\"\"\n",
    "    final_data = arrange_duration(\n",
    "        change_speed(change_pitch(\n",
    "            shift_sound(add_noise(\n",
    "                rand_cancel(\n",
    "                    shift_sound_add(data, added_shift_factor), crop_factor), snr_dbs, noise_factor), shift_factor), sample_rate, pitch_factor), speed_rate), sample_rate, duration, decimal)\n",
    "    return final_data\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9241519f",
   "metadata": {
    "papermill": {
     "duration": 0.008289,
     "end_time": "2024-09-11T14:56:42.800534",
     "exception": false,
     "start_time": "2024-09-11T14:56:42.792245",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# PARSER FUNCTION FOR FURTHER ANALYSIS\n",
    "* the parser opens up the clustered audio file, one by one, and loads the audio signal using the time-domain mode sampling through Librosa\n",
    "* 'kaiser_fast' resolution has been used for faster extraction\n",
    "* if augmentation is desired on the dataset, main_effect is taken into effect\n",
    "* crop_double_mask input allows for double masking through data crop, both in the time and frequency domain; for visualization observe through the audio inspector\n",
    "* the masking in the time and frequency domain has been executed next\n",
    "* from the time dataset, mel-spectrograms have been obtained and mean values of each audio signal's spectrogram is taken\n",
    "* feature and label extraction has been completely executed once all 8732 audio files are through\n",
    "* parser returns the data preparation time besides the feature and label data; crucial for training resources"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "753e6adb",
   "metadata": {
    "papermill": {
     "duration": 0.007622,
     "end_time": "2024-09-11T14:56:42.816335",
     "exception": false,
     "start_time": "2024-09-11T14:56:42.808713",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9a8cc382",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-11T14:56:42.834416Z",
     "iopub.status.busy": "2024-09-11T14:56:42.833257Z",
     "iopub.status.idle": "2024-09-11T14:56:42.844192Z",
     "shell.execute_reply": "2024-09-11T14:56:42.843101Z"
    },
    "papermill": {
     "duration": 0.022515,
     "end_time": "2024-09-11T14:56:42.846633",
     "exception": false,
     "start_time": "2024-09-11T14:56:42.824118",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def parser(data, added_shift_factor = 0, crop_factor = 0, crop_freq = 1, crop_double_mask=0, noise_factor = 0, snr_dbs = 1, shift_factor = 0, pitch_factor = 0, speed_rate = 1, duration = 0, decimal = True, aug = False):\n",
    "    \"\"\"\n",
    "    takes the cluster data and processes each audio piece one by one\n",
    "    if aug, augments the dataset as well\n",
    "    takes the mfcc, mel-frequency cepstrum, using STFT and mel-spectrogram transformation\n",
    "    creates mfcc dataset, through the means\n",
    "    \"\"\"\n",
    "    feature = []\n",
    "    label = []\n",
    "    start_time = time.time()\n",
    "    \n",
    "    for i in range(len(data)):\n",
    "        file_name = '../input/urbansound8k/fold' + str(data[\"fold\"][i]) + '/' + data[\"slice_file_name\"][i]\n",
    "        X, sample_rate = librosa.load(file_name, res_type='kaiser_fast')\n",
    "        \n",
    "        # augment the data\n",
    "        if aug:\n",
    "            X = main_effect(X, sample_rate=sample_rate, added_shift_factor=added_shift_factor, snr_dbs=snr_dbs, \n",
    "                            crop_factor=crop_double_mask*crop_factor, noise_factor=noise_factor, shift_factor=shift_factor,\n",
    "                            pitch_factor=pitch_factor, speed_rate=speed_rate, duration=duration, decimal=aug)\n",
    "            \n",
    "        # extract mfcc feature from data\n",
    "        if crop_freq: \n",
    "            # cropping in the mel-freq domain      \n",
    "            mels = np.mean(rand_cancel(data = librosa.feature.melspectrogram(y=X, sr=sample_rate), crop_factor=crop_factor).T,axis=0)\n",
    "        else:         \n",
    "            # cropping in the time domain      \n",
    "            X = rand_cancel(data=X, crop_factor=crop_factor)\n",
    "            mels = np.mean(librosa.feature.melspectrogram(y=X, sr=sample_rate).T, axis=0)\n",
    "        \n",
    "        feature.append(mels)\n",
    "        label.append(data[\"classID\"][i])\n",
    "        \n",
    "    end_time = time.time()\n",
    "    \n",
    "    return feature, label, start_time, end_time"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c395e97d",
   "metadata": {
    "papermill": {
     "duration": 0.00758,
     "end_time": "2024-09-11T14:56:42.862443",
     "exception": false,
     "start_time": "2024-09-11T14:56:42.854863",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# DATA PREPARATION\n",
    "* feature and label data are put into the array form\n",
    "* scikit_learn library allows train_test data split by 0.75:0.25 ratio, random_state allows for reproducible results in observing augmented model behavior\n",
    "* datasets that are going to be given into the model are formed so that 128 inputs are taken"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2788a127",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-11T14:56:42.880584Z",
     "iopub.status.busy": "2024-09-11T14:56:42.880167Z",
     "iopub.status.idle": "2024-09-11T14:56:42.887001Z",
     "shell.execute_reply": "2024-09-11T14:56:42.885675Z"
    },
    "papermill": {
     "duration": 0.018967,
     "end_time": "2024-09-11T14:56:42.889379",
     "exception": false,
     "start_time": "2024-09-11T14:56:42.870412",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def prepare_data(feature, label):\n",
    "    \"\"\"\n",
    "    puts the data into array formation for further ML analysis\n",
    "    split the testing and training data for training and validation processes\n",
    "    shapes as per the pretrained model\n",
    "    \"\"\"\n",
    "    X = np.array(feature)\n",
    "    Y = np.array(label)\n",
    "#     data = temp.transpose()\n",
    "    \n",
    "#     X_ = data[:, 0]\n",
    "#     Y = data[:, 1]\n",
    "#     X = np.empty([8732, 128])\n",
    "    \n",
    "#     for i in range(8732):\n",
    "#         X[i] = (X_[i])\n",
    "    \n",
    "    Y = to_categorical(Y)\n",
    "    \n",
    "    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, random_state = 1)\n",
    "    \n",
    "    X_train = X_train.reshape(-1, 16, 8, 1)\n",
    "    X_test = X_test.reshape(-1, 16, 8, 1)\n",
    "    \n",
    "    return X_train, X_test, Y_train, Y_test"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b3f3f7e",
   "metadata": {
    "papermill": {
     "duration": 0.007593,
     "end_time": "2024-09-11T14:56:42.905055",
     "exception": false,
     "start_time": "2024-09-11T14:56:42.897462",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# MODEL TRAINING\n",
    "* Keras sequential model from the UrbanSound8K source has been taken in its pretrained form\n",
    "* 8 layers at total, 2 convolutional layers, 2 pool 2D layers are formed, through\n",
    "* cross_entropy has been used for loss analyses, accuracy has been considered and optimizer has been set to 'adam' optimizer\n",
    "* 90 epochs and 30 batches for sufficiently long iteration cycles through the batch_size and total training cycle through the number of epochs\n",
    "* the model has been saved to use later in accuracy testing over augmented datasets\n",
    "* if 'train' input has been set to False, the model returns the model with the input 'model_name'\n",
    "* also the training time has been returned as an output besides the model itself for further use"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8d521d3e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-11T14:56:42.923102Z",
     "iopub.status.busy": "2024-09-11T14:56:42.922698Z",
     "iopub.status.idle": "2024-09-11T14:56:42.933255Z",
     "shell.execute_reply": "2024-09-11T14:56:42.932128Z"
    },
    "papermill": {
     "duration": 0.022626,
     "end_time": "2024-09-11T14:56:42.935832",
     "exception": false,
     "start_time": "2024-09-11T14:56:42.913206",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def train_model(train = False, model_name = \"Original_Model\", X_test = 0, X_train = 0, Y_test = 0, Y_train = 0, epochs = 90, batch_size = 30):\n",
    "    \"\"\"\n",
    "    trains the pretrained model as per the dataset given in\n",
    "    creates the model and returns the model and the training time\n",
    "    if no training is needed returns the model from specified data_path by model_name\n",
    "    \"\"\"\n",
    "    if train:\n",
    "        start_time = time.time()\n",
    "        model = Sequential()\n",
    "\n",
    "        model.add(Conv2D(64, (3, 3), padding = \"same\", activation = \"tanh\", input_shape = (16, 8, 1)))\n",
    "        model.add(MaxPool2D(pool_size=(2, 2)))\n",
    "        model.add(Conv2D(128, (3, 3), padding = \"same\", activation = \"tanh\"))\n",
    "        model.add(MaxPool2D(pool_size=(2, 2)))\n",
    "        model.add(Dropout(0.1))\n",
    "        model.add(Flatten())\n",
    "        model.add(Dense(1024, activation = \"tanh\"))\n",
    "        model.add(Dense(10, activation = \"softmax\"))\n",
    "\n",
    "        model.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])\n",
    "        print(epochs)\n",
    "        model.fit(x=X_train, y=Y_train, batch_size=batch_size, epochs=90, validation_data=(X_test, Y_test))\n",
    "        \n",
    "        model.save(model_name+'.keras')\n",
    "        \n",
    "        end_time = time.time()\n",
    "        training_time = (end_time-start_time)/60\n",
    "        \n",
    "        return model, training_time\n",
    "        \n",
    "    else:\n",
    "        loaded_model = tf.keras.models.load_model(model_name)\n",
    "        return loaded_model\n",
    "#     when saved will return the previous model, for the train_model is called with train=False argument later on"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5e07feb",
   "metadata": {
    "papermill": {
     "duration": 0.007623,
     "end_time": "2024-09-11T14:56:42.951341",
     "exception": false,
     "start_time": "2024-09-11T14:56:42.943718",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# MODEL TESTING\n",
    "* feature and label datasets have been taken into the model for evaluation of the training and validation data\n",
    "* the function returns trainining accuracy, validation accuracy, and the evaluation time for performance review"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "0f9577ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-11T14:56:42.968719Z",
     "iopub.status.busy": "2024-09-11T14:56:42.968327Z",
     "iopub.status.idle": "2024-09-11T14:56:42.974800Z",
     "shell.execute_reply": "2024-09-11T14:56:42.973713Z"
    },
    "papermill": {
     "duration": 0.017869,
     "end_time": "2024-09-11T14:56:42.977023",
     "exception": false,
     "start_time": "2024-09-11T14:56:42.959154",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def train_test_accuracy(model, X_train, X_test, Y_train, Y_test):\n",
    "    start_time = time.time()\n",
    "    \n",
    "    predictions = model.predict(X_test)\n",
    "    score_test = model.evaluate(X_test, Y_test)\n",
    "    \n",
    "    predictions = model.predict(X_train)\n",
    "    score_train = model.evaluate(X_train, Y_train)\n",
    "    \n",
    "    test_result = score_test[1]\n",
    "    train_result = score_train[1]\n",
    "    \n",
    "    end_time = time.time()\n",
    "    eval_time = (end_time-start_time)/60\n",
    "    \n",
    "    return train_result, test_result, eval_time"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "840abae3",
   "metadata": {
    "papermill": {
     "duration": 0.007525,
     "end_time": "2024-09-11T14:56:42.992565",
     "exception": false,
     "start_time": "2024-09-11T14:56:42.985040",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# AUDIO VISUALIZATION\n",
    "* audio_inspector works to visualize the audio data in time-amplitude representation, linear-freq power and mel-freq power representations\n",
    "* audio_inspector also plays the audio files, from the data_path in the data path format 'foldX/111111-1-1-1.wav' == 'foldX/xxxxxx-x-x-x.wav'\n",
    "* the function has a stand-alone augmentation part using the main_effect() function to have modifications visualized\n",
    "* augmentation_list_format = **[noise_flag,  crop_freq_time_flag,  noise_factor,  shift_factor,  pitch_factor,  speed_rate,  time_or_freq_crop_factor,  reflection_factor,  crop_double_mask]**\n",
    "* crop_double_mask parameter is taken within the augmentation input 'aug', works as mentioned in the previous parser() function part\n",
    "* mel-spectrogram is taken into consideration if there is a data_crop, however can be considered in general, as well \n",
    "* plot_waveform() function takes in the directly obtained time data with the sampling rate either desired or obtained from librosa.load()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "867f85da",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-11T14:56:43.009929Z",
     "iopub.status.busy": "2024-09-11T14:56:43.009573Z",
     "iopub.status.idle": "2024-09-11T14:56:43.027217Z",
     "shell.execute_reply": "2024-09-11T14:56:43.025912Z"
    },
    "papermill": {
     "duration": 0.029381,
     "end_time": "2024-09-11T14:56:43.029680",
     "exception": false,
     "start_time": "2024-09-11T14:56:43.000299",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# augmentation_list_format = [noise_flag, crop_freq_time_flag, noise_factor, shift_factor, pitch_factor, speed_rate, time_or_freq_crop_factor, reflection_factor, crop_double_mask]\n",
    "# crop_double_mask==1 gives data_crop both in the time domain and the frequency domain if crop_freq_time_flag==1 or only time domain data crop\n",
    "# crop_double_mask==0 gives data_crop as per crop_freq_time_flag\n",
    "\n",
    "def audio_inspector(data_path, aug=[0, 1, 0, 0, 0, 1, 0, 0, 0]):\n",
    "    \"\"\"\n",
    "    gives the output to mel-freq and linear-freq power spectrograms\n",
    "    also gives the audio put in, enabling the user to play the audio\n",
    "    inspects the audio and the linear-spectogram of the audio\n",
    "    before and after the augmentation to observe the possible corruption\n",
    "    \"\"\"\n",
    "    \n",
    "    #data_path format -- 'foldX/111111-1-1-1.wav' == 'foldX/xxxxxx-x-x-x.wav'\n",
    "    data_path = '../input/urbansound8k/' + data_path\n",
    "    audio, sample_rate = librosa.load(data_path)\n",
    "    [noise_flag, crop_freq_time_flag, noise_factor, shift_factor, pitch_factor, speed_rate, time_or_freq_crop_factor, reflection_factor, crop_double_mask] = aug[:]\n",
    "    spectrogram_type = 'linear' if time_or_freq_crop_factor==0 else 'mel'\n",
    "\n",
    "    # visualization for the clear audio\n",
    "    plt.figure(figsize=(25, 15))\n",
    "    \n",
    "    if spectrogram_type == 'mel':\n",
    "        audio_spec_noaug = librosa.feature.melspectrogram(y=audio, sr=sample_rate)\n",
    "        audio_spec_noaug = librosa.power_to_db(audio_spec_noaug, ref=np.max)\n",
    "        plt.subplot(4,2,1)\n",
    "        librosa.display.specshow(audio_spec_noaug, y_axis=spectrogram_type)\n",
    "        plt.colorbar(format='%+2.0f dB')\n",
    "        plt.title('Mel-freq Power Spectogram for the Data /wo Aug') \n",
    "    elif spectrogram_type == 'linear':\n",
    "        audio_spec_noaug = librosa.amplitude_to_db(librosa.stft(audio), np.max) \n",
    "        plt.subplot(4,2,1)\n",
    "        librosa.display.specshow(audio_spec_noaug, y_axis=spectrogram_type)\n",
    "        plt.colorbar(format='%+2.0f dB')\n",
    "        plt.title('Linear-freq Power Spectogram for the Data /wo Aug')\n",
    "\n",
    "    display(Audio(data=audio, rate=sample_rate))\n",
    "    plot_waveform(data=audio, sample_rate=sample_rate)\n",
    "\n",
    "    #augmentation for visualization\n",
    "    # augmentation_list_format = [noise_flag, crop_freq_time_flag, noise_factor, shift_factor, pitch_factor, speed_rate, time_or_freq_crop_factor, reflection_factor]\n",
    "    audio_aug = main_effect(audio, sample_rate=sample_rate, noise_factor=noise_flag,\n",
    "                            crop_factor=time_or_freq_crop_factor*crop_double_mask, snr_dbs=noise_factor, shift_factor=shift_factor,\n",
    "                            pitch_factor=pitch_factor, speed_rate=speed_rate, added_shift_factor=reflection_factor, decimal=True)\n",
    "\n",
    "    # visualization for the augmented data\n",
    "    plt.figure(figsize=(25, 15))\n",
    "    \n",
    "    if spectrogram_type == 'mel':\n",
    "        if crop_freq_time_flag:\n",
    "            audio_spec_aug = rand_cancel(librosa.feature.melspectrogram(y=audio, sr=sample_rate), crop_factor=time_or_freq_crop_factor) # data crop on mel-frequency domain\n",
    "            audio_spec_aug = librosa.power_to_db(audio_spec_aug, ref=np.max)\n",
    "            plt.subplot(4,2,1)\n",
    "            librosa.display.specshow(audio_spec_aug, y_axis='mel')\n",
    "            plt.colorbar(format='%+2.0f dB')\n",
    "            plt.title('Mel-freq Power Spectogram for the Data /w Aug')\n",
    "        else:\n",
    "            audio_aug = rand_cancel(data=audio_aug, crop_factor=time_or_freq_crop_factor) # data crop on time domain\n",
    "            audio_spec_aug = librosa.feature.melspectrogram(y=audio_aug, sr=sample_rate) # data crop on time domain\n",
    "            audio_spec_aug = librosa.power_to_db(audio_spec_aug, ref=np.max)\n",
    "            plt.subplot(4,2,1)\n",
    "            librosa.display.specshow(audio_spec_aug, y_axis='mel')\n",
    "            plt.colorbar(format='%+2.0f dB')\n",
    "            plt.title('Mel-freq Power Spectogram for the Data /w Aug')\n",
    "       \n",
    "    elif spectrogram_type == 'linear':\n",
    "        audio_spec_aug = librosa.amplitude_to_db(librosa.stft(audio_aug), np.max)\n",
    "        plt.subplot(4,2,1)\n",
    "        librosa.display.specshow(audio_spec_aug, y_axis='linear')\n",
    "        plt.colorbar(format='%+2.0f dB')\n",
    "        plt.title('Linear-freq Power Spectogram for the Data /w Aug')\n",
    "\n",
    "    display(Audio(data=audio_aug, rate=sample_rate))\n",
    "    plot_waveform(data=audio_aug, sample_rate=sample_rate)\n",
    "    \n",
    "    \n",
    "def plot_waveform(data, sample_rate):\n",
    "    \"\"\"\n",
    "    visualizes the waveform in time domain, as in amplitudes\n",
    "    meaningful together with the frequency spectrograms\n",
    "    \"\"\"\n",
    "    plt.figure(figsize=(14, 5))\n",
    "    librosa.display.waveplot(data, sr=sample_rate, alpha=0.7)\n",
    "    plt.title('Audio Waveform')\n",
    "    plt.xlabel('Time (s)')\n",
    "    plt.ylabel('Amplitude')\n",
    "    plt.grid(True)\n",
    "    plt.tight_layout()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "64dc6a61",
   "metadata": {
    "papermill": {
     "duration": 0.007497,
     "end_time": "2024-09-11T14:56:43.045150",
     "exception": false,
     "start_time": "2024-09-11T14:56:43.037653",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# MODEL TRAINER\n",
    "* takes in the main data to process through augmentation method(s) and also the original not-augmented training set\n",
    "* takes in the augmentation set to be passed into the parser() function and the model_name, to save the model onto the temp. memory\n",
    "* parser() processes the data with a single augmentation method, at this point, then the newly augmented data is concatenated with the original training data, duplication of the data size\n",
    "* then training and testing are performed \n",
    "* a model, which can be later called and used, is later returned besides accuracy values and processing time data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b7ad6b53",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-11T14:56:43.062987Z",
     "iopub.status.busy": "2024-09-11T14:56:43.062149Z",
     "iopub.status.idle": "2024-09-11T14:56:43.072036Z",
     "shell.execute_reply": "2024-09-11T14:56:43.070895Z"
    },
    "papermill": {
     "duration": 0.021187,
     "end_time": "2024-09-11T14:56:43.074252",
     "exception": false,
     "start_time": "2024-09-11T14:56:43.053065",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# augmentation_list_format = [noise_flag,  crop_freq_time_flag,  noise_factor,  shift_factor,  pitch_factor,  speed_rate,  time_or_freq_crop_factor,  reflection_factor,  crop_double_mask]\n",
    "def model_trainer(data, model_name, aug_set, X_train_no_aug, Y_train_no_aug):\n",
    "    \"\"\"\n",
    "    takes in the dataFrame and the related training data from the not augmented model X_train_no_aug & Y_train_no_aug\n",
    "    also takes in a model_name and aug_set\n",
    "    gives out the model, besides the time and accuracy data of preprocessing, training and evaluation\n",
    "    \"\"\"\n",
    "    noise_flag = aug_set[0]\n",
    "    crop_freq_time_flag = aug_set[1]\n",
    "    crop_double_mask = aug_set[-1]\n",
    "    [noise_factor, shift_factor, pitch_factor, speed_rate, time_or_freq_crop_factor, reflection_factor] = aug_set[2:len(aug_set)-1]\n",
    "            \n",
    "    feature, label, start, end = parser(data, noise_factor=noise_flag, crop_freq=crop_freq_time_flag, snr_dbs=noise_factor, crop_double_mask=crop_double_mask,\n",
    "                                                    shift_factor=shift_factor, pitch_factor=pitch_factor, speed_rate=speed_rate,\n",
    "                                                    crop_factor=time_or_freq_crop_factor, added_shift_factor=reflection_factor, decimal = True, aug = True)\n",
    "    \n",
    "    X_train_aug, X_test_aug, Y_train_aug, Y_test_aug = prepare_data(feature, label)\n",
    "\n",
    "    #extension for the training, p.s. validation should stay the same as it was in the no augmentation case for comparison\n",
    "    X_train = np.concatenate((X_train_no_aug, X_train_aug), axis=0)\n",
    "    Y_train = np.concatenate((Y_train_no_aug, Y_train_aug), axis=0)\n",
    "\n",
    "    model_aug, train_time_aug = train_model(train = True, model_name = model_name, X_test = X_test, X_train = X_train, Y_test = Y_test, Y_train = Y_train, epochs = 90)\n",
    "    train_result_aug, test_result_aug, eval_time_aug = train_test_accuracy(model_aug, X_train, X_test, Y_train, Y_test)\n",
    "    dataprep_aug = (end-start)/60\n",
    "\n",
    "    print(dataprep_aug)\n",
    "    print(train_time_aug)\n",
    "    print(eval_time_aug)\n",
    "    \n",
    "    return [model_aug, test_result_aug, train_result_aug, dataprep_aug, train_time_aug, eval_time_aug]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a3ccb4a",
   "metadata": {
    "papermill": {
     "duration": 0.007681,
     "end_time": "2024-09-11T14:56:43.089872",
     "exception": false,
     "start_time": "2024-09-11T14:56:43.082191",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "* original data reading, not-augmented model training and testing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "8a7097da",
   "metadata": {
    "collapsed": true,
    "execution": {
     "iopub.execute_input": "2024-09-11T14:56:43.107131Z",
     "iopub.status.busy": "2024-09-11T14:56:43.106722Z",
     "iopub.status.idle": "2024-09-11T15:21:21.134901Z",
     "shell.execute_reply": "2024-09-11T15:21:21.132470Z"
    },
    "jupyter": {
     "outputs_hidden": true
    },
    "papermill": {
     "duration": 1478.041071,
     "end_time": "2024-09-11T15:21:21.138729",
     "exception": false,
     "start_time": "2024-09-11T14:56:43.097658",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=2048 is too large for input signal of length=1323\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=2048 is too large for input signal of length=1103\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=2048 is too large for input signal of length=1523\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "90\n",
      "Epoch 1/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 22ms/step - accuracy: 0.4048 - loss: 1.7208 - val_accuracy: 0.5685 - val_loss: 1.2646\n",
      "Epoch 2/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 22ms/step - accuracy: 0.6137 - loss: 1.1379 - val_accuracy: 0.6514 - val_loss: 1.0705\n",
      "Epoch 3/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 20ms/step - accuracy: 0.6870 - loss: 0.9389 - val_accuracy: 0.6816 - val_loss: 1.0373\n",
      "Epoch 4/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.7170 - loss: 0.8312 - val_accuracy: 0.6890 - val_loss: 0.9521\n",
      "Epoch 5/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 21ms/step - accuracy: 0.7659 - loss: 0.7030 - val_accuracy: 0.6867 - val_loss: 0.9355\n",
      "Epoch 6/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 21ms/step - accuracy: 0.7654 - loss: 0.6868 - val_accuracy: 0.7274 - val_loss: 0.9065\n",
      "Epoch 7/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.7983 - loss: 0.6160 - val_accuracy: 0.7444 - val_loss: 0.8522\n",
      "Epoch 8/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 22ms/step - accuracy: 0.8206 - loss: 0.5425 - val_accuracy: 0.7407 - val_loss: 0.8591\n",
      "Epoch 9/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 22ms/step - accuracy: 0.8283 - loss: 0.5014 - val_accuracy: 0.7462 - val_loss: 0.8623\n",
      "Epoch 10/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 21ms/step - accuracy: 0.8408 - loss: 0.4721 - val_accuracy: 0.7714 - val_loss: 0.8061\n",
      "Epoch 11/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 21ms/step - accuracy: 0.8576 - loss: 0.4221 - val_accuracy: 0.7632 - val_loss: 0.8731\n",
      "Epoch 12/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.8530 - loss: 0.4431 - val_accuracy: 0.7824 - val_loss: 0.7579\n",
      "Epoch 13/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 21ms/step - accuracy: 0.8789 - loss: 0.3701 - val_accuracy: 0.7929 - val_loss: 0.7287\n",
      "Epoch 14/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 20ms/step - accuracy: 0.8786 - loss: 0.3808 - val_accuracy: 0.7897 - val_loss: 0.7523\n",
      "Epoch 15/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 22ms/step - accuracy: 0.8878 - loss: 0.3345 - val_accuracy: 0.7998 - val_loss: 0.7408\n",
      "Epoch 16/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.8908 - loss: 0.3207 - val_accuracy: 0.7939 - val_loss: 0.8050\n",
      "Epoch 17/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.8869 - loss: 0.3447 - val_accuracy: 0.7787 - val_loss: 0.8538\n",
      "Epoch 18/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.8977 - loss: 0.3108 - val_accuracy: 0.8012 - val_loss: 0.7551\n",
      "Epoch 19/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9032 - loss: 0.2793 - val_accuracy: 0.8062 - val_loss: 0.8291\n",
      "Epoch 20/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 21ms/step - accuracy: 0.9044 - loss: 0.3047 - val_accuracy: 0.8071 - val_loss: 0.7833\n",
      "Epoch 21/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 21ms/step - accuracy: 0.9251 - loss: 0.2377 - val_accuracy: 0.8305 - val_loss: 0.7468\n",
      "Epoch 22/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9262 - loss: 0.2154 - val_accuracy: 0.8236 - val_loss: 0.7349\n",
      "Epoch 23/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 22ms/step - accuracy: 0.9295 - loss: 0.2087 - val_accuracy: 0.8232 - val_loss: 0.7468\n",
      "Epoch 24/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9269 - loss: 0.2220 - val_accuracy: 0.8154 - val_loss: 0.7686\n",
      "Epoch 25/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 19ms/step - accuracy: 0.9243 - loss: 0.2166 - val_accuracy: 0.8163 - val_loss: 0.7677\n",
      "Epoch 26/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9235 - loss: 0.2312 - val_accuracy: 0.8264 - val_loss: 0.7908\n",
      "Epoch 27/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 19ms/step - accuracy: 0.9377 - loss: 0.1978 - val_accuracy: 0.8172 - val_loss: 0.7989\n",
      "Epoch 28/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9390 - loss: 0.1794 - val_accuracy: 0.8218 - val_loss: 0.7884\n",
      "Epoch 29/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9425 - loss: 0.1679 - val_accuracy: 0.8204 - val_loss: 0.8088\n",
      "Epoch 30/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 22ms/step - accuracy: 0.9373 - loss: 0.1971 - val_accuracy: 0.8287 - val_loss: 0.7968\n",
      "Epoch 31/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9297 - loss: 0.2117 - val_accuracy: 0.8291 - val_loss: 0.7726\n",
      "Epoch 32/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9457 - loss: 0.1700 - val_accuracy: 0.8502 - val_loss: 0.6816\n",
      "Epoch 33/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9581 - loss: 0.1266 - val_accuracy: 0.8443 - val_loss: 0.7360\n",
      "Epoch 34/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9522 - loss: 0.1434 - val_accuracy: 0.8342 - val_loss: 0.7692\n",
      "Epoch 35/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9506 - loss: 0.1411 - val_accuracy: 0.8291 - val_loss: 0.7860\n",
      "Epoch 36/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9592 - loss: 0.1202 - val_accuracy: 0.8443 - val_loss: 0.7924\n",
      "Epoch 37/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 22ms/step - accuracy: 0.9565 - loss: 0.1305 - val_accuracy: 0.8415 - val_loss: 0.8218\n",
      "Epoch 38/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9550 - loss: 0.1379 - val_accuracy: 0.8346 - val_loss: 0.8418\n",
      "Epoch 39/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9545 - loss: 0.1404 - val_accuracy: 0.8443 - val_loss: 0.7629\n",
      "Epoch 40/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9604 - loss: 0.1087 - val_accuracy: 0.8539 - val_loss: 0.7656\n",
      "Epoch 41/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9607 - loss: 0.1202 - val_accuracy: 0.8410 - val_loss: 0.7964\n",
      "Epoch 42/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9629 - loss: 0.1048 - val_accuracy: 0.8456 - val_loss: 0.8084\n",
      "Epoch 43/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 19ms/step - accuracy: 0.9651 - loss: 0.1091 - val_accuracy: 0.8410 - val_loss: 0.8094\n",
      "Epoch 44/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 20ms/step - accuracy: 0.9692 - loss: 0.0944 - val_accuracy: 0.8470 - val_loss: 0.7777\n",
      "Epoch 45/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 19ms/step - accuracy: 0.9682 - loss: 0.1067 - val_accuracy: 0.8497 - val_loss: 0.8046\n",
      "Epoch 46/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9626 - loss: 0.1092 - val_accuracy: 0.8557 - val_loss: 0.7742\n",
      "Epoch 47/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9687 - loss: 0.0992 - val_accuracy: 0.8548 - val_loss: 0.7727\n",
      "Epoch 48/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9715 - loss: 0.0859 - val_accuracy: 0.8557 - val_loss: 0.7981\n",
      "Epoch 49/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9549 - loss: 0.1266 - val_accuracy: 0.8406 - val_loss: 0.8364\n",
      "Epoch 50/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9657 - loss: 0.1100 - val_accuracy: 0.8484 - val_loss: 0.7694\n",
      "Epoch 51/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 19ms/step - accuracy: 0.9689 - loss: 0.0909 - val_accuracy: 0.8502 - val_loss: 0.8293\n",
      "Epoch 52/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 21ms/step - accuracy: 0.9688 - loss: 0.0961 - val_accuracy: 0.8539 - val_loss: 0.8021\n",
      "Epoch 53/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9590 - loss: 0.1125 - val_accuracy: 0.8520 - val_loss: 0.8264\n",
      "Epoch 54/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9692 - loss: 0.1060 - val_accuracy: 0.8612 - val_loss: 0.7526\n",
      "Epoch 55/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9737 - loss: 0.0726 - val_accuracy: 0.8589 - val_loss: 0.7393\n",
      "Epoch 56/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 20ms/step - accuracy: 0.9777 - loss: 0.0641 - val_accuracy: 0.8525 - val_loss: 0.8235\n",
      "Epoch 57/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9732 - loss: 0.0756 - val_accuracy: 0.8557 - val_loss: 0.7914\n",
      "Epoch 58/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 19ms/step - accuracy: 0.9737 - loss: 0.0854 - val_accuracy: 0.8539 - val_loss: 0.8062\n",
      "Epoch 59/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 22ms/step - accuracy: 0.9762 - loss: 0.0768 - val_accuracy: 0.8681 - val_loss: 0.7606\n",
      "Epoch 60/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9700 - loss: 0.0836 - val_accuracy: 0.8525 - val_loss: 0.8349\n",
      "Epoch 61/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9740 - loss: 0.0837 - val_accuracy: 0.8594 - val_loss: 0.7924\n",
      "Epoch 62/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9785 - loss: 0.0624 - val_accuracy: 0.8520 - val_loss: 0.8523\n",
      "Epoch 63/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9784 - loss: 0.0683 - val_accuracy: 0.8475 - val_loss: 0.9093\n",
      "Epoch 64/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9762 - loss: 0.0842 - val_accuracy: 0.8525 - val_loss: 0.9296\n",
      "Epoch 65/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9697 - loss: 0.0818 - val_accuracy: 0.8617 - val_loss: 0.8387\n",
      "Epoch 66/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 21ms/step - accuracy: 0.9824 - loss: 0.0516 - val_accuracy: 0.8516 - val_loss: 0.9020\n",
      "Epoch 67/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9776 - loss: 0.0680 - val_accuracy: 0.8497 - val_loss: 0.8445\n",
      "Epoch 68/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9780 - loss: 0.0629 - val_accuracy: 0.8676 - val_loss: 0.7629\n",
      "Epoch 69/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 19ms/step - accuracy: 0.9772 - loss: 0.0706 - val_accuracy: 0.8635 - val_loss: 0.7846\n",
      "Epoch 70/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 19ms/step - accuracy: 0.9773 - loss: 0.0654 - val_accuracy: 0.8676 - val_loss: 0.8234\n",
      "Epoch 71/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9842 - loss: 0.0484 - val_accuracy: 0.8681 - val_loss: 0.8226\n",
      "Epoch 72/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9741 - loss: 0.0838 - val_accuracy: 0.8607 - val_loss: 0.8938\n",
      "Epoch 73/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 22ms/step - accuracy: 0.9826 - loss: 0.0511 - val_accuracy: 0.8626 - val_loss: 0.8892\n",
      "Epoch 74/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 22ms/step - accuracy: 0.9762 - loss: 0.0836 - val_accuracy: 0.8598 - val_loss: 0.8767\n",
      "Epoch 75/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 21ms/step - accuracy: 0.9780 - loss: 0.0710 - val_accuracy: 0.8566 - val_loss: 0.8774\n",
      "Epoch 76/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9787 - loss: 0.0623 - val_accuracy: 0.8649 - val_loss: 0.8351\n",
      "Epoch 77/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 21ms/step - accuracy: 0.9837 - loss: 0.0487 - val_accuracy: 0.8607 - val_loss: 0.8539\n",
      "Epoch 78/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 21ms/step - accuracy: 0.9844 - loss: 0.0484 - val_accuracy: 0.8607 - val_loss: 0.8777\n",
      "Epoch 79/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9840 - loss: 0.0470 - val_accuracy: 0.8617 - val_loss: 0.8327\n",
      "Epoch 80/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 22ms/step - accuracy: 0.9861 - loss: 0.0434 - val_accuracy: 0.8598 - val_loss: 0.9209\n",
      "Epoch 81/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9826 - loss: 0.0554 - val_accuracy: 0.8644 - val_loss: 0.8188\n",
      "Epoch 82/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 19ms/step - accuracy: 0.9755 - loss: 0.0730 - val_accuracy: 0.8626 - val_loss: 0.7806\n",
      "Epoch 83/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 19ms/step - accuracy: 0.9801 - loss: 0.0585 - val_accuracy: 0.8722 - val_loss: 0.8070\n",
      "Epoch 84/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9870 - loss: 0.0365 - val_accuracy: 0.8727 - val_loss: 0.8197\n",
      "Epoch 85/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9824 - loss: 0.0466 - val_accuracy: 0.8772 - val_loss: 0.7890\n",
      "Epoch 86/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9827 - loss: 0.0540 - val_accuracy: 0.8603 - val_loss: 0.8794\n",
      "Epoch 87/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9795 - loss: 0.0560 - val_accuracy: 0.8667 - val_loss: 0.8476\n",
      "Epoch 88/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 21ms/step - accuracy: 0.9754 - loss: 0.0702 - val_accuracy: 0.8772 - val_loss: 0.8050\n",
      "Epoch 89/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9876 - loss: 0.0381 - val_accuracy: 0.8598 - val_loss: 0.9400\n",
      "Epoch 90/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step - accuracy: 0.9813 - loss: 0.0583 - val_accuracy: 0.8635 - val_loss: 0.8617\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - accuracy: 0.8603 - loss: 0.8107\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 10ms/step\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 8ms/step - accuracy: 0.9912 - loss: 0.0243\n",
      "17.730501973628996\n",
      "6.809054183959961\n",
      "0.09265029430389404\n"
     ]
    }
   ],
   "source": [
    "# read the original dataset\n",
    "df = pd.read_csv(\"/kaggle/input/urbansound8k/UrbanSound8K.csv\")\n",
    "\n",
    "# no augmentation, base model\n",
    "feature, label, start, end = parser(df, noise_factor=0, crop_factor=0, shift_factor=0, pitch_factor=0, speed_rate=1, decimal = True, aug = False)\n",
    "X_train, X_test, Y_train, Y_test = prepare_data(feature, label)\n",
    "\n",
    "model_noaug, train_time_noaug = train_model(train = True, model_name = \"Original_Model\", X_test = X_test, X_train = X_train, Y_test = Y_test, Y_train = Y_train, epochs = 90)\n",
    "train_result_noaug, test_result_noaug, eval_time_noaug = train_test_accuracy(model_noaug, X_train, X_test, Y_train, Y_test)\n",
    "time_elapsed_no_aug = (end-start)/60\n",
    "\n",
    "print(time_elapsed_no_aug)\n",
    "print(train_time_noaug)\n",
    "print(eval_time_noaug)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78d26b1d",
   "metadata": {
    "papermill": {
     "duration": 0.58011,
     "end_time": "2024-09-11T15:21:22.226479",
     "exception": false,
     "start_time": "2024-09-11T15:21:21.646369",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# TRAINING MODELS WITH THE AUGMENTED DATASETS, SINGLE AUGMENTATION\n",
    "* a dictionary for model training is created in which we have the augmentation methods, and augmentation value lists with only one augmentation would be active\n",
    "* a for loop to go through these augmentation methods, which would give out the model validation and training properties in a list that can be later tabulated"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "993ac389",
   "metadata": {
    "collapsed": true,
    "execution": {
     "iopub.execute_input": "2024-09-11T15:21:23.173403Z",
     "iopub.status.busy": "2024-09-11T15:21:23.171862Z",
     "iopub.status.idle": "2024-09-11T19:02:19.686670Z",
     "shell.execute_reply": "2024-09-11T19:02:19.684156Z"
    },
    "jupyter": {
     "outputs_hidden": true
    },
    "papermill": {
     "duration": 13256.990909,
     "end_time": "2024-09-11T19:02:19.690860",
     "exception": false,
     "start_time": "2024-09-11T15:21:22.699951",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "90\n",
      "Epoch 1/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 20ms/step - accuracy: 0.4540 - loss: 1.5873 - val_accuracy: 0.6093 - val_loss: 1.1501\n",
      "Epoch 2/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.6646 - loss: 0.9940 - val_accuracy: 0.6844 - val_loss: 0.9489\n",
      "Epoch 3/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.7325 - loss: 0.7938 - val_accuracy: 0.6885 - val_loss: 1.0231\n",
      "Epoch 4/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.7646 - loss: 0.7143 - val_accuracy: 0.7320 - val_loss: 0.8539\n",
      "Epoch 5/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.7968 - loss: 0.6019 - val_accuracy: 0.7623 - val_loss: 0.8145\n",
      "Epoch 6/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.8257 - loss: 0.5228 - val_accuracy: 0.7737 - val_loss: 0.7631\n",
      "Epoch 7/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.8521 - loss: 0.4563 - val_accuracy: 0.7893 - val_loss: 0.8054\n",
      "Epoch 8/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.8651 - loss: 0.4075 - val_accuracy: 0.7838 - val_loss: 0.7895\n",
      "Epoch 9/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.8768 - loss: 0.3766 - val_accuracy: 0.8154 - val_loss: 0.6680\n",
      "Epoch 10/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.8908 - loss: 0.3301 - val_accuracy: 0.8117 - val_loss: 0.7238\n",
      "Epoch 11/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.8906 - loss: 0.3215 - val_accuracy: 0.8085 - val_loss: 0.7318\n",
      "Epoch 12/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.8964 - loss: 0.2953 - val_accuracy: 0.8227 - val_loss: 0.6796\n",
      "Epoch 13/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9149 - loss: 0.2594 - val_accuracy: 0.8246 - val_loss: 0.6704\n",
      "Epoch 14/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9208 - loss: 0.2342 - val_accuracy: 0.8273 - val_loss: 0.7073\n",
      "Epoch 15/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9259 - loss: 0.2190 - val_accuracy: 0.8241 - val_loss: 0.7160\n",
      "Epoch 16/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9295 - loss: 0.2043 - val_accuracy: 0.8328 - val_loss: 0.7100\n",
      "Epoch 17/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9377 - loss: 0.1797 - val_accuracy: 0.8420 - val_loss: 0.6733\n",
      "Epoch 18/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9401 - loss: 0.1723 - val_accuracy: 0.8424 - val_loss: 0.7272\n",
      "Epoch 19/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9468 - loss: 0.1613 - val_accuracy: 0.8337 - val_loss: 0.7917\n",
      "Epoch 20/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9405 - loss: 0.1704 - val_accuracy: 0.8497 - val_loss: 0.7011\n",
      "Epoch 21/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9504 - loss: 0.1507 - val_accuracy: 0.8525 - val_loss: 0.6734\n",
      "Epoch 22/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 18ms/step - accuracy: 0.9563 - loss: 0.1301 - val_accuracy: 0.8310 - val_loss: 0.8174\n",
      "Epoch 23/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9557 - loss: 0.1335 - val_accuracy: 0.8520 - val_loss: 0.6955\n",
      "Epoch 24/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9547 - loss: 0.1313 - val_accuracy: 0.8484 - val_loss: 0.7120\n",
      "Epoch 25/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9567 - loss: 0.1215 - val_accuracy: 0.8562 - val_loss: 0.7144\n",
      "Epoch 26/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9621 - loss: 0.1132 - val_accuracy: 0.8520 - val_loss: 0.7339\n",
      "Epoch 27/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9602 - loss: 0.1167 - val_accuracy: 0.8543 - val_loss: 0.6758\n",
      "Epoch 28/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9669 - loss: 0.1002 - val_accuracy: 0.8575 - val_loss: 0.7112\n",
      "Epoch 29/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9675 - loss: 0.0951 - val_accuracy: 0.8461 - val_loss: 0.7436\n",
      "Epoch 30/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9634 - loss: 0.1078 - val_accuracy: 0.8516 - val_loss: 0.7724\n",
      "Epoch 31/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9707 - loss: 0.0867 - val_accuracy: 0.8543 - val_loss: 0.7827\n",
      "Epoch 32/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9688 - loss: 0.0895 - val_accuracy: 0.8461 - val_loss: 0.7963\n",
      "Epoch 33/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9728 - loss: 0.0850 - val_accuracy: 0.8493 - val_loss: 0.7986\n",
      "Epoch 34/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 18ms/step - accuracy: 0.9654 - loss: 0.0991 - val_accuracy: 0.8552 - val_loss: 0.7695\n",
      "Epoch 35/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9737 - loss: 0.0758 - val_accuracy: 0.8639 - val_loss: 0.7123\n",
      "Epoch 36/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9792 - loss: 0.0627 - val_accuracy: 0.8621 - val_loss: 0.7956\n",
      "Epoch 37/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9761 - loss: 0.0733 - val_accuracy: 0.8355 - val_loss: 0.9122\n",
      "Epoch 38/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9685 - loss: 0.0930 - val_accuracy: 0.8585 - val_loss: 0.8242\n",
      "Epoch 39/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9732 - loss: 0.0779 - val_accuracy: 0.8589 - val_loss: 0.8387\n",
      "Epoch 40/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9746 - loss: 0.0692 - val_accuracy: 0.8552 - val_loss: 0.8056\n",
      "Epoch 41/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9781 - loss: 0.0695 - val_accuracy: 0.8635 - val_loss: 0.7811\n",
      "Epoch 42/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9776 - loss: 0.0650 - val_accuracy: 0.8607 - val_loss: 0.8072\n",
      "Epoch 43/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9753 - loss: 0.0728 - val_accuracy: 0.8575 - val_loss: 0.7711\n",
      "Epoch 44/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9730 - loss: 0.0733 - val_accuracy: 0.8566 - val_loss: 0.7771\n",
      "Epoch 45/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9766 - loss: 0.0677 - val_accuracy: 0.8635 - val_loss: 0.7898\n",
      "Epoch 46/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9775 - loss: 0.0653 - val_accuracy: 0.8658 - val_loss: 0.8233\n",
      "Epoch 47/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9792 - loss: 0.0603 - val_accuracy: 0.8676 - val_loss: 0.8304\n",
      "Epoch 48/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9812 - loss: 0.0563 - val_accuracy: 0.8662 - val_loss: 0.8061\n",
      "Epoch 49/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9772 - loss: 0.0655 - val_accuracy: 0.8465 - val_loss: 0.9237\n",
      "Epoch 50/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9794 - loss: 0.0662 - val_accuracy: 0.8548 - val_loss: 0.8576\n",
      "Epoch 51/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9800 - loss: 0.0592 - val_accuracy: 0.8571 - val_loss: 0.8393\n",
      "Epoch 52/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9787 - loss: 0.0661 - val_accuracy: 0.8612 - val_loss: 0.8333\n",
      "Epoch 53/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9834 - loss: 0.0505 - val_accuracy: 0.8626 - val_loss: 0.8679\n",
      "Epoch 54/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9844 - loss: 0.0465 - val_accuracy: 0.8575 - val_loss: 0.9305\n",
      "Epoch 55/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 17ms/step - accuracy: 0.9790 - loss: 0.0644 - val_accuracy: 0.8621 - val_loss: 0.8008\n",
      "Epoch 56/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9843 - loss: 0.0470 - val_accuracy: 0.8639 - val_loss: 0.8363\n",
      "Epoch 57/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 18ms/step - accuracy: 0.9856 - loss: 0.0409 - val_accuracy: 0.8630 - val_loss: 0.8793\n",
      "Epoch 58/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 19ms/step - accuracy: 0.9804 - loss: 0.0593 - val_accuracy: 0.8644 - val_loss: 0.7970\n",
      "Epoch 59/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9835 - loss: 0.0516 - val_accuracy: 0.8685 - val_loss: 0.9144\n",
      "Epoch 60/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9834 - loss: 0.0513 - val_accuracy: 0.8507 - val_loss: 0.9498\n",
      "Epoch 61/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9807 - loss: 0.0576 - val_accuracy: 0.8552 - val_loss: 0.9048\n",
      "Epoch 62/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9835 - loss: 0.0470 - val_accuracy: 0.8630 - val_loss: 0.8550\n",
      "Epoch 63/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9861 - loss: 0.0414 - val_accuracy: 0.8749 - val_loss: 0.8262\n",
      "Epoch 64/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9861 - loss: 0.0384 - val_accuracy: 0.8598 - val_loss: 0.8864\n",
      "Epoch 65/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9861 - loss: 0.0469 - val_accuracy: 0.8708 - val_loss: 0.7759\n",
      "Epoch 66/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 18ms/step - accuracy: 0.9788 - loss: 0.0600 - val_accuracy: 0.8456 - val_loss: 0.9011\n",
      "Epoch 67/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9815 - loss: 0.0606 - val_accuracy: 0.8607 - val_loss: 0.8936\n",
      "Epoch 68/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 18ms/step - accuracy: 0.9845 - loss: 0.0480 - val_accuracy: 0.8594 - val_loss: 0.9219\n",
      "Epoch 69/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9872 - loss: 0.0345 - val_accuracy: 0.8562 - val_loss: 0.9562\n",
      "Epoch 70/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 18ms/step - accuracy: 0.9858 - loss: 0.0457 - val_accuracy: 0.8543 - val_loss: 0.9208\n",
      "Epoch 71/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9871 - loss: 0.0401 - val_accuracy: 0.8589 - val_loss: 0.9456\n",
      "Epoch 72/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9795 - loss: 0.0700 - val_accuracy: 0.8621 - val_loss: 0.9339\n",
      "Epoch 73/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9828 - loss: 0.0502 - val_accuracy: 0.8575 - val_loss: 0.8841\n",
      "Epoch 74/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9875 - loss: 0.0352 - val_accuracy: 0.8681 - val_loss: 0.8447\n",
      "Epoch 75/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9873 - loss: 0.0401 - val_accuracy: 0.8603 - val_loss: 0.9123\n",
      "Epoch 76/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9861 - loss: 0.0425 - val_accuracy: 0.8594 - val_loss: 0.8798\n",
      "Epoch 77/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9858 - loss: 0.0475 - val_accuracy: 0.8607 - val_loss: 0.9351\n",
      "Epoch 78/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9865 - loss: 0.0429 - val_accuracy: 0.8676 - val_loss: 0.8660\n",
      "Epoch 79/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9860 - loss: 0.0459 - val_accuracy: 0.8713 - val_loss: 0.9512\n",
      "Epoch 80/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9883 - loss: 0.0372 - val_accuracy: 0.8621 - val_loss: 0.9663\n",
      "Epoch 81/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9877 - loss: 0.0406 - val_accuracy: 0.8681 - val_loss: 0.9333\n",
      "Epoch 82/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9860 - loss: 0.0414 - val_accuracy: 0.8713 - val_loss: 0.9586\n",
      "Epoch 83/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9883 - loss: 0.0371 - val_accuracy: 0.8722 - val_loss: 0.8738\n",
      "Epoch 84/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9864 - loss: 0.0474 - val_accuracy: 0.8681 - val_loss: 0.9234\n",
      "Epoch 85/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9866 - loss: 0.0372 - val_accuracy: 0.8639 - val_loss: 0.9278\n",
      "Epoch 86/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9876 - loss: 0.0445 - val_accuracy: 0.8658 - val_loss: 0.8826\n",
      "Epoch 87/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9859 - loss: 0.0401 - val_accuracy: 0.8676 - val_loss: 0.9237\n",
      "Epoch 88/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9891 - loss: 0.0330 - val_accuracy: 0.8736 - val_loss: 0.8519\n",
      "Epoch 89/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9897 - loss: 0.0376 - val_accuracy: 0.8626 - val_loss: 0.9775\n",
      "Epoch 90/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9866 - loss: 0.0493 - val_accuracy: 0.8672 - val_loss: 0.9243\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.8737 - loss: 0.8839\n",
      "\u001b[1m410/410\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 5ms/step\n",
      "\u001b[1m410/410\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 6ms/step - accuracy: 0.9935 - loss: 0.0197\n",
      "16.359330415725708\n",
      "12.364727115631103\n",
      "0.10259881019592285\n",
      "90\n",
      "Epoch 1/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 20ms/step - accuracy: 0.4727 - loss: 1.5646 - val_accuracy: 0.6184 - val_loss: 1.1622\n",
      "Epoch 2/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 18ms/step - accuracy: 0.6811 - loss: 0.9541 - val_accuracy: 0.7009 - val_loss: 0.9857\n",
      "Epoch 3/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.7495 - loss: 0.7404 - val_accuracy: 0.6995 - val_loss: 0.9552\n",
      "Epoch 4/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.7923 - loss: 0.6185 - val_accuracy: 0.7238 - val_loss: 0.9771\n",
      "Epoch 5/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.8176 - loss: 0.5542 - val_accuracy: 0.7526 - val_loss: 0.8501\n",
      "Epoch 6/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.8430 - loss: 0.4721 - val_accuracy: 0.7655 - val_loss: 0.8292\n",
      "Epoch 7/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.8683 - loss: 0.4044 - val_accuracy: 0.7435 - val_loss: 0.9840\n",
      "Epoch 8/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.8714 - loss: 0.3774 - val_accuracy: 0.7732 - val_loss: 0.8553\n",
      "Epoch 9/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.8891 - loss: 0.3299 - val_accuracy: 0.7943 - val_loss: 0.7631\n",
      "Epoch 10/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9054 - loss: 0.2794 - val_accuracy: 0.7838 - val_loss: 0.8696\n",
      "Epoch 11/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9114 - loss: 0.2677 - val_accuracy: 0.8255 - val_loss: 0.7332\n",
      "Epoch 12/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9229 - loss: 0.2343 - val_accuracy: 0.8145 - val_loss: 0.7538\n",
      "Epoch 13/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9288 - loss: 0.2163 - val_accuracy: 0.8268 - val_loss: 0.7128\n",
      "Epoch 14/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 18ms/step - accuracy: 0.9381 - loss: 0.1825 - val_accuracy: 0.8026 - val_loss: 0.8060\n",
      "Epoch 15/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9379 - loss: 0.1875 - val_accuracy: 0.8301 - val_loss: 0.8193\n",
      "Epoch 16/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9397 - loss: 0.1805 - val_accuracy: 0.8209 - val_loss: 0.8715\n",
      "Epoch 17/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9459 - loss: 0.1675 - val_accuracy: 0.8305 - val_loss: 0.7897\n",
      "Epoch 18/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9515 - loss: 0.1493 - val_accuracy: 0.8168 - val_loss: 0.8578\n",
      "Epoch 19/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9502 - loss: 0.1488 - val_accuracy: 0.8392 - val_loss: 0.7188\n",
      "Epoch 20/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9541 - loss: 0.1320 - val_accuracy: 0.8246 - val_loss: 0.8474\n",
      "Epoch 21/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9592 - loss: 0.1206 - val_accuracy: 0.8530 - val_loss: 0.7802\n",
      "Epoch 22/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9675 - loss: 0.1009 - val_accuracy: 0.8401 - val_loss: 0.8205\n",
      "Epoch 23/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9661 - loss: 0.1039 - val_accuracy: 0.8406 - val_loss: 0.8450\n",
      "Epoch 24/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9650 - loss: 0.1022 - val_accuracy: 0.8241 - val_loss: 0.9060\n",
      "Epoch 25/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9592 - loss: 0.1149 - val_accuracy: 0.8328 - val_loss: 0.8735\n",
      "Epoch 26/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9689 - loss: 0.0894 - val_accuracy: 0.8484 - val_loss: 0.7967\n",
      "Epoch 27/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9701 - loss: 0.0879 - val_accuracy: 0.8488 - val_loss: 0.8029\n",
      "Epoch 28/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9737 - loss: 0.0757 - val_accuracy: 0.8488 - val_loss: 0.8353\n",
      "Epoch 29/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9712 - loss: 0.0837 - val_accuracy: 0.8475 - val_loss: 0.7990\n",
      "Epoch 30/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9722 - loss: 0.0819 - val_accuracy: 0.8511 - val_loss: 0.8728\n",
      "Epoch 31/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9750 - loss: 0.0738 - val_accuracy: 0.8470 - val_loss: 0.9199\n",
      "Epoch 32/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9764 - loss: 0.0717 - val_accuracy: 0.8410 - val_loss: 0.9062\n",
      "Epoch 33/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9734 - loss: 0.0817 - val_accuracy: 0.8461 - val_loss: 0.8801\n",
      "Epoch 34/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 18ms/step - accuracy: 0.9762 - loss: 0.0718 - val_accuracy: 0.8539 - val_loss: 0.8083\n",
      "Epoch 35/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9823 - loss: 0.0544 - val_accuracy: 0.8493 - val_loss: 0.8947\n",
      "Epoch 36/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9790 - loss: 0.0655 - val_accuracy: 0.8365 - val_loss: 1.0209\n",
      "Epoch 37/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9705 - loss: 0.0926 - val_accuracy: 0.8420 - val_loss: 0.8969\n",
      "Epoch 38/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9819 - loss: 0.0520 - val_accuracy: 0.8598 - val_loss: 0.8502\n",
      "Epoch 39/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9801 - loss: 0.0603 - val_accuracy: 0.8502 - val_loss: 0.8955\n",
      "Epoch 40/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 19ms/step - accuracy: 0.9768 - loss: 0.0683 - val_accuracy: 0.8603 - val_loss: 0.8835\n",
      "Epoch 41/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9829 - loss: 0.0540 - val_accuracy: 0.8516 - val_loss: 0.9136\n",
      "Epoch 42/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9760 - loss: 0.0659 - val_accuracy: 0.8621 - val_loss: 0.8651\n",
      "Epoch 43/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9885 - loss: 0.0374 - val_accuracy: 0.8493 - val_loss: 0.8929\n",
      "Epoch 44/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 20ms/step - accuracy: 0.9761 - loss: 0.0634 - val_accuracy: 0.8484 - val_loss: 0.8820\n",
      "Epoch 45/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9826 - loss: 0.0549 - val_accuracy: 0.8612 - val_loss: 0.8826\n",
      "Epoch 46/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9850 - loss: 0.0433 - val_accuracy: 0.8566 - val_loss: 0.8705\n",
      "Epoch 47/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9829 - loss: 0.0478 - val_accuracy: 0.8639 - val_loss: 0.8590\n",
      "Epoch 48/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9809 - loss: 0.0568 - val_accuracy: 0.8566 - val_loss: 0.8889\n",
      "Epoch 49/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9854 - loss: 0.0432 - val_accuracy: 0.8507 - val_loss: 1.0630\n",
      "Epoch 50/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9816 - loss: 0.0577 - val_accuracy: 0.8562 - val_loss: 0.9684\n",
      "Epoch 51/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9831 - loss: 0.0530 - val_accuracy: 0.8507 - val_loss: 0.9388\n",
      "Epoch 52/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9827 - loss: 0.0500 - val_accuracy: 0.8649 - val_loss: 0.8484\n",
      "Epoch 53/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9857 - loss: 0.0415 - val_accuracy: 0.8635 - val_loss: 0.9038\n",
      "Epoch 54/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9843 - loss: 0.0462 - val_accuracy: 0.8589 - val_loss: 0.8909\n",
      "Epoch 55/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9849 - loss: 0.0428 - val_accuracy: 0.8594 - val_loss: 1.0248\n",
      "Epoch 56/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9859 - loss: 0.0428 - val_accuracy: 0.8525 - val_loss: 1.0357\n",
      "Epoch 57/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 20ms/step - accuracy: 0.9831 - loss: 0.0533 - val_accuracy: 0.8672 - val_loss: 0.8814\n",
      "Epoch 58/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9897 - loss: 0.0341 - val_accuracy: 0.8662 - val_loss: 0.9132\n",
      "Epoch 59/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9867 - loss: 0.0418 - val_accuracy: 0.8603 - val_loss: 0.9469\n",
      "Epoch 60/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9880 - loss: 0.0393 - val_accuracy: 0.8397 - val_loss: 1.0044\n",
      "Epoch 61/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 21ms/step - accuracy: 0.9836 - loss: 0.0555 - val_accuracy: 0.8507 - val_loss: 0.9961\n",
      "Epoch 62/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 18ms/step - accuracy: 0.9879 - loss: 0.0359 - val_accuracy: 0.8585 - val_loss: 0.9544\n",
      "Epoch 63/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9916 - loss: 0.0273 - val_accuracy: 0.8626 - val_loss: 0.9611\n",
      "Epoch 64/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9865 - loss: 0.0427 - val_accuracy: 0.8511 - val_loss: 0.9784\n",
      "Epoch 65/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 20ms/step - accuracy: 0.9918 - loss: 0.0288 - val_accuracy: 0.8557 - val_loss: 0.9827\n",
      "Epoch 66/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9885 - loss: 0.0403 - val_accuracy: 0.8580 - val_loss: 0.9689\n",
      "Epoch 67/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9880 - loss: 0.0399 - val_accuracy: 0.8420 - val_loss: 1.0142\n",
      "Epoch 68/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 17ms/step - accuracy: 0.9855 - loss: 0.0444 - val_accuracy: 0.8612 - val_loss: 0.9438\n",
      "Epoch 69/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 20ms/step - accuracy: 0.9868 - loss: 0.0389 - val_accuracy: 0.8539 - val_loss: 1.0986\n",
      "Epoch 70/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9881 - loss: 0.0365 - val_accuracy: 0.8603 - val_loss: 1.0179\n",
      "Epoch 71/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9880 - loss: 0.0333 - val_accuracy: 0.8566 - val_loss: 0.9759\n",
      "Epoch 72/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9885 - loss: 0.0330 - val_accuracy: 0.8575 - val_loss: 1.0027\n",
      "Epoch 73/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 19ms/step - accuracy: 0.9903 - loss: 0.0315 - val_accuracy: 0.8626 - val_loss: 0.9757\n",
      "Epoch 74/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9891 - loss: 0.0354 - val_accuracy: 0.8507 - val_loss: 1.0676\n",
      "Epoch 75/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9833 - loss: 0.0520 - val_accuracy: 0.8658 - val_loss: 0.9992\n",
      "Epoch 76/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9878 - loss: 0.0363 - val_accuracy: 0.8690 - val_loss: 0.8582\n",
      "Epoch 77/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9897 - loss: 0.0322 - val_accuracy: 0.8653 - val_loss: 0.9286\n",
      "Epoch 78/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9901 - loss: 0.0341 - val_accuracy: 0.8621 - val_loss: 0.9515\n",
      "Epoch 79/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9863 - loss: 0.0370 - val_accuracy: 0.8548 - val_loss: 1.0755\n",
      "Epoch 80/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9913 - loss: 0.0333 - val_accuracy: 0.8667 - val_loss: 1.0312\n",
      "Epoch 81/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9896 - loss: 0.0359 - val_accuracy: 0.8603 - val_loss: 1.0096\n",
      "Epoch 82/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9916 - loss: 0.0263 - val_accuracy: 0.8635 - val_loss: 1.0114\n",
      "Epoch 83/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9884 - loss: 0.0322 - val_accuracy: 0.8580 - val_loss: 0.9825\n",
      "Epoch 84/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9873 - loss: 0.0403 - val_accuracy: 0.8516 - val_loss: 1.0580\n",
      "Epoch 85/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9918 - loss: 0.0332 - val_accuracy: 0.8662 - val_loss: 1.0391\n",
      "Epoch 86/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9902 - loss: 0.0327 - val_accuracy: 0.8552 - val_loss: 1.1079\n",
      "Epoch 87/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9889 - loss: 0.0411 - val_accuracy: 0.8552 - val_loss: 1.1002\n",
      "Epoch 88/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9883 - loss: 0.0357 - val_accuracy: 0.8667 - val_loss: 0.9847\n",
      "Epoch 89/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9909 - loss: 0.0312 - val_accuracy: 0.8617 - val_loss: 1.0748\n",
      "Epoch 90/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 18ms/step - accuracy: 0.9876 - loss: 0.0445 - val_accuracy: 0.8479 - val_loss: 1.1262\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 0.8565 - loss: 1.0865\n",
      "\u001b[1m410/410\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 5ms/step\n",
      "\u001b[1m410/410\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 6ms/step - accuracy: 0.9883 - loss: 0.0525\n",
      "15.59047824939092\n",
      "12.270131047566732\n",
      "0.10072004795074463\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=2048 is too large for input signal of length=1323\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=2048 is too large for input signal of length=1103\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=2048 is too large for input signal of length=1523\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "90\n",
      "Epoch 1/90\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 20ms/step - accuracy: 0.4460 - loss: 1.6275 - val_accuracy: 0.6230 - val_loss: 1.1782\n",
      "Epoch 2/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 18ms/step - accuracy: 0.6527 - loss: 1.0231 - val_accuracy: 0.7059 - val_loss: 0.9603\n",
      "Epoch 3/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.7188 - loss: 0.8249 - val_accuracy: 0.7233 - val_loss: 0.8410\n",
      "Epoch 4/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.7697 - loss: 0.6802 - val_accuracy: 0.7641 - val_loss: 0.7462\n",
      "Epoch 5/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 19ms/step - accuracy: 0.8057 - loss: 0.5835 - val_accuracy: 0.7765 - val_loss: 0.7833\n",
      "Epoch 6/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.8342 - loss: 0.5049 - val_accuracy: 0.7907 - val_loss: 0.7245\n",
      "Epoch 7/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.8536 - loss: 0.4497 - val_accuracy: 0.7838 - val_loss: 0.7485\n",
      "Epoch 8/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.8744 - loss: 0.3812 - val_accuracy: 0.7856 - val_loss: 0.7636\n",
      "Epoch 9/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 20ms/step - accuracy: 0.8822 - loss: 0.3688 - val_accuracy: 0.8053 - val_loss: 0.7571\n",
      "Epoch 10/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.8930 - loss: 0.3125 - val_accuracy: 0.8113 - val_loss: 0.6729\n",
      "Epoch 11/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.8959 - loss: 0.3020 - val_accuracy: 0.8278 - val_loss: 0.6889\n",
      "Epoch 12/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9100 - loss: 0.2715 - val_accuracy: 0.8191 - val_loss: 0.7039\n",
      "Epoch 13/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 21ms/step - accuracy: 0.9251 - loss: 0.2343 - val_accuracy: 0.8287 - val_loss: 0.6794\n",
      "Epoch 14/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 18ms/step - accuracy: 0.9164 - loss: 0.2358 - val_accuracy: 0.8511 - val_loss: 0.6539\n",
      "Epoch 15/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9304 - loss: 0.2033 - val_accuracy: 0.8392 - val_loss: 0.6340\n",
      "Epoch 16/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 17ms/step - accuracy: 0.9359 - loss: 0.1895 - val_accuracy: 0.8401 - val_loss: 0.6475\n",
      "Epoch 17/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 21ms/step - accuracy: 0.9379 - loss: 0.1805 - val_accuracy: 0.8598 - val_loss: 0.6147\n",
      "Epoch 18/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9446 - loss: 0.1646 - val_accuracy: 0.8484 - val_loss: 0.6655\n",
      "Epoch 19/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9462 - loss: 0.1569 - val_accuracy: 0.8360 - val_loss: 0.6882\n",
      "Epoch 20/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9516 - loss: 0.1434 - val_accuracy: 0.8589 - val_loss: 0.6879\n",
      "Epoch 21/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 21ms/step - accuracy: 0.9529 - loss: 0.1437 - val_accuracy: 0.8424 - val_loss: 0.7359\n",
      "Epoch 22/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9546 - loss: 0.1236 - val_accuracy: 0.8539 - val_loss: 0.7583\n",
      "Epoch 23/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9526 - loss: 0.1385 - val_accuracy: 0.8465 - val_loss: 0.6694\n",
      "Epoch 24/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9628 - loss: 0.1120 - val_accuracy: 0.8621 - val_loss: 0.6691\n",
      "Epoch 25/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 21ms/step - accuracy: 0.9641 - loss: 0.1040 - val_accuracy: 0.8548 - val_loss: 0.7330\n",
      "Epoch 26/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9676 - loss: 0.1003 - val_accuracy: 0.8433 - val_loss: 0.7460\n",
      "Epoch 27/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9588 - loss: 0.1191 - val_accuracy: 0.8516 - val_loss: 0.7253\n",
      "Epoch 28/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9693 - loss: 0.0952 - val_accuracy: 0.8699 - val_loss: 0.7113\n",
      "Epoch 29/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 20ms/step - accuracy: 0.9716 - loss: 0.0815 - val_accuracy: 0.8690 - val_loss: 0.6910\n",
      "Epoch 30/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9754 - loss: 0.0753 - val_accuracy: 0.8575 - val_loss: 0.7851\n",
      "Epoch 31/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9715 - loss: 0.0838 - val_accuracy: 0.8612 - val_loss: 0.7341\n",
      "Epoch 32/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9672 - loss: 0.0967 - val_accuracy: 0.8612 - val_loss: 0.7293\n",
      "Epoch 33/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 19ms/step - accuracy: 0.9754 - loss: 0.0728 - val_accuracy: 0.8731 - val_loss: 0.7033\n",
      "Epoch 34/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9754 - loss: 0.0663 - val_accuracy: 0.8603 - val_loss: 0.7324\n",
      "Epoch 35/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9731 - loss: 0.0767 - val_accuracy: 0.8662 - val_loss: 0.7397\n",
      "Epoch 36/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9789 - loss: 0.0644 - val_accuracy: 0.8603 - val_loss: 0.7879\n",
      "Epoch 37/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9747 - loss: 0.0744 - val_accuracy: 0.8594 - val_loss: 0.6988\n",
      "Epoch 38/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9719 - loss: 0.0857 - val_accuracy: 0.8704 - val_loss: 0.7486\n",
      "Epoch 39/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9817 - loss: 0.0566 - val_accuracy: 0.8612 - val_loss: 0.8134\n",
      "Epoch 40/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9743 - loss: 0.0736 - val_accuracy: 0.8685 - val_loss: 0.7513\n",
      "Epoch 41/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9799 - loss: 0.0575 - val_accuracy: 0.8690 - val_loss: 0.7661\n",
      "Epoch 42/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 20ms/step - accuracy: 0.9826 - loss: 0.0527 - val_accuracy: 0.8649 - val_loss: 0.7241\n",
      "Epoch 43/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9775 - loss: 0.0648 - val_accuracy: 0.8685 - val_loss: 0.7851\n",
      "Epoch 44/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9807 - loss: 0.0547 - val_accuracy: 0.8621 - val_loss: 0.8177\n",
      "Epoch 45/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9791 - loss: 0.0630 - val_accuracy: 0.8694 - val_loss: 0.7263\n",
      "Epoch 46/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 20ms/step - accuracy: 0.9800 - loss: 0.0611 - val_accuracy: 0.8630 - val_loss: 0.8516\n",
      "Epoch 47/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9806 - loss: 0.0565 - val_accuracy: 0.8717 - val_loss: 0.7466\n",
      "Epoch 48/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9869 - loss: 0.0390 - val_accuracy: 0.8713 - val_loss: 0.7982\n",
      "Epoch 49/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9787 - loss: 0.0671 - val_accuracy: 0.8626 - val_loss: 0.8933\n",
      "Epoch 50/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 25ms/step - accuracy: 0.9777 - loss: 0.0635 - val_accuracy: 0.8662 - val_loss: 0.8114\n",
      "Epoch 51/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9811 - loss: 0.0588 - val_accuracy: 0.8804 - val_loss: 0.7571\n",
      "Epoch 52/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9852 - loss: 0.0479 - val_accuracy: 0.8777 - val_loss: 0.7848\n",
      "Epoch 53/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9866 - loss: 0.0418 - val_accuracy: 0.8795 - val_loss: 0.7434\n",
      "Epoch 54/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 20ms/step - accuracy: 0.9843 - loss: 0.0424 - val_accuracy: 0.8552 - val_loss: 0.9534\n",
      "Epoch 55/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9833 - loss: 0.0543 - val_accuracy: 0.8736 - val_loss: 0.8256\n",
      "Epoch 56/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9852 - loss: 0.0465 - val_accuracy: 0.8745 - val_loss: 0.7391\n",
      "Epoch 57/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9877 - loss: 0.0451 - val_accuracy: 0.8745 - val_loss: 0.7697\n",
      "Epoch 58/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9839 - loss: 0.0468 - val_accuracy: 0.8708 - val_loss: 0.8241\n",
      "Epoch 59/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9822 - loss: 0.0591 - val_accuracy: 0.8809 - val_loss: 0.7355\n",
      "Epoch 60/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9871 - loss: 0.0387 - val_accuracy: 0.8745 - val_loss: 0.8043\n",
      "Epoch 61/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9870 - loss: 0.0371 - val_accuracy: 0.8704 - val_loss: 0.8703\n",
      "Epoch 62/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9815 - loss: 0.0538 - val_accuracy: 0.8708 - val_loss: 0.8852\n",
      "Epoch 63/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 20ms/step - accuracy: 0.9835 - loss: 0.0467 - val_accuracy: 0.8699 - val_loss: 0.7439\n",
      "Epoch 64/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9879 - loss: 0.0416 - val_accuracy: 0.8630 - val_loss: 0.8463\n",
      "Epoch 65/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9880 - loss: 0.0345 - val_accuracy: 0.8694 - val_loss: 0.8805\n",
      "Epoch 66/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9850 - loss: 0.0453 - val_accuracy: 0.8763 - val_loss: 0.7914\n",
      "Epoch 67/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 20ms/step - accuracy: 0.9881 - loss: 0.0381 - val_accuracy: 0.8800 - val_loss: 0.8302\n",
      "Epoch 68/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9879 - loss: 0.0335 - val_accuracy: 0.8882 - val_loss: 0.7955\n",
      "Epoch 69/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9876 - loss: 0.0388 - val_accuracy: 0.8708 - val_loss: 0.8943\n",
      "Epoch 70/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9859 - loss: 0.0428 - val_accuracy: 0.8795 - val_loss: 0.8108\n",
      "Epoch 71/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 20ms/step - accuracy: 0.9854 - loss: 0.0426 - val_accuracy: 0.8717 - val_loss: 0.7868\n",
      "Epoch 72/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 19ms/step - accuracy: 0.9884 - loss: 0.0378 - val_accuracy: 0.8786 - val_loss: 0.8563\n",
      "Epoch 73/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 18ms/step - accuracy: 0.9887 - loss: 0.0316 - val_accuracy: 0.8649 - val_loss: 0.8873\n",
      "Epoch 74/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9888 - loss: 0.0336 - val_accuracy: 0.8736 - val_loss: 0.8735\n",
      "Epoch 75/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 20ms/step - accuracy: 0.9879 - loss: 0.0402 - val_accuracy: 0.8777 - val_loss: 0.8646\n",
      "Epoch 76/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9894 - loss: 0.0316 - val_accuracy: 0.8864 - val_loss: 0.8460\n",
      "Epoch 77/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9862 - loss: 0.0394 - val_accuracy: 0.8791 - val_loss: 0.8261\n",
      "Epoch 78/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9888 - loss: 0.0332 - val_accuracy: 0.8859 - val_loss: 0.7827\n",
      "Epoch 79/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9906 - loss: 0.0268 - val_accuracy: 0.8662 - val_loss: 0.8813\n",
      "Epoch 80/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 20ms/step - accuracy: 0.9865 - loss: 0.0435 - val_accuracy: 0.8749 - val_loss: 0.8334\n",
      "Epoch 81/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9889 - loss: 0.0364 - val_accuracy: 0.8809 - val_loss: 0.8550\n",
      "Epoch 82/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9883 - loss: 0.0329 - val_accuracy: 0.8690 - val_loss: 0.8689\n",
      "Epoch 83/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9849 - loss: 0.0455 - val_accuracy: 0.8699 - val_loss: 0.8596\n",
      "Epoch 84/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 18ms/step - accuracy: 0.9905 - loss: 0.0276 - val_accuracy: 0.8662 - val_loss: 0.9153\n",
      "Epoch 85/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9879 - loss: 0.0376 - val_accuracy: 0.8731 - val_loss: 0.8599\n",
      "Epoch 86/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9888 - loss: 0.0361 - val_accuracy: 0.8722 - val_loss: 0.8834\n",
      "Epoch 87/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 20ms/step - accuracy: 0.9893 - loss: 0.0293 - val_accuracy: 0.8791 - val_loss: 0.9439\n",
      "Epoch 88/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 20ms/step - accuracy: 0.9905 - loss: 0.0283 - val_accuracy: 0.8681 - val_loss: 0.8735\n",
      "Epoch 89/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9906 - loss: 0.0299 - val_accuracy: 0.8864 - val_loss: 0.8340\n",
      "Epoch 90/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9898 - loss: 0.0315 - val_accuracy: 0.8795 - val_loss: 0.8132\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.8835 - loss: 0.7392\n",
      "\u001b[1m410/410\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 5ms/step\n",
      "\u001b[1m410/410\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 6ms/step - accuracy: 0.9960 - loss: 0.0132\n",
      "23.494118730227154\n",
      "12.45812554359436\n",
      "0.09901067813237509\n",
      "90\n",
      "Epoch 1/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 21ms/step - accuracy: 0.4451 - loss: 1.6507 - val_accuracy: 0.6202 - val_loss: 1.1504\n",
      "Epoch 2/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.6426 - loss: 1.0497 - val_accuracy: 0.6899 - val_loss: 0.9751\n",
      "Epoch 3/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 18ms/step - accuracy: 0.7214 - loss: 0.8395 - val_accuracy: 0.6949 - val_loss: 0.9174\n",
      "Epoch 4/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.7564 - loss: 0.7149 - val_accuracy: 0.7389 - val_loss: 0.8118\n",
      "Epoch 5/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 20ms/step - accuracy: 0.7949 - loss: 0.6280 - val_accuracy: 0.7636 - val_loss: 0.8112\n",
      "Epoch 6/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.8208 - loss: 0.5455 - val_accuracy: 0.7801 - val_loss: 0.7646\n",
      "Epoch 7/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.8357 - loss: 0.4913 - val_accuracy: 0.7728 - val_loss: 0.7859\n",
      "Epoch 8/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.8621 - loss: 0.4160 - val_accuracy: 0.8021 - val_loss: 0.7344\n",
      "Epoch 9/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 21ms/step - accuracy: 0.8745 - loss: 0.3854 - val_accuracy: 0.8117 - val_loss: 0.6697\n",
      "Epoch 10/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.8850 - loss: 0.3388 - val_accuracy: 0.7962 - val_loss: 0.7431\n",
      "Epoch 11/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.8899 - loss: 0.3145 - val_accuracy: 0.8007 - val_loss: 0.6810\n",
      "Epoch 12/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9008 - loss: 0.2842 - val_accuracy: 0.8291 - val_loss: 0.6682\n",
      "Epoch 13/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 21ms/step - accuracy: 0.9210 - loss: 0.2417 - val_accuracy: 0.8383 - val_loss: 0.6353\n",
      "Epoch 14/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9143 - loss: 0.2542 - val_accuracy: 0.8378 - val_loss: 0.6237\n",
      "Epoch 15/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9271 - loss: 0.2112 - val_accuracy: 0.8415 - val_loss: 0.6601\n",
      "Epoch 16/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9345 - loss: 0.1941 - val_accuracy: 0.8484 - val_loss: 0.6035\n",
      "Epoch 17/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 21ms/step - accuracy: 0.9355 - loss: 0.1809 - val_accuracy: 0.8493 - val_loss: 0.6198\n",
      "Epoch 18/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9451 - loss: 0.1633 - val_accuracy: 0.8539 - val_loss: 0.5890\n",
      "Epoch 19/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9426 - loss: 0.1694 - val_accuracy: 0.8580 - val_loss: 0.6002\n",
      "Epoch 20/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9518 - loss: 0.1404 - val_accuracy: 0.8410 - val_loss: 0.6893\n",
      "Epoch 21/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 19ms/step - accuracy: 0.9526 - loss: 0.1375 - val_accuracy: 0.8543 - val_loss: 0.5958\n",
      "Epoch 22/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 20ms/step - accuracy: 0.9562 - loss: 0.1298 - val_accuracy: 0.8585 - val_loss: 0.6310\n",
      "Epoch 23/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9603 - loss: 0.1175 - val_accuracy: 0.8589 - val_loss: 0.6313\n",
      "Epoch 24/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9590 - loss: 0.1139 - val_accuracy: 0.8704 - val_loss: 0.6295\n",
      "Epoch 25/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9575 - loss: 0.1304 - val_accuracy: 0.8598 - val_loss: 0.6613\n",
      "Epoch 26/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 20ms/step - accuracy: 0.9612 - loss: 0.1106 - val_accuracy: 0.8607 - val_loss: 0.6835\n",
      "Epoch 27/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9677 - loss: 0.0930 - val_accuracy: 0.8607 - val_loss: 0.6808\n",
      "Epoch 28/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9582 - loss: 0.1201 - val_accuracy: 0.8562 - val_loss: 0.7097\n",
      "Epoch 29/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9706 - loss: 0.0855 - val_accuracy: 0.8644 - val_loss: 0.6675\n",
      "Epoch 30/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 20ms/step - accuracy: 0.9707 - loss: 0.0877 - val_accuracy: 0.8594 - val_loss: 0.6951\n",
      "Epoch 31/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9647 - loss: 0.0941 - val_accuracy: 0.8690 - val_loss: 0.6916\n",
      "Epoch 32/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9703 - loss: 0.0879 - val_accuracy: 0.8713 - val_loss: 0.6282\n",
      "Epoch 33/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9709 - loss: 0.0800 - val_accuracy: 0.8685 - val_loss: 0.6651\n",
      "Epoch 34/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9743 - loss: 0.0733 - val_accuracy: 0.8575 - val_loss: 0.7995\n",
      "Epoch 35/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 19ms/step - accuracy: 0.9715 - loss: 0.0832 - val_accuracy: 0.8607 - val_loss: 0.7502\n",
      "Epoch 36/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9787 - loss: 0.0636 - val_accuracy: 0.8511 - val_loss: 0.7593\n",
      "Epoch 37/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 18ms/step - accuracy: 0.9728 - loss: 0.0783 - val_accuracy: 0.8649 - val_loss: 0.7120\n",
      "Epoch 38/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9746 - loss: 0.0736 - val_accuracy: 0.8607 - val_loss: 0.7259\n",
      "Epoch 39/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 20ms/step - accuracy: 0.9752 - loss: 0.0729 - val_accuracy: 0.8594 - val_loss: 0.7869\n",
      "Epoch 40/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9750 - loss: 0.0745 - val_accuracy: 0.8781 - val_loss: 0.6858\n",
      "Epoch 41/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9776 - loss: 0.0626 - val_accuracy: 0.8612 - val_loss: 0.8274\n",
      "Epoch 42/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9741 - loss: 0.0801 - val_accuracy: 0.8685 - val_loss: 0.7011\n",
      "Epoch 43/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 20ms/step - accuracy: 0.9812 - loss: 0.0546 - val_accuracy: 0.8621 - val_loss: 0.8013\n",
      "Epoch 44/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9786 - loss: 0.0610 - val_accuracy: 0.8713 - val_loss: 0.7325\n",
      "Epoch 45/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9791 - loss: 0.0587 - val_accuracy: 0.8772 - val_loss: 0.7298\n",
      "Epoch 46/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9815 - loss: 0.0551 - val_accuracy: 0.8607 - val_loss: 0.7311\n",
      "Epoch 47/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 20ms/step - accuracy: 0.9784 - loss: 0.0604 - val_accuracy: 0.8763 - val_loss: 0.7136\n",
      "Epoch 48/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9824 - loss: 0.0553 - val_accuracy: 0.8704 - val_loss: 0.7286\n",
      "Epoch 49/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9843 - loss: 0.0491 - val_accuracy: 0.8694 - val_loss: 0.7803\n",
      "Epoch 50/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9782 - loss: 0.0681 - val_accuracy: 0.8662 - val_loss: 0.8311\n",
      "Epoch 51/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9832 - loss: 0.0460 - val_accuracy: 0.8708 - val_loss: 0.7598\n",
      "Epoch 52/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 21ms/step - accuracy: 0.9834 - loss: 0.0502 - val_accuracy: 0.8717 - val_loss: 0.7722\n",
      "Epoch 53/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9832 - loss: 0.0509 - val_accuracy: 0.8781 - val_loss: 0.7444\n",
      "Epoch 54/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9868 - loss: 0.0431 - val_accuracy: 0.8740 - val_loss: 0.7651\n",
      "Epoch 55/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9761 - loss: 0.0716 - val_accuracy: 0.8786 - val_loss: 0.7480\n",
      "Epoch 56/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 22ms/step - accuracy: 0.9833 - loss: 0.0502 - val_accuracy: 0.8791 - val_loss: 0.7864\n",
      "Epoch 57/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9845 - loss: 0.0491 - val_accuracy: 0.8768 - val_loss: 0.7732\n",
      "Epoch 58/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9847 - loss: 0.0444 - val_accuracy: 0.8690 - val_loss: 0.8344\n",
      "Epoch 59/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9853 - loss: 0.0516 - val_accuracy: 0.8713 - val_loss: 0.7603\n",
      "Epoch 60/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 21ms/step - accuracy: 0.9829 - loss: 0.0472 - val_accuracy: 0.8749 - val_loss: 0.7806\n",
      "Epoch 61/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9892 - loss: 0.0334 - val_accuracy: 0.8699 - val_loss: 0.8180\n",
      "Epoch 62/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9843 - loss: 0.0517 - val_accuracy: 0.8781 - val_loss: 0.8141\n",
      "Epoch 63/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9873 - loss: 0.0414 - val_accuracy: 0.8699 - val_loss: 0.7916\n",
      "Epoch 64/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9842 - loss: 0.0442 - val_accuracy: 0.8672 - val_loss: 0.8253\n",
      "Epoch 65/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 20ms/step - accuracy: 0.9819 - loss: 0.0521 - val_accuracy: 0.8749 - val_loss: 0.7992\n",
      "Epoch 66/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9865 - loss: 0.0450 - val_accuracy: 0.8699 - val_loss: 0.8574\n",
      "Epoch 67/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9850 - loss: 0.0480 - val_accuracy: 0.8745 - val_loss: 0.7922\n",
      "Epoch 68/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9843 - loss: 0.0475 - val_accuracy: 0.8800 - val_loss: 0.7537\n",
      "Epoch 69/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 21ms/step - accuracy: 0.9885 - loss: 0.0336 - val_accuracy: 0.8658 - val_loss: 0.8173\n",
      "Epoch 70/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9851 - loss: 0.0422 - val_accuracy: 0.8685 - val_loss: 0.8344\n",
      "Epoch 71/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9883 - loss: 0.0395 - val_accuracy: 0.8795 - val_loss: 0.7547\n",
      "Epoch 72/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9894 - loss: 0.0354 - val_accuracy: 0.8786 - val_loss: 0.7521\n",
      "Epoch 73/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9827 - loss: 0.0511 - val_accuracy: 0.8708 - val_loss: 0.8803\n",
      "Epoch 74/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9859 - loss: 0.0396 - val_accuracy: 0.8612 - val_loss: 0.9383\n",
      "Epoch 75/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9899 - loss: 0.0355 - val_accuracy: 0.8727 - val_loss: 0.8488\n",
      "Epoch 76/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9871 - loss: 0.0367 - val_accuracy: 0.8749 - val_loss: 0.8467\n",
      "Epoch 77/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9892 - loss: 0.0367 - val_accuracy: 0.8727 - val_loss: 0.8183\n",
      "Epoch 78/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 21ms/step - accuracy: 0.9870 - loss: 0.0381 - val_accuracy: 0.8722 - val_loss: 0.8687\n",
      "Epoch 79/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9899 - loss: 0.0307 - val_accuracy: 0.8690 - val_loss: 0.8925\n",
      "Epoch 80/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9853 - loss: 0.0415 - val_accuracy: 0.8763 - val_loss: 0.8228\n",
      "Epoch 81/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9900 - loss: 0.0287 - val_accuracy: 0.8708 - val_loss: 0.9060\n",
      "Epoch 82/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 20ms/step - accuracy: 0.9840 - loss: 0.0462 - val_accuracy: 0.8846 - val_loss: 0.7666\n",
      "Epoch 83/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 19ms/step - accuracy: 0.9860 - loss: 0.0451 - val_accuracy: 0.8791 - val_loss: 0.8410\n",
      "Epoch 84/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9847 - loss: 0.0447 - val_accuracy: 0.8713 - val_loss: 0.8488\n",
      "Epoch 85/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9906 - loss: 0.0291 - val_accuracy: 0.8832 - val_loss: 0.7807\n",
      "Epoch 86/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9918 - loss: 0.0307 - val_accuracy: 0.8814 - val_loss: 0.8402\n",
      "Epoch 87/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 21ms/step - accuracy: 0.9898 - loss: 0.0299 - val_accuracy: 0.8694 - val_loss: 0.8901\n",
      "Epoch 88/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9859 - loss: 0.0417 - val_accuracy: 0.8786 - val_loss: 0.8346\n",
      "Epoch 89/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9883 - loss: 0.0389 - val_accuracy: 0.8690 - val_loss: 0.9020\n",
      "Epoch 90/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9886 - loss: 0.0352 - val_accuracy: 0.8882 - val_loss: 0.7746\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.8847 - loss: 0.8258\n",
      "\u001b[1m410/410\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 6ms/step\n",
      "\u001b[1m410/410\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 7ms/step - accuracy: 0.9960 - loss: 0.0125\n",
      "23.708740977446237\n",
      "12.487365408738453\n",
      "0.1200078805287679\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=2048 is too large for input signal of length=1943\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=2048 is too large for input signal of length=2005\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=2048 is too large for input signal of length=1203\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=2048 is too large for input signal of length=1003\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=2048 is too large for input signal of length=1385\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "90\n",
      "Epoch 1/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 20ms/step - accuracy: 0.4493 - loss: 1.6172 - val_accuracy: 0.6244 - val_loss: 1.1568\n",
      "Epoch 2/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.6524 - loss: 1.0220 - val_accuracy: 0.6835 - val_loss: 0.9829\n",
      "Epoch 3/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.7215 - loss: 0.8196 - val_accuracy: 0.7100 - val_loss: 0.9029\n",
      "Epoch 4/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.7690 - loss: 0.6972 - val_accuracy: 0.7513 - val_loss: 0.8366\n",
      "Epoch 5/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 21ms/step - accuracy: 0.8018 - loss: 0.5963 - val_accuracy: 0.7435 - val_loss: 0.8835\n",
      "Epoch 6/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 18ms/step - accuracy: 0.8310 - loss: 0.5171 - val_accuracy: 0.7714 - val_loss: 0.8008\n",
      "Epoch 7/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.8504 - loss: 0.4467 - val_accuracy: 0.7879 - val_loss: 0.7861\n",
      "Epoch 8/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.8632 - loss: 0.4133 - val_accuracy: 0.8030 - val_loss: 0.7655\n",
      "Epoch 9/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.8752 - loss: 0.3686 - val_accuracy: 0.8186 - val_loss: 0.6885\n",
      "Epoch 10/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.8979 - loss: 0.3060 - val_accuracy: 0.8191 - val_loss: 0.6807\n",
      "Epoch 11/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 18ms/step - accuracy: 0.9010 - loss: 0.2898 - val_accuracy: 0.7994 - val_loss: 0.7948\n",
      "Epoch 12/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9051 - loss: 0.2773 - val_accuracy: 0.8282 - val_loss: 0.6607\n",
      "Epoch 13/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9145 - loss: 0.2615 - val_accuracy: 0.8268 - val_loss: 0.7532\n",
      "Epoch 14/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 20ms/step - accuracy: 0.9283 - loss: 0.2213 - val_accuracy: 0.8209 - val_loss: 0.7926\n",
      "Epoch 15/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9250 - loss: 0.2133 - val_accuracy: 0.8374 - val_loss: 0.7649\n",
      "Epoch 16/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9377 - loss: 0.1885 - val_accuracy: 0.8282 - val_loss: 0.6637\n",
      "Epoch 17/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9407 - loss: 0.1771 - val_accuracy: 0.8479 - val_loss: 0.6867\n",
      "Epoch 18/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 22ms/step - accuracy: 0.9522 - loss: 0.1444 - val_accuracy: 0.8456 - val_loss: 0.7032\n",
      "Epoch 19/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9461 - loss: 0.1658 - val_accuracy: 0.8484 - val_loss: 0.7217\n",
      "Epoch 20/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9443 - loss: 0.1702 - val_accuracy: 0.8530 - val_loss: 0.6974\n",
      "Epoch 21/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9502 - loss: 0.1428 - val_accuracy: 0.8575 - val_loss: 0.6707\n",
      "Epoch 22/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 21ms/step - accuracy: 0.9608 - loss: 0.1198 - val_accuracy: 0.8575 - val_loss: 0.6563\n",
      "Epoch 23/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9615 - loss: 0.1125 - val_accuracy: 0.8493 - val_loss: 0.7135\n",
      "Epoch 24/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9621 - loss: 0.1075 - val_accuracy: 0.8534 - val_loss: 0.6803\n",
      "Epoch 25/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 19ms/step - accuracy: 0.9637 - loss: 0.1073 - val_accuracy: 0.8566 - val_loss: 0.6954\n",
      "Epoch 26/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 20ms/step - accuracy: 0.9601 - loss: 0.1178 - val_accuracy: 0.8713 - val_loss: 0.6622\n",
      "Epoch 27/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 18ms/step - accuracy: 0.9669 - loss: 0.0945 - val_accuracy: 0.8635 - val_loss: 0.6825\n",
      "Epoch 28/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9683 - loss: 0.0895 - val_accuracy: 0.8653 - val_loss: 0.6732\n",
      "Epoch 29/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9717 - loss: 0.0827 - val_accuracy: 0.8598 - val_loss: 0.7793\n",
      "Epoch 30/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9659 - loss: 0.1019 - val_accuracy: 0.8548 - val_loss: 0.8577\n",
      "Epoch 31/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 21ms/step - accuracy: 0.9689 - loss: 0.0884 - val_accuracy: 0.8639 - val_loss: 0.7618\n",
      "Epoch 32/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9711 - loss: 0.0843 - val_accuracy: 0.8644 - val_loss: 0.7600\n",
      "Epoch 33/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9726 - loss: 0.0755 - val_accuracy: 0.8681 - val_loss: 0.7047\n",
      "Epoch 34/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 18ms/step - accuracy: 0.9728 - loss: 0.0802 - val_accuracy: 0.8676 - val_loss: 0.7286\n",
      "Epoch 35/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 21ms/step - accuracy: 0.9753 - loss: 0.0729 - val_accuracy: 0.8607 - val_loss: 0.7796\n",
      "Epoch 36/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9760 - loss: 0.0716 - val_accuracy: 0.8676 - val_loss: 0.7112\n",
      "Epoch 37/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9775 - loss: 0.0682 - val_accuracy: 0.8690 - val_loss: 0.7562\n",
      "Epoch 38/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9780 - loss: 0.0687 - val_accuracy: 0.8644 - val_loss: 0.7258\n",
      "Epoch 39/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9765 - loss: 0.0679 - val_accuracy: 0.8534 - val_loss: 0.8442\n",
      "Epoch 40/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9698 - loss: 0.0902 - val_accuracy: 0.8749 - val_loss: 0.7044\n",
      "Epoch 41/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9816 - loss: 0.0535 - val_accuracy: 0.8704 - val_loss: 0.7420\n",
      "Epoch 42/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9797 - loss: 0.0595 - val_accuracy: 0.8607 - val_loss: 0.8080\n",
      "Epoch 43/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9780 - loss: 0.0721 - val_accuracy: 0.8759 - val_loss: 0.7634\n",
      "Epoch 44/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 21ms/step - accuracy: 0.9779 - loss: 0.0615 - val_accuracy: 0.8662 - val_loss: 0.7631\n",
      "Epoch 45/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9763 - loss: 0.0715 - val_accuracy: 0.8626 - val_loss: 0.8004\n",
      "Epoch 46/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9834 - loss: 0.0531 - val_accuracy: 0.8685 - val_loss: 0.8315\n",
      "Epoch 47/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9822 - loss: 0.0531 - val_accuracy: 0.8667 - val_loss: 0.7839\n",
      "Epoch 48/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9843 - loss: 0.0453 - val_accuracy: 0.8548 - val_loss: 0.8489\n",
      "Epoch 49/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 20ms/step - accuracy: 0.9815 - loss: 0.0556 - val_accuracy: 0.8759 - val_loss: 0.8034\n",
      "Epoch 50/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9792 - loss: 0.0579 - val_accuracy: 0.8685 - val_loss: 0.8513\n",
      "Epoch 51/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 19ms/step - accuracy: 0.9818 - loss: 0.0582 - val_accuracy: 0.8594 - val_loss: 0.9065\n",
      "Epoch 52/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9847 - loss: 0.0474 - val_accuracy: 0.8772 - val_loss: 0.7702\n",
      "Epoch 53/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 21ms/step - accuracy: 0.9860 - loss: 0.0397 - val_accuracy: 0.8708 - val_loss: 0.8096\n",
      "Epoch 54/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9817 - loss: 0.0587 - val_accuracy: 0.8736 - val_loss: 0.8106\n",
      "Epoch 55/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9822 - loss: 0.0520 - val_accuracy: 0.8607 - val_loss: 0.8611\n",
      "Epoch 56/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 17ms/step - accuracy: 0.9855 - loss: 0.0430 - val_accuracy: 0.8649 - val_loss: 0.8757\n",
      "Epoch 57/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 21ms/step - accuracy: 0.9864 - loss: 0.0414 - val_accuracy: 0.8635 - val_loss: 0.8380\n",
      "Epoch 58/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9855 - loss: 0.0448 - val_accuracy: 0.8685 - val_loss: 0.8771\n",
      "Epoch 59/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9865 - loss: 0.0427 - val_accuracy: 0.8672 - val_loss: 0.8670\n",
      "Epoch 60/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9825 - loss: 0.0545 - val_accuracy: 0.8685 - val_loss: 0.8609\n",
      "Epoch 61/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9890 - loss: 0.0325 - val_accuracy: 0.8690 - val_loss: 0.8805\n",
      "Epoch 62/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 19ms/step - accuracy: 0.9847 - loss: 0.0517 - val_accuracy: 0.8781 - val_loss: 0.8316\n",
      "Epoch 63/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9858 - loss: 0.0432 - val_accuracy: 0.8818 - val_loss: 0.8028\n",
      "Epoch 64/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9871 - loss: 0.0445 - val_accuracy: 0.8745 - val_loss: 0.8275\n",
      "Epoch 65/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9844 - loss: 0.0460 - val_accuracy: 0.8827 - val_loss: 0.8195\n",
      "Epoch 66/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 21ms/step - accuracy: 0.9874 - loss: 0.0339 - val_accuracy: 0.8818 - val_loss: 0.7557\n",
      "Epoch 67/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9913 - loss: 0.0263 - val_accuracy: 0.8717 - val_loss: 0.8341\n",
      "Epoch 68/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9868 - loss: 0.0432 - val_accuracy: 0.8818 - val_loss: 0.8494\n",
      "Epoch 69/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9856 - loss: 0.0468 - val_accuracy: 0.8795 - val_loss: 0.7927\n",
      "Epoch 70/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9882 - loss: 0.0390 - val_accuracy: 0.8745 - val_loss: 0.8266\n",
      "Epoch 71/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 20ms/step - accuracy: 0.9886 - loss: 0.0367 - val_accuracy: 0.8795 - val_loss: 0.8565\n",
      "Epoch 72/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9828 - loss: 0.0501 - val_accuracy: 0.8694 - val_loss: 0.8683\n",
      "Epoch 73/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9850 - loss: 0.0505 - val_accuracy: 0.8676 - val_loss: 0.9113\n",
      "Epoch 74/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9852 - loss: 0.0417 - val_accuracy: 0.8667 - val_loss: 0.8836\n",
      "Epoch 75/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9853 - loss: 0.0468 - val_accuracy: 0.8745 - val_loss: 0.8110\n",
      "Epoch 76/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 19ms/step - accuracy: 0.9894 - loss: 0.0336 - val_accuracy: 0.8777 - val_loss: 0.8332\n",
      "Epoch 77/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9869 - loss: 0.0414 - val_accuracy: 0.8653 - val_loss: 0.9075\n",
      "Epoch 78/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9892 - loss: 0.0369 - val_accuracy: 0.8745 - val_loss: 0.8339\n",
      "Epoch 79/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 21ms/step - accuracy: 0.9870 - loss: 0.0418 - val_accuracy: 0.8763 - val_loss: 0.8513\n",
      "Epoch 80/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9876 - loss: 0.0400 - val_accuracy: 0.8667 - val_loss: 0.8714\n",
      "Epoch 81/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 18ms/step - accuracy: 0.9865 - loss: 0.0401 - val_accuracy: 0.8777 - val_loss: 0.8845\n",
      "Epoch 82/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9868 - loss: 0.0425 - val_accuracy: 0.8571 - val_loss: 0.9761\n",
      "Epoch 83/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m15s\u001b[0m 35ms/step - accuracy: 0.9869 - loss: 0.0413 - val_accuracy: 0.8772 - val_loss: 0.9260\n",
      "Epoch 84/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9879 - loss: 0.0428 - val_accuracy: 0.8772 - val_loss: 0.9030\n",
      "Epoch 85/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9894 - loss: 0.0328 - val_accuracy: 0.8745 - val_loss: 0.9032\n",
      "Epoch 86/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 21ms/step - accuracy: 0.9863 - loss: 0.0436 - val_accuracy: 0.8809 - val_loss: 0.8312\n",
      "Epoch 87/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9857 - loss: 0.0438 - val_accuracy: 0.8653 - val_loss: 0.9411\n",
      "Epoch 88/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9883 - loss: 0.0390 - val_accuracy: 0.8740 - val_loss: 0.9275\n",
      "Epoch 89/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9867 - loss: 0.0363 - val_accuracy: 0.8658 - val_loss: 0.9656\n",
      "Epoch 90/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9896 - loss: 0.0334 - val_accuracy: 0.8685 - val_loss: 0.9851\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8767 - loss: 0.9155\n",
      "\u001b[1m410/410\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 5ms/step\n",
      "\u001b[1m410/410\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 6ms/step - accuracy: 0.9895 - loss: 0.0309\n",
      "22.35550422668457\n",
      "12.75414965947469\n",
      "0.10333468914031982\n",
      "90\n",
      "Epoch 1/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 21ms/step - accuracy: 0.4598 - loss: 1.5940 - val_accuracy: 0.6303 - val_loss: 1.1232\n",
      "Epoch 2/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 18ms/step - accuracy: 0.6652 - loss: 0.9955 - val_accuracy: 0.6844 - val_loss: 0.9537\n",
      "Epoch 3/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 17ms/step - accuracy: 0.7192 - loss: 0.8242 - val_accuracy: 0.6780 - val_loss: 0.9937\n",
      "Epoch 4/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 17ms/step - accuracy: 0.7794 - loss: 0.6786 - val_accuracy: 0.7545 - val_loss: 0.8179\n",
      "Epoch 5/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 19ms/step - accuracy: 0.8123 - loss: 0.5789 - val_accuracy: 0.7586 - val_loss: 0.8216\n",
      "Epoch 6/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.8269 - loss: 0.5198 - val_accuracy: 0.7742 - val_loss: 0.8243\n",
      "Epoch 7/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.8499 - loss: 0.4448 - val_accuracy: 0.7879 - val_loss: 0.7217\n",
      "Epoch 8/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.8625 - loss: 0.4124 - val_accuracy: 0.8039 - val_loss: 0.7433\n",
      "Epoch 9/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 20ms/step - accuracy: 0.8725 - loss: 0.3712 - val_accuracy: 0.7929 - val_loss: 0.7417\n",
      "Epoch 10/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.8927 - loss: 0.3299 - val_accuracy: 0.8076 - val_loss: 0.7506\n",
      "Epoch 11/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9026 - loss: 0.2931 - val_accuracy: 0.8108 - val_loss: 0.7621\n",
      "Epoch 12/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.8984 - loss: 0.2989 - val_accuracy: 0.8016 - val_loss: 0.7726\n",
      "Epoch 13/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9146 - loss: 0.2589 - val_accuracy: 0.8140 - val_loss: 0.7682\n",
      "Epoch 14/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9270 - loss: 0.2212 - val_accuracy: 0.7943 - val_loss: 0.8369\n",
      "Epoch 15/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9247 - loss: 0.2254 - val_accuracy: 0.8104 - val_loss: 0.7415\n",
      "Epoch 16/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9335 - loss: 0.2021 - val_accuracy: 0.8154 - val_loss: 0.8147\n",
      "Epoch 17/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 20ms/step - accuracy: 0.9330 - loss: 0.2015 - val_accuracy: 0.8172 - val_loss: 0.8308\n",
      "Epoch 18/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 17ms/step - accuracy: 0.9426 - loss: 0.1747 - val_accuracy: 0.8429 - val_loss: 0.7247\n",
      "Epoch 19/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 17ms/step - accuracy: 0.9429 - loss: 0.1727 - val_accuracy: 0.8424 - val_loss: 0.7006\n",
      "Epoch 20/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9566 - loss: 0.1342 - val_accuracy: 0.8323 - val_loss: 0.7924\n",
      "Epoch 21/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 19ms/step - accuracy: 0.9515 - loss: 0.1482 - val_accuracy: 0.8465 - val_loss: 0.7359\n",
      "Epoch 22/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9530 - loss: 0.1384 - val_accuracy: 0.8397 - val_loss: 0.7494\n",
      "Epoch 23/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9576 - loss: 0.1275 - val_accuracy: 0.8181 - val_loss: 0.8074\n",
      "Epoch 24/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9554 - loss: 0.1298 - val_accuracy: 0.8465 - val_loss: 0.8312\n",
      "Epoch 25/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 21ms/step - accuracy: 0.9579 - loss: 0.1209 - val_accuracy: 0.8516 - val_loss: 0.7730\n",
      "Epoch 26/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9649 - loss: 0.1067 - val_accuracy: 0.8456 - val_loss: 0.7782\n",
      "Epoch 27/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9625 - loss: 0.1064 - val_accuracy: 0.8410 - val_loss: 0.8270\n",
      "Epoch 28/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9618 - loss: 0.1164 - val_accuracy: 0.8452 - val_loss: 0.7838\n",
      "Epoch 29/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 18ms/step - accuracy: 0.9675 - loss: 0.0958 - val_accuracy: 0.8278 - val_loss: 0.9294\n",
      "Epoch 30/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9684 - loss: 0.0876 - val_accuracy: 0.8511 - val_loss: 0.7885\n",
      "Epoch 31/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9720 - loss: 0.0808 - val_accuracy: 0.8447 - val_loss: 0.8446\n",
      "Epoch 32/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9770 - loss: 0.0725 - val_accuracy: 0.8557 - val_loss: 0.8332\n",
      "Epoch 33/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 21ms/step - accuracy: 0.9701 - loss: 0.0876 - val_accuracy: 0.8539 - val_loss: 0.8478\n",
      "Epoch 34/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9776 - loss: 0.0689 - val_accuracy: 0.8566 - val_loss: 0.7908\n",
      "Epoch 35/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9736 - loss: 0.0749 - val_accuracy: 0.8493 - val_loss: 0.8340\n",
      "Epoch 36/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9735 - loss: 0.0838 - val_accuracy: 0.8525 - val_loss: 0.8631\n",
      "Epoch 37/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9700 - loss: 0.0861 - val_accuracy: 0.8497 - val_loss: 0.8535\n",
      "Epoch 38/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 17ms/step - accuracy: 0.9758 - loss: 0.0674 - val_accuracy: 0.8424 - val_loss: 0.9114\n",
      "Epoch 39/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9786 - loss: 0.0608 - val_accuracy: 0.8571 - val_loss: 0.8819\n",
      "Epoch 40/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 17ms/step - accuracy: 0.9775 - loss: 0.0710 - val_accuracy: 0.8539 - val_loss: 0.8483\n",
      "Epoch 41/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 21ms/step - accuracy: 0.9789 - loss: 0.0644 - val_accuracy: 0.8525 - val_loss: 0.9150\n",
      "Epoch 42/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9774 - loss: 0.0656 - val_accuracy: 0.8456 - val_loss: 0.9439\n",
      "Epoch 43/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9726 - loss: 0.0872 - val_accuracy: 0.8484 - val_loss: 0.9636\n",
      "Epoch 44/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9764 - loss: 0.0728 - val_accuracy: 0.8534 - val_loss: 0.8991\n",
      "Epoch 45/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 17ms/step - accuracy: 0.9833 - loss: 0.0477 - val_accuracy: 0.8635 - val_loss: 0.8445\n",
      "Epoch 46/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9823 - loss: 0.0588 - val_accuracy: 0.8571 - val_loss: 0.8533\n",
      "Epoch 47/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 17ms/step - accuracy: 0.9781 - loss: 0.0647 - val_accuracy: 0.8607 - val_loss: 0.8874\n",
      "Epoch 48/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9841 - loss: 0.0491 - val_accuracy: 0.8626 - val_loss: 0.8066\n",
      "Epoch 49/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 20ms/step - accuracy: 0.9816 - loss: 0.0553 - val_accuracy: 0.8676 - val_loss: 0.7936\n",
      "Epoch 50/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9838 - loss: 0.0534 - val_accuracy: 0.8717 - val_loss: 0.8399\n",
      "Epoch 51/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9822 - loss: 0.0516 - val_accuracy: 0.8589 - val_loss: 0.9073\n",
      "Epoch 52/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9820 - loss: 0.0540 - val_accuracy: 0.8374 - val_loss: 0.9717\n",
      "Epoch 53/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9816 - loss: 0.0585 - val_accuracy: 0.8598 - val_loss: 0.9133\n",
      "Epoch 54/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 17ms/step - accuracy: 0.9855 - loss: 0.0442 - val_accuracy: 0.8520 - val_loss: 0.9963\n",
      "Epoch 55/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9785 - loss: 0.0613 - val_accuracy: 0.8543 - val_loss: 0.9284\n",
      "Epoch 56/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9860 - loss: 0.0430 - val_accuracy: 0.8685 - val_loss: 0.8341\n",
      "Epoch 57/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9827 - loss: 0.0576 - val_accuracy: 0.8685 - val_loss: 0.8480\n",
      "Epoch 58/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 21ms/step - accuracy: 0.9852 - loss: 0.0445 - val_accuracy: 0.8731 - val_loss: 0.8053\n",
      "Epoch 59/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9864 - loss: 0.0413 - val_accuracy: 0.8649 - val_loss: 0.8790\n",
      "Epoch 60/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9878 - loss: 0.0380 - val_accuracy: 0.8635 - val_loss: 0.8769\n",
      "Epoch 61/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 17ms/step - accuracy: 0.9806 - loss: 0.0617 - val_accuracy: 0.8461 - val_loss: 1.0371\n",
      "Epoch 62/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9758 - loss: 0.0798 - val_accuracy: 0.8571 - val_loss: 0.9051\n",
      "Epoch 63/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9842 - loss: 0.0459 - val_accuracy: 0.8795 - val_loss: 0.8435\n",
      "Epoch 64/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9910 - loss: 0.0321 - val_accuracy: 0.8662 - val_loss: 0.9202\n",
      "Epoch 65/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9855 - loss: 0.0388 - val_accuracy: 0.8713 - val_loss: 0.8788\n",
      "Epoch 66/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9870 - loss: 0.0429 - val_accuracy: 0.8566 - val_loss: 0.8873\n",
      "Epoch 67/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 20ms/step - accuracy: 0.9866 - loss: 0.0422 - val_accuracy: 0.8410 - val_loss: 1.1174\n",
      "Epoch 68/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9824 - loss: 0.0597 - val_accuracy: 0.8704 - val_loss: 0.9161\n",
      "Epoch 69/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9850 - loss: 0.0430 - val_accuracy: 0.8617 - val_loss: 0.8958\n",
      "Epoch 70/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9865 - loss: 0.0385 - val_accuracy: 0.8598 - val_loss: 0.9137\n",
      "Epoch 71/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9857 - loss: 0.0424 - val_accuracy: 0.8589 - val_loss: 0.9346\n",
      "Epoch 72/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9876 - loss: 0.0376 - val_accuracy: 0.8594 - val_loss: 0.9705\n",
      "Epoch 73/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9881 - loss: 0.0383 - val_accuracy: 0.8617 - val_loss: 1.0015\n",
      "Epoch 74/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9832 - loss: 0.0503 - val_accuracy: 0.8598 - val_loss: 1.0285\n",
      "Epoch 75/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 21ms/step - accuracy: 0.9860 - loss: 0.0464 - val_accuracy: 0.8617 - val_loss: 1.0034\n",
      "Epoch 76/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 19ms/step - accuracy: 0.9887 - loss: 0.0344 - val_accuracy: 0.8589 - val_loss: 1.0501\n",
      "Epoch 77/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 17ms/step - accuracy: 0.9852 - loss: 0.0441 - val_accuracy: 0.8681 - val_loss: 0.9301\n",
      "Epoch 78/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9880 - loss: 0.0348 - val_accuracy: 0.8690 - val_loss: 0.9510\n",
      "Epoch 79/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9890 - loss: 0.0356 - val_accuracy: 0.8713 - val_loss: 0.9479\n",
      "Epoch 80/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9921 - loss: 0.0277 - val_accuracy: 0.8552 - val_loss: 1.1013\n",
      "Epoch 81/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9847 - loss: 0.0483 - val_accuracy: 0.8662 - val_loss: 1.0406\n",
      "Epoch 82/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9850 - loss: 0.0430 - val_accuracy: 0.8571 - val_loss: 1.0158\n",
      "Epoch 83/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 19ms/step - accuracy: 0.9863 - loss: 0.0470 - val_accuracy: 0.8603 - val_loss: 1.0740\n",
      "Epoch 84/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 19ms/step - accuracy: 0.9886 - loss: 0.0353 - val_accuracy: 0.8585 - val_loss: 0.9827\n",
      "Epoch 85/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9891 - loss: 0.0339 - val_accuracy: 0.8635 - val_loss: 1.0051\n",
      "Epoch 86/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 17ms/step - accuracy: 0.9919 - loss: 0.0250 - val_accuracy: 0.8635 - val_loss: 0.9628\n",
      "Epoch 87/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9863 - loss: 0.0422 - val_accuracy: 0.8470 - val_loss: 1.1810\n",
      "Epoch 88/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9823 - loss: 0.0618 - val_accuracy: 0.8575 - val_loss: 1.0885\n",
      "Epoch 89/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9851 - loss: 0.0469 - val_accuracy: 0.8635 - val_loss: 1.0359\n",
      "Epoch 90/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9896 - loss: 0.0346 - val_accuracy: 0.8626 - val_loss: 0.9710\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.8618 - loss: 0.8920\n",
      "\u001b[1m410/410\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 5ms/step\n",
      "\u001b[1m410/410\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 5ms/step - accuracy: 0.9966 - loss: 0.0128\n",
      "15.60390908718109\n",
      "12.386526314417521\n",
      "0.09586708943049113\n",
      "90\n",
      "Epoch 1/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 20ms/step - accuracy: 0.4659 - loss: 1.5892 - val_accuracy: 0.5964 - val_loss: 1.3173\n",
      "Epoch 2/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.6767 - loss: 0.9648 - val_accuracy: 0.6606 - val_loss: 1.0786\n",
      "Epoch 3/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.7555 - loss: 0.7492 - val_accuracy: 0.7219 - val_loss: 0.9841\n",
      "Epoch 4/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.8043 - loss: 0.6028 - val_accuracy: 0.7490 - val_loss: 0.8746\n",
      "Epoch 5/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 17ms/step - accuracy: 0.8248 - loss: 0.5318 - val_accuracy: 0.7531 - val_loss: 0.8614\n",
      "Epoch 6/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.8526 - loss: 0.4627 - val_accuracy: 0.7641 - val_loss: 0.8568\n",
      "Epoch 7/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 17ms/step - accuracy: 0.8614 - loss: 0.4186 - val_accuracy: 0.7824 - val_loss: 0.8129\n",
      "Epoch 8/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.8856 - loss: 0.3461 - val_accuracy: 0.7856 - val_loss: 0.8174\n",
      "Epoch 9/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 21ms/step - accuracy: 0.9000 - loss: 0.2973 - val_accuracy: 0.8158 - val_loss: 0.7019\n",
      "Epoch 10/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 19ms/step - accuracy: 0.9008 - loss: 0.3045 - val_accuracy: 0.8104 - val_loss: 0.7451\n",
      "Epoch 11/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9116 - loss: 0.2681 - val_accuracy: 0.8099 - val_loss: 0.8435\n",
      "Epoch 12/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 17ms/step - accuracy: 0.9152 - loss: 0.2604 - val_accuracy: 0.8145 - val_loss: 0.7973\n",
      "Epoch 13/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9287 - loss: 0.2180 - val_accuracy: 0.8264 - val_loss: 0.7384\n",
      "Epoch 14/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9341 - loss: 0.2148 - val_accuracy: 0.8342 - val_loss: 0.7064\n",
      "Epoch 15/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 17ms/step - accuracy: 0.9439 - loss: 0.1739 - val_accuracy: 0.8136 - val_loss: 0.8295\n",
      "Epoch 16/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9426 - loss: 0.1682 - val_accuracy: 0.8346 - val_loss: 0.7217\n",
      "Epoch 17/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9379 - loss: 0.1876 - val_accuracy: 0.8493 - val_loss: 0.6719\n",
      "Epoch 18/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 21ms/step - accuracy: 0.9582 - loss: 0.1279 - val_accuracy: 0.8410 - val_loss: 0.6916\n",
      "Epoch 19/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 19ms/step - accuracy: 0.9592 - loss: 0.1167 - val_accuracy: 0.8410 - val_loss: 0.6860\n",
      "Epoch 20/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 23ms/step - accuracy: 0.9568 - loss: 0.1311 - val_accuracy: 0.8415 - val_loss: 0.7405\n",
      "Epoch 21/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 20ms/step - accuracy: 0.9588 - loss: 0.1238 - val_accuracy: 0.8410 - val_loss: 0.7242\n",
      "Epoch 22/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9597 - loss: 0.1218 - val_accuracy: 0.8452 - val_loss: 0.7439\n",
      "Epoch 23/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9711 - loss: 0.0924 - val_accuracy: 0.8420 - val_loss: 0.8054\n",
      "Epoch 24/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9617 - loss: 0.1232 - val_accuracy: 0.8429 - val_loss: 0.7827\n",
      "Epoch 25/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 22ms/step - accuracy: 0.9630 - loss: 0.1018 - val_accuracy: 0.8557 - val_loss: 0.7361\n",
      "Epoch 26/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 20ms/step - accuracy: 0.9760 - loss: 0.0777 - val_accuracy: 0.8580 - val_loss: 0.7465\n",
      "Epoch 27/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9718 - loss: 0.0833 - val_accuracy: 0.8566 - val_loss: 0.7095\n",
      "Epoch 28/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9759 - loss: 0.0763 - val_accuracy: 0.8479 - val_loss: 0.8159\n",
      "Epoch 29/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9695 - loss: 0.0853 - val_accuracy: 0.8639 - val_loss: 0.7592\n",
      "Epoch 30/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9748 - loss: 0.0785 - val_accuracy: 0.8566 - val_loss: 0.7526\n",
      "Epoch 31/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9703 - loss: 0.0818 - val_accuracy: 0.8539 - val_loss: 0.8144\n",
      "Epoch 32/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9743 - loss: 0.0717 - val_accuracy: 0.8548 - val_loss: 0.8454\n",
      "Epoch 33/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9794 - loss: 0.0582 - val_accuracy: 0.8543 - val_loss: 0.8785\n",
      "Epoch 34/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 22ms/step - accuracy: 0.9738 - loss: 0.0764 - val_accuracy: 0.8580 - val_loss: 0.7975\n",
      "Epoch 35/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9780 - loss: 0.0689 - val_accuracy: 0.8626 - val_loss: 0.7791\n",
      "Epoch 36/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9806 - loss: 0.0633 - val_accuracy: 0.8736 - val_loss: 0.7803\n",
      "Epoch 37/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9805 - loss: 0.0572 - val_accuracy: 0.8516 - val_loss: 0.9104\n",
      "Epoch 38/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9736 - loss: 0.0874 - val_accuracy: 0.8388 - val_loss: 0.8776\n",
      "Epoch 39/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9788 - loss: 0.0643 - val_accuracy: 0.8617 - val_loss: 0.7967\n",
      "Epoch 40/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 18ms/step - accuracy: 0.9823 - loss: 0.0561 - val_accuracy: 0.8759 - val_loss: 0.7731\n",
      "Epoch 41/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9852 - loss: 0.0399 - val_accuracy: 0.8736 - val_loss: 0.7942\n",
      "Epoch 42/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 22ms/step - accuracy: 0.9860 - loss: 0.0411 - val_accuracy: 0.8704 - val_loss: 0.7422\n",
      "Epoch 43/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9806 - loss: 0.0578 - val_accuracy: 0.8672 - val_loss: 0.8123\n",
      "Epoch 44/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 19ms/step - accuracy: 0.9807 - loss: 0.0537 - val_accuracy: 0.8626 - val_loss: 0.8454\n",
      "Epoch 45/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9782 - loss: 0.0627 - val_accuracy: 0.8745 - val_loss: 0.7931\n",
      "Epoch 46/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9839 - loss: 0.0471 - val_accuracy: 0.8708 - val_loss: 0.8947\n",
      "Epoch 47/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 18ms/step - accuracy: 0.9844 - loss: 0.0498 - val_accuracy: 0.8639 - val_loss: 0.8178\n",
      "Epoch 48/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9835 - loss: 0.0546 - val_accuracy: 0.8585 - val_loss: 0.9220\n",
      "Epoch 49/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9800 - loss: 0.0684 - val_accuracy: 0.8727 - val_loss: 0.8092\n",
      "Epoch 50/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 22ms/step - accuracy: 0.9878 - loss: 0.0335 - val_accuracy: 0.8759 - val_loss: 0.7965\n",
      "Epoch 51/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9864 - loss: 0.0509 - val_accuracy: 0.8749 - val_loss: 0.7829\n",
      "Epoch 52/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9869 - loss: 0.0445 - val_accuracy: 0.8727 - val_loss: 0.8386\n",
      "Epoch 53/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9860 - loss: 0.0459 - val_accuracy: 0.8658 - val_loss: 0.8541\n",
      "Epoch 54/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9837 - loss: 0.0572 - val_accuracy: 0.8667 - val_loss: 0.8467\n",
      "Epoch 55/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9805 - loss: 0.0524 - val_accuracy: 0.8722 - val_loss: 0.8205\n",
      "Epoch 56/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9827 - loss: 0.0515 - val_accuracy: 0.8768 - val_loss: 0.8165\n",
      "Epoch 57/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9905 - loss: 0.0319 - val_accuracy: 0.8809 - val_loss: 0.8221\n",
      "Epoch 58/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9909 - loss: 0.0329 - val_accuracy: 0.8662 - val_loss: 0.8768\n",
      "Epoch 59/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 20ms/step - accuracy: 0.9849 - loss: 0.0471 - val_accuracy: 0.8534 - val_loss: 0.9619\n",
      "Epoch 60/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 18ms/step - accuracy: 0.9814 - loss: 0.0627 - val_accuracy: 0.8685 - val_loss: 0.8563\n",
      "Epoch 61/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9890 - loss: 0.0375 - val_accuracy: 0.8630 - val_loss: 0.8304\n",
      "Epoch 62/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9868 - loss: 0.0413 - val_accuracy: 0.8676 - val_loss: 0.8048\n",
      "Epoch 63/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9874 - loss: 0.0416 - val_accuracy: 0.8626 - val_loss: 0.8781\n",
      "Epoch 64/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9894 - loss: 0.0295 - val_accuracy: 0.8754 - val_loss: 0.8007\n",
      "Epoch 65/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9884 - loss: 0.0380 - val_accuracy: 0.8717 - val_loss: 0.8319\n",
      "Epoch 66/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9871 - loss: 0.0411 - val_accuracy: 0.8809 - val_loss: 0.8050\n",
      "Epoch 67/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 23ms/step - accuracy: 0.9872 - loss: 0.0392 - val_accuracy: 0.8543 - val_loss: 0.9708\n",
      "Epoch 68/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9892 - loss: 0.0347 - val_accuracy: 0.8644 - val_loss: 0.8736\n",
      "Epoch 69/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9878 - loss: 0.0380 - val_accuracy: 0.8699 - val_loss: 0.8788\n",
      "Epoch 70/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9885 - loss: 0.0313 - val_accuracy: 0.8713 - val_loss: 0.8526\n",
      "Epoch 71/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9845 - loss: 0.0479 - val_accuracy: 0.8594 - val_loss: 1.0089\n",
      "Epoch 72/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9894 - loss: 0.0341 - val_accuracy: 0.8772 - val_loss: 0.8268\n",
      "Epoch 73/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9910 - loss: 0.0283 - val_accuracy: 0.8727 - val_loss: 0.8213\n",
      "Epoch 74/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9882 - loss: 0.0356 - val_accuracy: 0.8653 - val_loss: 0.9176\n",
      "Epoch 75/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 22ms/step - accuracy: 0.9869 - loss: 0.0442 - val_accuracy: 0.8681 - val_loss: 0.9509\n",
      "Epoch 76/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 20ms/step - accuracy: 0.9869 - loss: 0.0422 - val_accuracy: 0.8722 - val_loss: 0.8710\n",
      "Epoch 77/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9898 - loss: 0.0323 - val_accuracy: 0.8754 - val_loss: 0.8021\n",
      "Epoch 78/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9882 - loss: 0.0408 - val_accuracy: 0.8740 - val_loss: 0.9581\n",
      "Epoch 79/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9877 - loss: 0.0367 - val_accuracy: 0.8699 - val_loss: 0.9205\n",
      "Epoch 80/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9906 - loss: 0.0302 - val_accuracy: 0.8704 - val_loss: 0.9141\n",
      "Epoch 81/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9861 - loss: 0.0518 - val_accuracy: 0.8704 - val_loss: 0.9917\n",
      "Epoch 82/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9898 - loss: 0.0352 - val_accuracy: 0.8644 - val_loss: 0.9620\n",
      "Epoch 83/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9866 - loss: 0.0417 - val_accuracy: 0.8745 - val_loss: 0.9473\n",
      "Epoch 84/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 22ms/step - accuracy: 0.9903 - loss: 0.0303 - val_accuracy: 0.8759 - val_loss: 0.9016\n",
      "Epoch 85/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9891 - loss: 0.0381 - val_accuracy: 0.8763 - val_loss: 0.9192\n",
      "Epoch 86/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9920 - loss: 0.0302 - val_accuracy: 0.8639 - val_loss: 0.9276\n",
      "Epoch 87/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 19ms/step - accuracy: 0.9864 - loss: 0.0476 - val_accuracy: 0.8841 - val_loss: 0.8672\n",
      "Epoch 88/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9939 - loss: 0.0233 - val_accuracy: 0.8713 - val_loss: 0.8974\n",
      "Epoch 89/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9903 - loss: 0.0306 - val_accuracy: 0.8575 - val_loss: 1.0015\n",
      "Epoch 90/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 18ms/step - accuracy: 0.9887 - loss: 0.0399 - val_accuracy: 0.8685 - val_loss: 0.9534\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.8745 - loss: 0.9624\n",
      "\u001b[1m410/410\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 6ms/step\n",
      "\u001b[1m410/410\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 6ms/step - accuracy: 0.9872 - loss: 0.0458\n",
      "15.746595656871795\n",
      "12.630658892790477\n",
      "0.10500144561131795\n"
     ]
    }
   ],
   "source": [
    "# test for model training module\n",
    "# augmentation_list_format = [noise_flag, crop_freq_time_flag, noise_factor, shift_factor, pitch_factor, speed_rate, time_or_freq_crop_factor, reflection_factor, crop_double_mask]\n",
    "augment_train_dict = {}\n",
    "augment_train_dict['CropDoubleMasked_0.1'] = [0,1,0,0,0,1,0.1,0,1]\n",
    "augment_train_dict['Noised_12dBs'] = [1,1,12,0,0,1,0,0,0]\n",
    "# augment_train_dict['Noised_20dBs'] = [1,1,20,0,0,1,0,0,0]\n",
    "augment_train_dict['Pitched_0.1'] = [0,1,0,0,0.1,1,0,0,0]\n",
    "augment_train_dict['Pitched_0.25'] = [0,1,0,0,0.25,1,0,0,0]\n",
    "# augment_train_dict['Pitched_0.5'] = [1,1,0,0,0.5,1,0,0,0]\n",
    "augment_train_dict['Sped_1.1'] = [0,1,0,0,0,1.1,0,0,0]\n",
    "# augment_train_dict['FreqCropped_0.05'] = [0,1,0,0,0,1,0.05,0,0] # freq_domain data crop\n",
    "augment_train_dict['FreqCropped_0.1'] = [0,1,0,0,0,1,0.1,0,0]\n",
    "# augment_train_dict['TimeCropped_0.05'] = [0,0,0,0,0,1,0.05,0,0]\n",
    "augment_train_dict['TimeCropped_0.1'] = [0,0,0,0,0,1,0.1,0,0]\n",
    "# augment_train_dict['Reflected_0.05'] = [0,1,0,0,0,1,0,0.05,0]\n",
    "# augment_train_dict['Reflected_0.1'] = [0,1,0,0,0,1,0,0.05,0]\n",
    "\n",
    "\n",
    "aug_models_list, aug_models_validation_acc_list, aug_models_train_acc_list = [],[],[]\n",
    "aug_models_dataprep_time_list, aug_models_train_time_list,  aug_models_eval_time_list = [],[],[]\n",
    "aug_model_samples_list = []\n",
    "\n",
    "\n",
    "# model_trainer returns [model_aug, test_result_aug, train_result_aug, dataprep_aug, train_time_aug, eval_time_aug]\n",
    "for aug_method in augment_train_dict.keys():\n",
    "    [model, test_acc, train_acc, prep_time, train_time, eval_time] = model_trainer(data=df, model_name=aug_method, aug_set=augment_train_dict[aug_method],\n",
    "                                                           X_train_no_aug=X_train, Y_train_no_aug=Y_train)\n",
    "    aug_models_list.append(model)\n",
    "    aug_models_validation_acc_list.append(test_acc)\n",
    "    aug_models_train_acc_list.append(train_acc)\n",
    "    aug_models_dataprep_time_list.append(prep_time)\n",
    "    aug_models_train_time_list.append(train_time)\n",
    "    aug_models_eval_time_list.append(eval_time)\n",
    "    aug_model_samples_list.append(aug_method)\n",
    "                                      "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d31eea88",
   "metadata": {
    "papermill": {
     "duration": 6.933518,
     "end_time": "2024-09-11T19:02:33.551366",
     "exception": false,
     "start_time": "2024-09-11T19:02:26.617848",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "* definitions of the dictionary and lists for differing augmentation methods, this set of data will be used in training and creating data_set\n",
    "* this data_set then will be tested with the model in hand"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "008410fc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-11T19:02:47.445482Z",
     "iopub.status.busy": "2024-09-11T19:02:47.444378Z",
     "iopub.status.idle": "2024-09-11T19:02:47.456709Z",
     "shell.execute_reply": "2024-09-11T19:02:47.455526Z"
    },
    "papermill": {
     "duration": 6.945467,
     "end_time": "2024-09-11T19:02:47.459382",
     "exception": false,
     "start_time": "2024-09-11T19:02:40.513915",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# augmentation parameter declaration for testing purposes\n",
    "# augmentation_list_format = [noise_flag, crop_freq_time_flag, noise_factor, shift_factor, pitch_factor, speed_rate, time_or_freq_crop_factor, reflection_factor]\n",
    "# crop_freq_time_flag=1 for data cropping in freq domain; crop_freq_time_flag=0 for data cropping in time domain\n",
    "# each type of augmentation has its first value element as the index in the base augmentation list\n",
    "\n",
    "augmentation_dict = {}\n",
    "augmentation_dict['noise_factor'] = [2, 0, 5, 10, 20]\n",
    "augmentation_dict['shift_factor'] = [3, 0.05, 0.35] # [0,1] interval\n",
    "augmentation_dict['pitch_factor'] = [4, 0.1, 0.50, 1]\n",
    "augmentation_dict['speed_rate'] = [5, 0.90, 0.95]\n",
    "augmentation_dict['time_crop_factor'] = [6, 0.10, 0.20] # [0,1] interval\n",
    "augmentation_dict['freq_crop_factor'] = [6, 0.10, 0.20] # [0,1] interval\n",
    "augmentation_dict['reflection_factor'] = [7, 0.10, 0.20] # [0,1] interval\n",
    "base_augmentation_list = [0, 1, 0, 0, 0, 1, 0, 0]\n",
    "\n",
    "# to ease the creation of the index list for the .csv file\n",
    "def factor_percentage(factor):\n",
    "    \"\"\"\n",
    "    percentage calculator for factors in the [0,2] interval\n",
    "    \"\"\"\n",
    "    if factor >=1:\n",
    "        return f\"{(factor-1)*100:.2f}\" + '%'\n",
    "    else:\n",
    "        return f\"{(factor-1)*100:.2f}\" + '%'\n",
    "\n",
    "def pos_factor_percentage(factor):\n",
    "    \"\"\"\n",
    "    percentage calculator for factors in the [0,1] interval\n",
    "    \"\"\"\n",
    "    return f\"{factor*100:.2f}\" + '%'"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9cd60f9f",
   "metadata": {
    "papermill": {
     "duration": 6.903087,
     "end_time": "2024-09-11T19:03:01.233530",
     "exception": false,
     "start_time": "2024-09-11T19:02:54.330443",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# TESTING MODELS WITH THE AUGMENTED DATASETS\n",
    "* observes the .keys() of the augmentation dictionary, sets the parser input factors\n",
    "* augmentation_list_format = [noise_flag, crop_freq_time_flag, noise_factor, shift_factor, pitch_factor, speed_rate, time_or_freq_crop_factor, reflection_factor]; datacrop is not available in this section\n",
    "* crop_freq_time_flag=1 for data cropping in freq domain; crop_freq_time_flag=0 for data cropping in time domain\n",
    "* each type of augmentation has its first value element as the index in the base augmentation list\n",
    "* the loop is able to produce sample_list for tabulation for proper formation of the dictionary.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "5240e71e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-11T19:03:14.772705Z",
     "iopub.status.busy": "2024-09-11T19:03:14.771990Z",
     "iopub.status.idle": "2024-09-11T19:03:14.777795Z",
     "shell.execute_reply": "2024-09-11T19:03:14.776522Z"
    },
    "papermill": {
     "duration": 6.851508,
     "end_time": "2024-09-11T19:03:14.781462",
     "exception": false,
     "start_time": "2024-09-11T19:03:07.929954",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# property_dict = []\n",
    "# def model_tester(data, model, augmentation_dict, property_dict, base_augmentation_list=[[0, 1, 0, 0, 0, 1, 0, 0]]  test_counter=0):\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "0aa41768",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-11T19:03:28.508738Z",
     "iopub.status.busy": "2024-09-11T19:03:28.508336Z",
     "iopub.status.idle": "2024-09-12T00:09:37.353938Z",
     "shell.execute_reply": "2024-09-12T00:09:37.350486Z"
    },
    "papermill": {
     "duration": 18377.950195,
     "end_time": "2024-09-12T00:09:39.650805",
     "exception": false,
     "start_time": "2024-09-11T19:03:21.700610",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - accuracy: 0.4634 - loss: 4.5733\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.5283 - loss: 3.4955\n",
      "15.764718651771545\n",
      "0.07599417765935262\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - accuracy: 0.6674 - loss: 2.4071\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8093 - loss: 1.1559\n",
      "15.383415742715199\n",
      "0.09697945515314738\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8020 - loss: 1.2296\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9443 - loss: 0.2634\n",
      "15.641133248806\n",
      "0.09601683219273885\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8571 - loss: 0.8308\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9905 - loss: 0.0268\n",
      "15.573451717694601\n",
      "0.07426486412684123\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8610 - loss: 0.8111\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - accuracy: 0.9909 - loss: 0.0244\n",
      "15.803348529338837\n",
      "0.07622764110565186\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8592 - loss: 0.8128\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 10ms/step - accuracy: 0.9910 - loss: 0.0244\n",
      "15.53302929798762\n",
      "0.0888501485188802\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8101 - loss: 0.9971\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9529 - loss: 0.1428\n",
      "23.4164998849233\n",
      "0.07437461217244466\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.7159 - loss: 1.7078\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8057 - loss: 0.9715\n",
      "23.448382981618245\n",
      "0.07114522457122803\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.6390 - loss: 2.4649\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.6766 - loss: 2.0941\n",
      "23.75898737112681\n",
      "0.09330235719680786\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=2048 is too large for input signal of length=1470\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=2048 is too large for input signal of length=1226\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=2048 is too large for input signal of length=1692\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.8086 - loss: 1.0724\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9408 - loss: 0.1963\n",
      "23.51686472495397\n",
      "0.06732518672943115\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=2048 is too large for input signal of length=1393\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=2048 is too large for input signal of length=1161\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=2048 is too large for input signal of length=1603\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.7915 - loss: 1.1006\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9372 - loss: 0.1947\n",
      "23.142733053366342\n",
      "0.06452672481536866\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8538 - loss: 0.8374\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9859 - loss: 0.0502\n",
      "15.473701032002767\n",
      "0.07492696444193522\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8532 - loss: 0.8358\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - accuracy: 0.9756 - loss: 0.0867\n",
      "15.579374420642853\n",
      "0.0744133989016215\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.7836 - loss: 1.6057\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8890 - loss: 0.9076\n",
      "15.651537160078684\n",
      "0.07369146744410197\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.7371 - loss: 2.0666\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8465 - loss: 1.2312\n",
      "15.627970004081726\n",
      "0.09208847681681315\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8120 - loss: 1.2032\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9381 - loss: 0.3673\n",
      "15.584222356478373\n",
      "0.09225260416666667\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8349 - loss: 1.0263\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 8ms/step\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - accuracy: 0.9544 - loss: 0.2329\n",
      "15.78776935338974\n",
      "0.10169327259063721\n",
      "17 17\n"
     ]
    }
   ],
   "source": [
    "# accuracy testing per modified augmentation list, which has only one value changed at a time\n",
    "\n",
    "# crop_freq_time_flag=1 for data cropping in freq domain; crop_freq_time_flag=0 for data cropping in time domain\n",
    "# each type of augmentation has its first value element as the index in the base augmentation list\n",
    "\n",
    "validation_acc_list, train_acc_list, dataprep_time_list, eval_time_list = [],[],[],[]\n",
    "# list for final dataFrame indices\n",
    "samples_list = []\n",
    "test_counter = 0\n",
    "for aug_method in augmentation_dict.keys():\n",
    "    aug_idx = augmentation_dict[aug_method][0]\n",
    "    dummy_idx = 0\n",
    "    for aug_value in augmentation_dict[aug_method]:\n",
    "        if dummy_idx != 0:\n",
    "            test_counter += 1\n",
    "            modified_augmentation_list = base_augmentation_list.copy()\n",
    "            modified_augmentation_list[aug_idx] = aug_value\n",
    "            \n",
    "            noise_flag = 1 if (aug_method == 'noise_factor') else 0\n",
    "            crop_freq_time_flag = 0 if (aug_method == 'time_crop_factor') else 1\n",
    "            modified_augmentation_list[0] = noise_flag\n",
    "            modified_augmentation_list[1] = crop_freq_time_flag\n",
    "            [noise_factor, shift_factor, pitch_factor, speed_rate, time_or_freq_crop_factor, reflection_factor] = modified_augmentation_list[2:]\n",
    "            \n",
    "            \n",
    "            # data preparation and testing\n",
    "            # extract the feature and label arrays\n",
    "            feature, label, start, end = parser(df, noise_factor=noise_flag, crop_freq=crop_freq_time_flag, snr_dbs=noise_factor,\n",
    "                                                    shift_factor=shift_factor, pitch_factor=pitch_factor, speed_rate=speed_rate,\n",
    "                                                    crop_factor=time_or_freq_crop_factor, added_shift_factor=reflection_factor, decimal = True, aug = True)\n",
    "\n",
    "            # prepare the train and test data\n",
    "            X_train, X_test, Y_train, Y_test = prepare_data(feature, label)\n",
    " \n",
    "            #  call the not_augmented model for testing\n",
    "            model = train_model(train = False, model_name = \"Original_Model.keras\")\n",
    "\n",
    "            # attain the accuracy results\n",
    "            train_result, test_result, eval_time = train_test_accuracy(model, X_train, X_test, Y_train, Y_test)\n",
    "            \n",
    "            #show the time elapsed for further analysis\n",
    "            dataprep_time = (end-start)/60\n",
    "            print(dataprep_time)\n",
    "            print(eval_time)\n",
    "\n",
    "            # accrue the data\n",
    "            validation_acc_list.append(test_result)\n",
    "            train_acc_list.append(train_result)\n",
    "            dataprep_time_list.append(dataprep_time)\n",
    "            eval_time_list.append(eval_time)\n",
    "\n",
    "            samples_list_dict = {'noise_factor':'Noise', 'shift_factor':'Shift_Factor', 'pitch_factor':'Pitch_Change', 'speed_rate':'Time_Stretched',\n",
    "                                 'time_crop_factor':'Time_DataCrop_Factor', 'freq_crop_factor':'Freq_DataCrop_Factor', 'reflection_factor':'Reflection_Factor'}\n",
    "            # if noise is augmented, put units at the end of the samples_list element\n",
    "            unit_list_dict = {'noise_factor':'dBs', 'shift_factor':'', 'pitch_factor':' semiNote', 'speed_rate':'',\n",
    "                                 'time_crop_factor':'', 'freq_crop_factor':'', 'reflection_factor':''}\n",
    "            # value format separation works if the decimal factors are put in the format z.xy..., due to the basic slicing\n",
    "            augmentation_value_dict = {'noise_factor':'SNR:' + str(aug_value), 'shift_factor':pos_factor_percentage(aug_value), 'pitch_factor':str(aug_value), 'speed_rate':factor_percentage(aug_value),\n",
    "                                 'time_crop_factor':pos_factor_percentage(aug_value), 'freq_crop_factor':pos_factor_percentage(aug_value), 'reflection_factor':pos_factor_percentage(aug_value)}\n",
    "            samples_list.append(samples_list_dict[aug_method] + ', ' + augmentation_value_dict[aug_method] + unit_list_dict[aug_method])\n",
    "            \n",
    "        \n",
    "        dummy_idx += 1\n",
    "\n",
    "print(len(samples_list), test_counter)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "65bbce1e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T00:09:53.295162Z",
     "iopub.status.busy": "2024-09-12T00:09:53.294700Z",
     "iopub.status.idle": "2024-09-12T00:09:53.387695Z",
     "shell.execute_reply": "2024-09-12T00:09:53.386508Z"
    },
    "papermill": {
     "duration": 6.809778,
     "end_time": "2024-09-12T00:09:53.390168",
     "exception": false,
     "start_time": "2024-09-12T00:09:46.580390",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                Samples  Validation Accuracy  Training Accuracy  \\\n",
      "0        NoAugmentation             0.863491           0.989464   \n",
      "1  CropDoubleMasked_0.1             0.867155           0.992976   \n",
      "2          Noised_12dBs             0.847916           0.986486   \n",
      "3           Pitched_0.1             0.879524           0.995419   \n",
      "4          Pitched_0.25             0.888227           0.995343   \n",
      "5              Sped_1.1             0.868530           0.986563   \n",
      "6       FreqCropped_0.1             0.862574           0.996717   \n",
      "7       TimeCropped_0.1             0.868530           0.987403   \n",
      "\n",
      "   Data Creation Time  Evaluation Time  Training Time  \n",
      "0           17.730502         0.092650       6.809054  \n",
      "1           16.359330         0.102599      12.364727  \n",
      "2           15.590478         0.100720      12.270131  \n",
      "3           23.494119         0.099011      12.458126  \n",
      "4           23.708741         0.120008      12.487365  \n",
      "5           22.355504         0.103335      12.754150  \n",
      "6           15.603909         0.095867      12.386526  \n",
      "7           15.746596         0.105001      12.630659  \n"
     ]
    }
   ],
   "source": [
    "# for the augmented-model training results, to check how each augmentation method affects the accuracy values and time periods\n",
    "aug_models_results_dict = {\n",
    "    'Samples':['NoAugmentation'] + aug_model_samples_list,\n",
    "    'Validation Accuracy': [test_result_noaug] + aug_models_validation_acc_list,\n",
    "    'Training Accuracy': [train_result_noaug] + aug_models_train_acc_list,\n",
    "    'Data Creation Time': [time_elapsed_no_aug] + aug_models_dataprep_time_list,\n",
    "    'Evaluation Time': [eval_time_noaug] + aug_models_eval_time_list,\n",
    "    'Training Time' : [train_time_noaug] + aug_models_train_time_list\n",
    "}\n",
    "aug_models_test_results = pd.DataFrame(aug_models_results_dict)\n",
    "aug_models_test_results.set_index(\"Samples\")\n",
    "\n",
    "print(aug_models_test_results)\n",
    "aug_models_test_results.to_csv(\"Augmented_Model_Results.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "3827ca91",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T00:10:07.102059Z",
     "iopub.status.busy": "2024-09-12T00:10:07.101673Z",
     "iopub.status.idle": "2024-09-12T00:10:07.118113Z",
     "shell.execute_reply": "2024-09-12T00:10:07.116377Z"
    },
    "papermill": {
     "duration": 6.816262,
     "end_time": "2024-09-12T00:10:07.120510",
     "exception": false,
     "start_time": "2024-09-12T00:10:00.304248",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                         Samples  Validation Accuracy  Training Accuracy  \\\n",
      "0                 NoAugmentation             0.863491           0.989464   \n",
      "1                Noise, SNR:0dBs             0.464040           0.527714   \n",
      "2                Noise, SNR:5dBs             0.677508           0.803940   \n",
      "3               Noise, SNR:10dBs             0.810353           0.942129   \n",
      "4               Noise, SNR:20dBs             0.861200           0.988853   \n",
      "5            Shift_Factor, 5.00%             0.864865           0.989159   \n",
      "6           Shift_Factor, 35.00%             0.863949           0.989311   \n",
      "7     Pitch_Change, 0.1 semiNote             0.813559           0.950679   \n",
      "8     Pitch_Change, 0.5 semiNote             0.707284           0.803023   \n",
      "9       Pitch_Change, 1 semiNote             0.630325           0.687280   \n",
      "10       Time_Stretched, -10.00%             0.813101           0.941212   \n",
      "11        Time_Stretched, -5.00%             0.802107           0.936632   \n",
      "12  Time_DataCrop_Factor, 10.00%             0.860284           0.983051   \n",
      "13  Time_DataCrop_Factor, 20.00%             0.857077           0.973584   \n",
      "14  Freq_DataCrop_Factor, 10.00%             0.790197           0.892808   \n",
      "15  Freq_DataCrop_Factor, 20.00%             0.736601           0.844709   \n",
      "16     Reflection_Factor, 10.00%             0.819056           0.933883   \n",
      "17     Reflection_Factor, 20.00%             0.837380           0.950527   \n",
      "\n",
      "    Data Creation Time  Evaluation Time  \n",
      "0            17.730502         0.092650  \n",
      "1            15.764719         0.075994  \n",
      "2            15.383416         0.096979  \n",
      "3            15.641133         0.096017  \n",
      "4            15.573452         0.074265  \n",
      "5            15.803349         0.076228  \n",
      "6            15.533029         0.088850  \n",
      "7            23.416500         0.074375  \n",
      "8            23.448383         0.071145  \n",
      "9            23.758987         0.093302  \n",
      "10           23.516865         0.067325  \n",
      "11           23.142733         0.064527  \n",
      "12           15.473701         0.074927  \n",
      "13           15.579374         0.074413  \n",
      "14           15.651537         0.073691  \n",
      "15           15.627970         0.092088  \n",
      "16           15.584222         0.092253  \n",
      "17           15.787769         0.101693  \n"
     ]
    }
   ],
   "source": [
    "# for the test results of the not-augmented model on augmented datasets, to check the not-augmented model performance\n",
    "test_results_dict = {\n",
    "    'Samples':['NoAugmentation'] + samples_list,\n",
    "    'Validation Accuracy': [test_result_noaug] + validation_acc_list,\n",
    "    'Training Accuracy': [train_result_noaug] + train_acc_list,\n",
    "    'Data Creation Time': [time_elapsed_no_aug] + dataprep_time_list,\n",
    "    'Evaluation Time': [eval_time_noaug] + eval_time_list\n",
    "}\n",
    "test_results = pd.DataFrame(test_results_dict)\n",
    "test_results.set_index(\"Samples\")\n",
    "\n",
    "print(test_results)\n",
    "test_results.to_csv(\"Efficient_Augmentation_Selection_Results.csv\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 500970,
     "sourceId": 928025,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 5518832,
     "sourceId": 9348736,
     "sourceType": "datasetVersion"
    },
    {
     "sourceId": 24385415,
     "sourceType": "kernelVersion"
    },
    {
     "sourceId": 195734660,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30746,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 33248.791053,
   "end_time": "2024-09-12T00:10:16.620493",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-09-11T14:56:07.829440",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
