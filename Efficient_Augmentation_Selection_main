{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "47bcc522",
   "metadata": {
    "papermill": {
     "duration": 0.008593,
     "end_time": "2024-10-18T19:07:49.766625",
     "exception": false,
     "start_time": "2024-10-18T19:07:49.758032",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# LIBRARY PULL"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2eadd910",
   "metadata": {
    "papermill": {
     "duration": 0.007662,
     "end_time": "2024-10-18T19:07:49.782351",
     "exception": false,
     "start_time": "2024-10-18T19:07:49.774689",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "* The model utilized in this script is a pretrained model from UrbanSound8k, and it uses 8 layers with 128 inputs in the first layer using a Keras.Sequential structure. The generic audio processing utilizes the features of the Librosa library together with the array characteristics of the Pandas and NumPy libraries. Some other visualization and training libraries are also included in the library imports as side tools or potential improvements to the script in observing the analysis and the complete characteristics of the behavior of the model and its augmented versions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "449e5461",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-10-18T19:07:49.800417Z",
     "iopub.status.busy": "2024-10-18T19:07:49.799548Z",
     "iopub.status.idle": "2024-10-18T19:08:05.663540Z",
     "shell.execute_reply": "2024-10-18T19:08:05.662396Z"
    },
    "papermill": {
     "duration": 15.87579,
     "end_time": "2024-10-18T19:08:05.666030",
     "exception": false,
     "start_time": "2024-10-18T19:07:49.790240",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting resampy\r\n",
      "  Downloading resampy-0.4.3-py3-none-any.whl.metadata (3.0 kB)\r\n",
      "Requirement already satisfied: numpy>=1.17 in /opt/conda/lib/python3.10/site-packages (from resampy) (1.26.4)\r\n",
      "Requirement already satisfied: numba>=0.53 in /opt/conda/lib/python3.10/site-packages (from resampy) (0.58.1)\r\n",
      "Requirement already satisfied: llvmlite<0.42,>=0.41.0dev0 in /opt/conda/lib/python3.10/site-packages (from numba>=0.53->resampy) (0.41.1)\r\n",
      "Downloading resampy-0.4.3-py3-none-any.whl (3.1 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.1/3.1 MB\u001b[0m \u001b[31m38.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hInstalling collected packages: resampy\r\n",
      "Successfully installed resampy-0.4.3\r\n"
     ]
    }
   ],
   "source": [
    "# Basic Libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import random\n",
    "import time\n",
    "\n",
    "pd.plotting.register_matplotlib_converters()\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "import seaborn as sns\n",
    "import random\n",
    "\n",
    "from IPython.display import Audio\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "!pip install resampy "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c5ecfa00",
   "metadata": {
    "_kg_hide-input": true,
    "execution": {
     "iopub.execute_input": "2024-10-18T19:08:05.686421Z",
     "iopub.status.busy": "2024-10-18T19:08:05.685603Z",
     "iopub.status.idle": "2024-10-18T19:08:17.951229Z",
     "shell.execute_reply": "2024-10-18T19:08:17.950059Z"
    },
    "papermill": {
     "duration": 12.27813,
     "end_time": "2024-10-18T19:08:17.953362",
     "exception": false,
     "start_time": "2024-10-18T19:08:05.675232",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-10-18 19:08:07.519832: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-10-18 19:08:07.519982: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-10-18 19:08:07.665833: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')]\n"
     ]
    }
   ],
   "source": [
    "# Libraries for Classification and building Models\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Conv2D, Flatten, Dense, MaxPool2D, Dropout\n",
    "from tensorflow.keras.utils import to_categorical \n",
    "import tensorflow as tf; print(tf.config.list_physical_devices('GPU'))\n",
    "\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.svm import SVC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "94dd768c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-18T19:08:17.972974Z",
     "iopub.status.busy": "2024-10-18T19:08:17.972437Z",
     "iopub.status.idle": "2024-10-18T19:08:18.078559Z",
     "shell.execute_reply": "2024-10-18T19:08:18.077837Z"
    },
    "papermill": {
     "duration": 0.118484,
     "end_time": "2024-10-18T19:08:18.080888",
     "exception": false,
     "start_time": "2024-10-18T19:08:17.962404",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Project Specific Libraries\n",
    "import os\n",
    "import librosa\n",
    "import librosa.display\n",
    "import glob \n",
    "import skimage"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00bb75fe",
   "metadata": {
    "papermill": {
     "duration": 0.008519,
     "end_time": "2024-10-18T19:08:18.098605",
     "exception": false,
     "start_time": "2024-10-18T19:08:18.090086",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# AUDIO AUGMENTATION FUNCTION DEFINITIONS"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d07dd27",
   "metadata": {
    "papermill": {
     "duration": 0.008804,
     "end_time": "2024-10-18T19:08:18.116997",
     "exception": false,
     "start_time": "2024-10-18T19:08:18.108193",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Explanations and Input Parameter Properties for Augmentation Methods\n",
    "* arrange_duration: allows for the user to put in a sampling rate for the audio file, which may be beneficial in augmentaiton; however, the method has not been seen to enhance the efficiency hence was not considered in the general structure as an option. sample rate and the duration can be taken from the user to modify the signal.\n",
    "\n",
    "* add_noise(): direct addition of white noise, takes zero and positive values as the \"snr_dbs\" input, corresponding to the signal to noise ratio in terms of the power. the addition is done through superposition and can be observed in both time and the frequency domain representations. \"noise_factor\" is the flag activating the noise addition.\\\n",
    "    -noise_factor: flag for noise addition activation\\\n",
    "    -snr_dbs: signal to noise power ratio\n",
    "\n",
    "* shift_sound(): creates direct shift in the vector notation, hence the time representation of the signal creating a time-shift. \"shift_factor\" is taken from [0,1] interval and the shift value has been randomized to give a randomized effect to the sound shift. however, the method has been observed not to decrease the accuracy that much, not contributing much to the training set and the not-augmented model performance.\\\n",
    "    -shift_factor: percentage shift of the vector specified, in [0,1]\n",
    "    \n",
    "* shift_sound_add(): to compensate for the reflection type of effects in especially hollow halls with the lack of sound absorption in the environment, this function adds the shift_sound specified by the shift_factor onto the original audio signal. in contrast to the mere shifting, reflection effect has been observed to lower the validation accuracy while not contributing pure noise.\\\n",
    "    -shift_factor: percentage shift of the vector specified, in [0,1]\n",
    "    \n",
    "* change_pitch(): directly uses the built-in function utilizing time stretch and resampling to change the pitch of the audio signal. changes are over seminotes in \"pitch_factor\". no requirement is done on pitch_factor, although to observe possible pitch change, it would come sufficient to observe positive pitch changes. the important thing is the size matching of the two vectors and the approximate energy equality between them.\\\n",
    "    -pitch_facotr: step number for pitch shift, can take floating number values\n",
    "  \n",
    "* change_speed(): creates a speed change effect, which can be used in representing environmental passages and audio transfer through these. \"speed_rate\" equated to the value 1 would give the original data.\\\n",
    "    -speed_rate: could be any positive number.\n",
    "\n",
    "* rand_cancel(): randomized data cropping, as per the standard distribution, some part of the signal dependent on the \"crop_factor\" is equated to 0. the function can be used for masking purposes in the time domain, the mel-freqeuncy domain and in both of them, as in the double mask.\\\n",
    "    -crop_factor: determinant for the cropping amount, in [0,1]\n",
    "   \n",
    "* main_effect(): applies the effective augmentation methods as a whole, no order of operation has been signified due to the inspection of the beneficial inclusion of single augmentation methods. the function is called in parser and audio_inspector functions. the input to the function are the inputs of the other functions given above. \n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fdc59cb7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-18T19:08:18.136273Z",
     "iopub.status.busy": "2024-10-18T19:08:18.135721Z",
     "iopub.status.idle": "2024-10-18T19:08:18.153977Z",
     "shell.execute_reply": "2024-10-18T19:08:18.153274Z"
    },
    "papermill": {
     "duration": 0.029803,
     "end_time": "2024-10-18T19:08:18.155893",
     "exception": false,
     "start_time": "2024-10-18T19:08:18.126090",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def arrange_duration(data, sample_rate, duration, decimal = True):\n",
    "    \"\"\"\n",
    "    the function allows the manual sampling and duration specification\n",
    "    also returns the original data for further preprocessing\n",
    "    \"\"\"\n",
    "    if duration <= 0:\n",
    "        return data\n",
    "    \n",
    "    data_duration = librosa.get_duration(y = data, sr = sample_rate)\n",
    "    duration_ratio = duration / data_duration\n",
    "    \n",
    "    new_data = []\n",
    "    for i in range(int(duration_ratio)):\n",
    "        new_data = np.append(new_data, data)\n",
    "        \n",
    "    if decimal:\n",
    "        decimal_duration = int(len(data) * (duration_ratio % 1))\n",
    "        new_data = np.append(new_data, data[:decimal_duration])\n",
    "\n",
    "    return new_data\n",
    "\n",
    "def squared_norm(vector):\n",
    "    \"\"\"\n",
    "    used for SNR integration into the noise function\n",
    "    \"\"\"\n",
    "    return np.sum(np.square(vector))\n",
    "\n",
    "def add_noise(data, snr_dbs, noise_factor):\n",
    "    \"\"\"\n",
    "    white noise addition through the formulation in reference to https://pytorch.org/audio/main/generated/torchaudio.functional.add_noise.html\n",
    "    \"\"\"\n",
    "    noise = np.random.randn(len(data))\n",
    "    sq_norm_noise, sq_norm_data = squared_norm(noise), squared_norm(data)\n",
    "    noisy_data = np.sqrt((sq_norm_data/sq_norm_noise)*(10**(-snr_dbs/10)))*noise_factor*noise + data\n",
    "    return noisy_data\n",
    "\n",
    "def shift_sound(data, shift_factor):\n",
    "    \"\"\"\n",
    "    shifts the audio waveform in time domain\n",
    "    shift is randomized as per the shift_factor provided in [0,1]\n",
    "    \"\"\"\n",
    "    shift_factor = np.random.randint(0, shift_factor * len(data) + 1)\n",
    "    rolled_data = np.roll(data, shift_factor)\n",
    "    return rolled_data\n",
    "\n",
    "def shift_sound_add(data, shift_factor):\n",
    "    \"\"\"\n",
    "    adds the shifted sound onto the original audio\n",
    "    creates a reflection like effect\n",
    "    \"\"\"\n",
    "    if shift_factor != 0:\n",
    "        shift_factor = np.random.randint(0, shift_factor * len(data) + 1)\n",
    "        rolled_data = np.roll(data, shift_factor)\n",
    "        rolled_data = rolled_data + data\n",
    "        return rolled_data\n",
    "    else:\n",
    "        return data\n",
    "\n",
    "def change_pitch(data, sample_rate, pitch_factor):\n",
    "    \"\"\"\n",
    "    direct pitch change using librosa.effects library\n",
    "    \"\"\"\n",
    "    if pitch_factor != 0:\n",
    "        changed_pitch_data = librosa.effects.pitch_shift(data, sr = sample_rate, n_steps = pitch_factor)\n",
    "        return changed_pitch_data\n",
    "    else:\n",
    "        return data\n",
    "\n",
    "\n",
    "def change_speed(data, speed_rate):\n",
    "    \"\"\"\n",
    "    time stretchs through librosa.effects library, changes the processing speed rate\n",
    "    \"\"\"\n",
    "    if speed_rate !=1:\n",
    "        stretched_data = librosa.effects.time_stretch(data, rate = speed_rate)\n",
    "        return stretched_data\n",
    "    else:\n",
    "        return data\n",
    "\n",
    "\n",
    "def rand_cancel(data, crop_factor):\n",
    "    \"\"\"\n",
    "    makes some portion of the audio, either in mel-frequency or time domain vanish\n",
    "    in small portions, it is found effective augmenting the dataset\n",
    "    for a more developed version refer to doi: 10.21437/Interspeech.2019-2680\n",
    "    \"\"\"\n",
    "    if crop_factor != 0:\n",
    "        data_length = len(data)\n",
    "        lower_bound = np.random.randint(0, data_length)\n",
    "        upper_bound = min(lower_bound + round(crop_factor * data_length), data_length)  # Ensure it doesn't exceed bounds\n",
    "        rand_num = random.random() # Randomization to prevent pattern recog.\n",
    "\n",
    "        # randomization as per the different volumes\n",
    "        if 0.1 <= rand_num <= 0.95:\n",
    "            data[lower_bound:upper_bound] = 0\n",
    "\n",
    "        return data\n",
    "    else:\n",
    "        return data\n",
    "\n",
    "# def doppler_effective(data, )\n",
    "\n",
    "\n",
    "def main_effect(data, sample_rate, added_shift_factor = 0, crop_factor=0, noise_factor = 0, snr_dbs = 1, shift_factor = 0, pitch_factor = 0, speed_rate = 1, duration = 0, decimal = True):\n",
    "    \"\"\"\n",
    "    merges all the effect functions to give the complete form of the preprocessed audio data\n",
    "    \"\"\"\n",
    "    final_data = arrange_duration(\n",
    "        change_speed(change_pitch(\n",
    "            shift_sound(add_noise(\n",
    "                rand_cancel(\n",
    "                    shift_sound_add(data, added_shift_factor), crop_factor), snr_dbs, noise_factor), shift_factor), sample_rate, pitch_factor), speed_rate), sample_rate, duration, decimal)\n",
    "    return final_data\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d6355cb",
   "metadata": {
    "papermill": {
     "duration": 0.008422,
     "end_time": "2024-10-18T19:08:18.173057",
     "exception": false,
     "start_time": "2024-10-18T19:08:18.164635",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# PARSER FUNCTION FOR FURTHER ANALYSIS\n",
    "* the parser opens up the clustered audio file, one by one, and loads the audio signal using the time-domain mode sampling through Librosa\n",
    "* 'kaiser_fast' resolution has been used for faster extraction\n",
    "* if augmentation is desired on the dataset, main_effect is taken into effect\n",
    "* crop_double_mask input allows for double masking through data crop, both in the time and frequency domain; for visualization observe through the audio inspector\n",
    "* the masking in the time and frequency domain has been executed next\n",
    "* from the time dataset, mel-spectrograms have been obtained and mean values of each audio signal's spectrogram is taken\n",
    "* feature and label extraction has been completely executed once all 8732 audio files are through\n",
    "* parser returns the data preparation time besides the feature and label data; crucial for training resources"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "79fac610",
   "metadata": {
    "papermill": {
     "duration": 0.008555,
     "end_time": "2024-10-18T19:08:18.190629",
     "exception": false,
     "start_time": "2024-10-18T19:08:18.182074",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ee9b37cc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-18T19:08:18.209657Z",
     "iopub.status.busy": "2024-10-18T19:08:18.208868Z",
     "iopub.status.idle": "2024-10-18T19:08:18.218529Z",
     "shell.execute_reply": "2024-10-18T19:08:18.217794Z"
    },
    "papermill": {
     "duration": 0.021008,
     "end_time": "2024-10-18T19:08:18.220349",
     "exception": false,
     "start_time": "2024-10-18T19:08:18.199341",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def parser(data, added_shift_factor = 0, crop_factor = 0, crop_freq = 1, crop_double_mask=0, noise_factor = 0, snr_dbs = 1, shift_factor = 0, pitch_factor = 0, speed_rate = 1, duration = 0, decimal = True, aug = False):\n",
    "    \"\"\"\n",
    "    takes the cluster data and processes each audio piece one by one\n",
    "    if aug, augments the dataset as well\n",
    "    takes the mfcc, mel-frequency cepstrum, using STFT and mel-spectrogram transformation\n",
    "    creates mfcc dataset, through the means\n",
    "    \"\"\"\n",
    "    feature = []\n",
    "    label = []\n",
    "    start_time = time.time()\n",
    "    \n",
    "    for i in range(len(data)):\n",
    "        file_name = '../input/urbansound8k/fold' + str(data[\"fold\"][i]) + '/' + data[\"slice_file_name\"][i]\n",
    "        X, sample_rate = librosa.load(file_name, res_type='kaiser_fast')\n",
    "        \n",
    "        # augment the data\n",
    "        if aug:\n",
    "            X = main_effect(X, sample_rate=sample_rate, added_shift_factor=added_shift_factor, snr_dbs=snr_dbs, \n",
    "                            crop_factor=crop_double_mask*crop_factor, noise_factor=noise_factor, shift_factor=shift_factor,\n",
    "                            pitch_factor=pitch_factor, speed_rate=speed_rate, duration=duration, decimal=aug)\n",
    "            \n",
    "        # extract mfcc feature from data\n",
    "        if crop_freq: \n",
    "            # cropping in the mel-freq domain      \n",
    "            mels = np.mean(rand_cancel(data = librosa.feature.melspectrogram(y=X, sr=sample_rate), crop_factor=crop_factor).T,axis=0)\n",
    "        else:         \n",
    "            # cropping in the time domain      \n",
    "            X = rand_cancel(data=X, crop_factor=crop_factor)\n",
    "            mels = np.mean(librosa.feature.melspectrogram(y=X, sr=sample_rate).T, axis=0)\n",
    "        \n",
    "        feature.append(mels)\n",
    "        label.append(data[\"classID\"][i])\n",
    "        \n",
    "    end_time = time.time()\n",
    "    \n",
    "    return feature, label, start_time, end_time"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18309b92",
   "metadata": {
    "papermill": {
     "duration": 0.008427,
     "end_time": "2024-10-18T19:08:18.237455",
     "exception": false,
     "start_time": "2024-10-18T19:08:18.229028",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# DATA PREPARATION\n",
    "* feature and label data are put into the array form\n",
    "* scikit_learn library allows train_test data split by 0.75:0.25 ratio, random_state allows for reproducible results in observing augmented model behavior\n",
    "* datasets that are going to be given into the model are formed so that 128 inputs are taken"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2ed63db3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-18T19:08:18.255865Z",
     "iopub.status.busy": "2024-10-18T19:08:18.255593Z",
     "iopub.status.idle": "2024-10-18T19:08:18.261521Z",
     "shell.execute_reply": "2024-10-18T19:08:18.260659Z"
    },
    "papermill": {
     "duration": 0.017357,
     "end_time": "2024-10-18T19:08:18.263492",
     "exception": false,
     "start_time": "2024-10-18T19:08:18.246135",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def prepare_data(feature, label):\n",
    "    \"\"\"\n",
    "    puts the data into array formation for further ML analysis\n",
    "    split the testing and training data for training and validation processes\n",
    "    shapes as per the pretrained model\n",
    "    \"\"\"\n",
    "    X = np.array(feature)\n",
    "    Y = np.array(label)\n",
    "#     data = temp.transpose()\n",
    "    \n",
    "#     X_ = data[:, 0]\n",
    "#     Y = data[:, 1]\n",
    "#     X = np.empty([8732, 128])\n",
    "    \n",
    "#     for i in range(8732):\n",
    "#         X[i] = (X_[i])\n",
    "    \n",
    "    Y = to_categorical(Y)\n",
    "    \n",
    "    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, random_state = 1)\n",
    "    \n",
    "    X_train = X_train.reshape(-1, 16, 8, 1)\n",
    "    X_test = X_test.reshape(-1, 16, 8, 1)\n",
    "    \n",
    "    return X_train, X_test, Y_train, Y_test"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b9a0cb0",
   "metadata": {
    "papermill": {
     "duration": 0.008802,
     "end_time": "2024-10-18T19:08:18.281035",
     "exception": false,
     "start_time": "2024-10-18T19:08:18.272233",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# MODEL TRAINING\n",
    "* Keras sequential model from the UrbanSound8K source has been taken in its pretrained form\n",
    "* 8 layers at total, 2 convolutional layers, 2 pool 2D layers are formed, through\n",
    "* cross_entropy has been used for loss analyses, accuracy has been considered and optimizer has been set to 'adam' optimizer\n",
    "* 90 epochs and 30 batches for sufficiently long iteration cycles through the batch_size and total training cycle through the number of epochs\n",
    "* the model has been saved to use later in accuracy testing over augmented datasets\n",
    "* if 'train' input has been set to False, the model returns the model with the input 'model_name'\n",
    "* also the training time has been returned as an output besides the model itself for further use"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2eff295c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-18T19:08:18.299677Z",
     "iopub.status.busy": "2024-10-18T19:08:18.299440Z",
     "iopub.status.idle": "2024-10-18T19:08:18.309691Z",
     "shell.execute_reply": "2024-10-18T19:08:18.308829Z"
    },
    "papermill": {
     "duration": 0.021694,
     "end_time": "2024-10-18T19:08:18.311595",
     "exception": false,
     "start_time": "2024-10-18T19:08:18.289901",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def train_model(train = False, model_name = \"Original_Model\", X_test = 0, X_train = 0, Y_test = 0, Y_train = 0, epochs = 90, batch_size = 30):\n",
    "    \"\"\"\n",
    "    trains the pretrained model as per the dataset given in\n",
    "    creates the model and returns the model and the training time\n",
    "    if no training is needed returns the model from specified data_path by model_name\n",
    "    \"\"\"\n",
    "    if train:\n",
    "        start_time = time.time()\n",
    "        model = Sequential()\n",
    "\n",
    "        model.add(Conv2D(64, (3, 3), padding = \"same\", activation = \"tanh\", input_shape = (16, 8, 1)))\n",
    "        model.add(MaxPool2D(pool_size=(2, 2)))\n",
    "        model.add(Conv2D(128, (3, 3), padding = \"same\", activation = \"tanh\"))\n",
    "        model.add(MaxPool2D(pool_size=(2, 2)))\n",
    "        model.add(Dropout(0.1))\n",
    "        model.add(Flatten())\n",
    "        model.add(Dense(1024, activation = \"tanh\"))\n",
    "        model.add(Dense(10, activation = \"softmax\"))\n",
    "\n",
    "        model.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])\n",
    "        print(epochs)\n",
    "        model.fit(x=X_train, y=Y_train, batch_size=batch_size, epochs=90, validation_data=(X_test, Y_test))\n",
    "        \n",
    "        model.save(model_name+'.keras')\n",
    "        \n",
    "        end_time = time.time()\n",
    "        training_time = (end_time-start_time)/60\n",
    "        \n",
    "        return model, training_time\n",
    "        \n",
    "    else:\n",
    "        loaded_model = tf.keras.models.load_model(model_name)\n",
    "        return loaded_model\n",
    "#     when saved will return the previous model, for the train_model is called with train=False argument later on"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35275ab8",
   "metadata": {
    "papermill": {
     "duration": 0.008689,
     "end_time": "2024-10-18T19:08:18.329034",
     "exception": false,
     "start_time": "2024-10-18T19:08:18.320345",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# MODEL TESTING\n",
    "* feature and label datasets have been taken into the model for evaluation of the training and validation data\n",
    "* the function returns trainining accuracy, validation accuracy, and the evaluation time for performance review"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "0cc5e378",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-18T19:08:18.347863Z",
     "iopub.status.busy": "2024-10-18T19:08:18.347590Z",
     "iopub.status.idle": "2024-10-18T19:08:18.353497Z",
     "shell.execute_reply": "2024-10-18T19:08:18.352563Z"
    },
    "papermill": {
     "duration": 0.017535,
     "end_time": "2024-10-18T19:08:18.355502",
     "exception": false,
     "start_time": "2024-10-18T19:08:18.337967",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def train_test_accuracy(model, X_train, X_test, Y_train, Y_test):\n",
    "    start_time = time.time()\n",
    "    \n",
    "    predictions = model.predict(X_test)\n",
    "    score_test = model.evaluate(X_test, Y_test)\n",
    "    \n",
    "    predictions = model.predict(X_train)\n",
    "    score_train = model.evaluate(X_train, Y_train)\n",
    "    \n",
    "    test_result = score_test[1]\n",
    "    train_result = score_train[1]\n",
    "    \n",
    "    end_time = time.time()\n",
    "    eval_time = (end_time-start_time)/60\n",
    "    \n",
    "    return train_result, test_result, eval_time"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80381702",
   "metadata": {
    "papermill": {
     "duration": 0.008657,
     "end_time": "2024-10-18T19:08:18.373096",
     "exception": false,
     "start_time": "2024-10-18T19:08:18.364439",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# AUDIO VISUALIZATION\n",
    "* audio_inspector works to visualize the audio data in time-amplitude representation, linear-freq power and mel-freq power representations\n",
    "* audio_inspector also plays the audio files, from the data_path in the data path format 'foldX/111111-1-1-1.wav' == 'foldX/xxxxxx-x-x-x.wav'\n",
    "* the function has a stand-alone augmentation part using the main_effect() function to have modifications visualized\n",
    "* augmentation_list_format = **[noise_flag,  crop_freq_time_flag,  noise_factor,  shift_factor,  pitch_factor,  speed_rate,  time_or_freq_crop_factor,  reflection_factor,  crop_double_mask]**\n",
    "* crop_double_mask parameter is taken within the augmentation input 'aug', works as mentioned in the previous parser() function part\n",
    "* mel-spectrogram is taken into consideration if there is a data_crop, however can be considered in general, as well \n",
    "* plot_waveform() function takes in the directly obtained time data with the sampling rate either desired or obtained from librosa.load()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "eeebb0eb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-18T19:08:18.391900Z",
     "iopub.status.busy": "2024-10-18T19:08:18.391635Z",
     "iopub.status.idle": "2024-10-18T19:08:18.410318Z",
     "shell.execute_reply": "2024-10-18T19:08:18.409559Z"
    },
    "papermill": {
     "duration": 0.030417,
     "end_time": "2024-10-18T19:08:18.412186",
     "exception": false,
     "start_time": "2024-10-18T19:08:18.381769",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# augmentation_list_format = [noise_flag, crop_freq_time_flag, noise_factor, shift_factor, pitch_factor, speed_rate, time_or_freq_crop_factor, reflection_factor, crop_double_mask]\n",
    "# crop_double_mask==1 gives data_crop both in the time domain and the frequency domain if crop_freq_time_flag==1 or only time domain data crop\n",
    "# crop_double_mask==0 gives data_crop as per crop_freq_time_flag\n",
    "\n",
    "def audio_inspector(data_path, aug=[0, 1, 0, 0, 0, 1, 0, 0, 0]):\n",
    "    \"\"\"\n",
    "    gives the output to mel-freq and linear-freq power spectrograms\n",
    "    also gives the audio put in, enabling the user to play the audio\n",
    "    inspects the audio and the linear-spectogram of the audio\n",
    "    before and after the augmentation to observe the possible corruption\n",
    "    \"\"\"\n",
    "    \n",
    "    #data_path format -- 'foldX/111111-1-1-1.wav' == 'foldX/xxxxxx-x-x-x.wav'\n",
    "    data_path = '../input/urbansound8k/' + data_path\n",
    "    audio, sample_rate = librosa.load(data_path)\n",
    "    [noise_flag, crop_freq_time_flag, noise_factor, shift_factor, pitch_factor, speed_rate, time_or_freq_crop_factor, reflection_factor, crop_double_mask] = aug[:]\n",
    "    spectrogram_type = 'linear' if time_or_freq_crop_factor==0 else 'mel'\n",
    "\n",
    "    # visualization for the clear audio\n",
    "    plt.figure(figsize=(25, 15))\n",
    "    \n",
    "    if spectrogram_type == 'mel':\n",
    "        audio_spec_noaug = librosa.feature.melspectrogram(y=audio, sr=sample_rate)\n",
    "        audio_spec_noaug = librosa.power_to_db(audio_spec_noaug, ref=np.max)\n",
    "        plt.subplot(4,2,1)\n",
    "        librosa.display.specshow(audio_spec_noaug, y_axis=spectrogram_type)\n",
    "        plt.colorbar(format='%+2.0f dB')\n",
    "        plt.title('Mel-freq Power Spectogram for the Data /wo Aug') \n",
    "    elif spectrogram_type == 'linear':\n",
    "        audio_spec_noaug = librosa.amplitude_to_db(librosa.stft(audio), np.max) \n",
    "        plt.subplot(4,2,1)\n",
    "        librosa.display.specshow(audio_spec_noaug, y_axis=spectrogram_type)\n",
    "        plt.colorbar(format='%+2.0f dB')\n",
    "        plt.title('Linear-freq Power Spectogram for the Data /wo Aug')\n",
    "\n",
    "    display(Audio(data=audio, rate=sample_rate))\n",
    "    plot_waveform(data=audio, sample_rate=sample_rate)\n",
    "\n",
    "    #augmentation for visualization\n",
    "    # augmentation_list_format = [noise_flag, crop_freq_time_flag, noise_factor, shift_factor, pitch_factor, speed_rate, time_or_freq_crop_factor, reflection_factor]\n",
    "    audio_aug = main_effect(audio, sample_rate=sample_rate, noise_factor=noise_flag,\n",
    "                            crop_factor=time_or_freq_crop_factor*crop_double_mask, snr_dbs=noise_factor, shift_factor=shift_factor,\n",
    "                            pitch_factor=pitch_factor, speed_rate=speed_rate, added_shift_factor=reflection_factor, decimal=True)\n",
    "\n",
    "    # visualization for the augmented data\n",
    "    plt.figure(figsize=(25, 15))\n",
    "    \n",
    "    if spectrogram_type == 'mel':\n",
    "        if crop_freq_time_flag:\n",
    "            audio_spec_aug = rand_cancel(librosa.feature.melspectrogram(y=audio, sr=sample_rate), crop_factor=time_or_freq_crop_factor) # data crop on mel-frequency domain\n",
    "            audio_spec_aug = librosa.power_to_db(audio_spec_aug, ref=np.max)\n",
    "            plt.subplot(4,2,1)\n",
    "            librosa.display.specshow(audio_spec_aug, y_axis='mel')\n",
    "            plt.colorbar(format='%+2.0f dB')\n",
    "            plt.title('Mel-freq Power Spectogram for the Data /w Aug')\n",
    "        else:\n",
    "            audio_aug = rand_cancel(data=audio_aug, crop_factor=time_or_freq_crop_factor) # data crop on time domain\n",
    "            audio_spec_aug = librosa.feature.melspectrogram(y=audio_aug, sr=sample_rate) # data crop on time domain\n",
    "            audio_spec_aug = librosa.power_to_db(audio_spec_aug, ref=np.max)\n",
    "            plt.subplot(4,2,1)\n",
    "            librosa.display.specshow(audio_spec_aug, y_axis='mel')\n",
    "            plt.colorbar(format='%+2.0f dB')\n",
    "            plt.title('Mel-freq Power Spectogram for the Data /w Aug')\n",
    "       \n",
    "    elif spectrogram_type == 'linear':\n",
    "        audio_spec_aug = librosa.amplitude_to_db(librosa.stft(audio_aug), np.max)\n",
    "        plt.subplot(4,2,1)\n",
    "        librosa.display.specshow(audio_spec_aug, y_axis='linear')\n",
    "        plt.colorbar(format='%+2.0f dB')\n",
    "        plt.title('Linear-freq Power Spectogram for the Data /w Aug')\n",
    "\n",
    "    display(Audio(data=audio_aug, rate=sample_rate))\n",
    "    plot_waveform(data=audio_aug, sample_rate=sample_rate)\n",
    "    \n",
    "    \n",
    "def plot_waveform(data, sample_rate):\n",
    "    \"\"\"\n",
    "    visualizes the waveform in time domain, as in amplitudes\n",
    "    meaningful together with the frequency spectrograms\n",
    "    \"\"\"\n",
    "    plt.figure(figsize=(14, 5))\n",
    "    librosa.display.waveplot(data, sr=sample_rate, alpha=0.7)\n",
    "    plt.title('Audio Waveform')\n",
    "    plt.xlabel('Time (s)')\n",
    "    plt.ylabel('Amplitude')\n",
    "    plt.grid(True)\n",
    "    plt.tight_layout()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89555aa0",
   "metadata": {
    "papermill": {
     "duration": 0.008351,
     "end_time": "2024-10-18T19:08:18.429194",
     "exception": false,
     "start_time": "2024-10-18T19:08:18.420843",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# MODEL TRAINER\n",
    "* takes in the main data to process through augmentation method(s) and also the original not-augmented training set\n",
    "* takes in the augmentation set to be passed into the parser() function and the model_name, to save the model onto the temp. memory\n",
    "* parser() processes the data with a single augmentation method, at this point, then the newly augmented data is concatenated with the original training data, duplication of the data size\n",
    "* then training and testing are performed \n",
    "* a model, which can be later called and used, is later returned besides accuracy values and processing time data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "64e7b8bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-18T19:08:18.447749Z",
     "iopub.status.busy": "2024-10-18T19:08:18.447464Z",
     "iopub.status.idle": "2024-10-18T19:08:18.456884Z",
     "shell.execute_reply": "2024-10-18T19:08:18.456005Z"
    },
    "papermill": {
     "duration": 0.021055,
     "end_time": "2024-10-18T19:08:18.458815",
     "exception": false,
     "start_time": "2024-10-18T19:08:18.437760",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# augmentation_list_format = [noise_flag,  crop_freq_time_flag,  noise_factor,  shift_factor,  pitch_factor,  speed_rate,  time_or_freq_crop_factor,  reflection_factor,  crop_double_mask]\n",
    "def model_trainer(data, model_name, aug_set, X_train_no_aug, Y_train_no_aug):\n",
    "    \"\"\"\n",
    "    takes in the dataFrame and the related training data from the not augmented model X_train_no_aug & Y_train_no_aug\n",
    "    also takes in a model_name and aug_set\n",
    "    gives out the model, besides the time and accuracy data of preprocessing, training and evaluation\n",
    "    \"\"\"\n",
    "    noise_flag = aug_set[0]\n",
    "    crop_freq_time_flag = aug_set[1]\n",
    "    crop_double_mask = aug_set[-1]\n",
    "    [noise_factor, shift_factor, pitch_factor, speed_rate, time_or_freq_crop_factor, reflection_factor] = aug_set[2:len(aug_set)-1]\n",
    "            \n",
    "    feature, label, start, end = parser(data, noise_factor=noise_flag, crop_freq=crop_freq_time_flag, snr_dbs=noise_factor, crop_double_mask=crop_double_mask,\n",
    "                                                    shift_factor=shift_factor, pitch_factor=pitch_factor, speed_rate=speed_rate,\n",
    "                                                    crop_factor=time_or_freq_crop_factor, added_shift_factor=reflection_factor, decimal = True, aug = True)\n",
    "    \n",
    "    X_train_aug, X_test_aug, Y_train_aug, Y_test_aug = prepare_data(feature, label)\n",
    "\n",
    "    #extension for the training, p.s. validation should stay the same as it was in the no augmentation case for comparison\n",
    "    X_train = np.concatenate((X_train_no_aug, X_train_aug), axis=0)\n",
    "    Y_train = np.concatenate((Y_train_no_aug, Y_train_aug), axis=0)\n",
    "\n",
    "    model_aug, train_time_aug = train_model(train = True, model_name = model_name, X_test = X_test, X_train = X_train, Y_test = Y_test, Y_train = Y_train, epochs = 90)\n",
    "    train_result_aug, test_result_aug, eval_time_aug = train_test_accuracy(model_aug, X_train, X_test, Y_train, Y_test)\n",
    "    dataprep_aug = (end-start)/60\n",
    "\n",
    "    print(dataprep_aug)\n",
    "    print(train_time_aug)\n",
    "    print(eval_time_aug)\n",
    "    \n",
    "    return [model_aug, test_result_aug, train_result_aug, dataprep_aug, train_time_aug, eval_time_aug]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "179ca051",
   "metadata": {
    "papermill": {
     "duration": 0.008558,
     "end_time": "2024-10-18T19:08:18.476113",
     "exception": false,
     "start_time": "2024-10-18T19:08:18.467555",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "* original data reading, not-augmented model training and testing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "fc24973c",
   "metadata": {
    "collapsed": true,
    "execution": {
     "iopub.execute_input": "2024-10-18T19:08:18.494790Z",
     "iopub.status.busy": "2024-10-18T19:08:18.494505Z",
     "iopub.status.idle": "2024-10-18T19:27:38.474752Z",
     "shell.execute_reply": "2024-10-18T19:27:38.473757Z"
    },
    "jupyter": {
     "outputs_hidden": true
    },
    "papermill": {
     "duration": 1159.991778,
     "end_time": "2024-10-18T19:27:38.476754",
     "exception": false,
     "start_time": "2024-10-18T19:08:18.484976",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=2048 is too large for input signal of length=1323\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=2048 is too large for input signal of length=1103\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=2048 is too large for input signal of length=1523\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "90\n",
      "Epoch 1/90\n",
      "\u001b[1m 72/219\u001b[0m \u001b[32m━━━━━━\u001b[0m\u001b[37m━━━━━━━━━━━━━━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.3241 - loss: 2.0401"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1729279599.663724      82 device_compiler.h:186] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 18ms/step - accuracy: 0.4066 - loss: 1.7648 - val_accuracy: 0.5268 - val_loss: 1.4131\n",
      "Epoch 2/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.5840 - loss: 1.2149 - val_accuracy: 0.6106 - val_loss: 1.1583\n",
      "Epoch 3/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.6686 - loss: 0.9713 - val_accuracy: 0.6551 - val_loss: 1.0685\n",
      "Epoch 4/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.7088 - loss: 0.8545 - val_accuracy: 0.6812 - val_loss: 0.9838\n",
      "Epoch 5/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.7436 - loss: 0.7537 - val_accuracy: 0.7064 - val_loss: 0.9193\n",
      "Epoch 6/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.7718 - loss: 0.7242 - val_accuracy: 0.7059 - val_loss: 0.9641\n",
      "Epoch 7/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.7875 - loss: 0.6516 - val_accuracy: 0.7160 - val_loss: 0.9615\n",
      "Epoch 8/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.7983 - loss: 0.5935 - val_accuracy: 0.7284 - val_loss: 0.8728\n",
      "Epoch 9/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8293 - loss: 0.5157 - val_accuracy: 0.7641 - val_loss: 0.8142\n",
      "Epoch 10/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.8499 - loss: 0.4621 - val_accuracy: 0.7719 - val_loss: 0.8147\n",
      "Epoch 11/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8420 - loss: 0.4703 - val_accuracy: 0.7820 - val_loss: 0.7446\n",
      "Epoch 12/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.8718 - loss: 0.3941 - val_accuracy: 0.7755 - val_loss: 0.8030\n",
      "Epoch 13/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8607 - loss: 0.4041 - val_accuracy: 0.7554 - val_loss: 0.8896\n",
      "Epoch 14/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8750 - loss: 0.3705 - val_accuracy: 0.7948 - val_loss: 0.7094\n",
      "Epoch 15/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.8942 - loss: 0.3211 - val_accuracy: 0.7568 - val_loss: 0.8707\n",
      "Epoch 16/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.8776 - loss: 0.3560 - val_accuracy: 0.7705 - val_loss: 0.8494\n",
      "Epoch 17/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.8943 - loss: 0.3113 - val_accuracy: 0.7870 - val_loss: 0.8204\n",
      "Epoch 18/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9049 - loss: 0.3020 - val_accuracy: 0.8021 - val_loss: 0.7528\n",
      "Epoch 19/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9070 - loss: 0.2748 - val_accuracy: 0.7911 - val_loss: 0.8417\n",
      "Epoch 20/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9098 - loss: 0.2664 - val_accuracy: 0.8039 - val_loss: 0.7582\n",
      "Epoch 21/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9040 - loss: 0.2733 - val_accuracy: 0.8250 - val_loss: 0.6794\n",
      "Epoch 22/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9197 - loss: 0.2364 - val_accuracy: 0.8236 - val_loss: 0.7172\n",
      "Epoch 23/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9247 - loss: 0.2265 - val_accuracy: 0.8241 - val_loss: 0.6814\n",
      "Epoch 24/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9303 - loss: 0.2072 - val_accuracy: 0.8282 - val_loss: 0.7085\n",
      "Epoch 25/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9364 - loss: 0.1964 - val_accuracy: 0.8241 - val_loss: 0.7658\n",
      "Epoch 26/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9370 - loss: 0.1888 - val_accuracy: 0.8287 - val_loss: 0.7435\n",
      "Epoch 27/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9282 - loss: 0.2085 - val_accuracy: 0.8360 - val_loss: 0.7098\n",
      "Epoch 28/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9455 - loss: 0.1663 - val_accuracy: 0.8278 - val_loss: 0.7553\n",
      "Epoch 29/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9436 - loss: 0.1775 - val_accuracy: 0.8351 - val_loss: 0.7086\n",
      "Epoch 30/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9387 - loss: 0.1811 - val_accuracy: 0.8388 - val_loss: 0.6751\n",
      "Epoch 31/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9497 - loss: 0.1498 - val_accuracy: 0.8149 - val_loss: 0.9058\n",
      "Epoch 32/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9518 - loss: 0.1430 - val_accuracy: 0.8282 - val_loss: 0.8091\n",
      "Epoch 33/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9422 - loss: 0.1734 - val_accuracy: 0.8406 - val_loss: 0.8224\n",
      "Epoch 34/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9532 - loss: 0.1478 - val_accuracy: 0.8305 - val_loss: 0.7501\n",
      "Epoch 35/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9497 - loss: 0.1668 - val_accuracy: 0.8374 - val_loss: 0.7191\n",
      "Epoch 36/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9581 - loss: 0.1331 - val_accuracy: 0.8447 - val_loss: 0.7286\n",
      "Epoch 37/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9470 - loss: 0.1523 - val_accuracy: 0.8397 - val_loss: 0.7422\n",
      "Epoch 38/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9627 - loss: 0.1082 - val_accuracy: 0.8470 - val_loss: 0.6912\n",
      "Epoch 39/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9616 - loss: 0.1151 - val_accuracy: 0.8447 - val_loss: 0.7377\n",
      "Epoch 40/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9622 - loss: 0.1148 - val_accuracy: 0.8484 - val_loss: 0.7715\n",
      "Epoch 41/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9662 - loss: 0.1058 - val_accuracy: 0.8452 - val_loss: 0.7736\n",
      "Epoch 42/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9633 - loss: 0.1078 - val_accuracy: 0.8534 - val_loss: 0.7137\n",
      "Epoch 43/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9631 - loss: 0.1022 - val_accuracy: 0.8360 - val_loss: 0.8369\n",
      "Epoch 44/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9580 - loss: 0.1217 - val_accuracy: 0.8420 - val_loss: 0.7543\n",
      "Epoch 45/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9587 - loss: 0.1139 - val_accuracy: 0.8392 - val_loss: 0.8164\n",
      "Epoch 46/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9698 - loss: 0.0886 - val_accuracy: 0.8461 - val_loss: 0.7900\n",
      "Epoch 47/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9686 - loss: 0.0881 - val_accuracy: 0.8511 - val_loss: 0.8001\n",
      "Epoch 48/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9718 - loss: 0.0923 - val_accuracy: 0.8548 - val_loss: 0.7745\n",
      "Epoch 49/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9716 - loss: 0.0841 - val_accuracy: 0.8516 - val_loss: 0.7760\n",
      "Epoch 50/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9724 - loss: 0.0844 - val_accuracy: 0.8420 - val_loss: 0.8131\n",
      "Epoch 51/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9693 - loss: 0.0884 - val_accuracy: 0.8548 - val_loss: 0.7661\n",
      "Epoch 52/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9750 - loss: 0.0854 - val_accuracy: 0.8410 - val_loss: 0.8177\n",
      "Epoch 53/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9687 - loss: 0.0960 - val_accuracy: 0.8406 - val_loss: 0.8898\n",
      "Epoch 54/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9764 - loss: 0.0698 - val_accuracy: 0.8639 - val_loss: 0.7275\n",
      "Epoch 55/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9786 - loss: 0.0719 - val_accuracy: 0.8566 - val_loss: 0.7890\n",
      "Epoch 56/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9769 - loss: 0.0737 - val_accuracy: 0.8543 - val_loss: 0.7624\n",
      "Epoch 57/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9744 - loss: 0.0743 - val_accuracy: 0.8621 - val_loss: 0.7560\n",
      "Epoch 58/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9709 - loss: 0.0918 - val_accuracy: 0.8543 - val_loss: 0.7901\n",
      "Epoch 59/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9765 - loss: 0.0723 - val_accuracy: 0.8621 - val_loss: 0.7573\n",
      "Epoch 60/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9779 - loss: 0.0656 - val_accuracy: 0.8598 - val_loss: 0.7637\n",
      "Epoch 61/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9770 - loss: 0.0719 - val_accuracy: 0.8456 - val_loss: 0.9126\n",
      "Epoch 62/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9670 - loss: 0.0921 - val_accuracy: 0.8465 - val_loss: 0.8619\n",
      "Epoch 63/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9672 - loss: 0.0989 - val_accuracy: 0.8612 - val_loss: 0.7995\n",
      "Epoch 64/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9771 - loss: 0.0711 - val_accuracy: 0.8658 - val_loss: 0.7681\n",
      "Epoch 65/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9778 - loss: 0.0628 - val_accuracy: 0.8653 - val_loss: 0.7804\n",
      "Epoch 66/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9793 - loss: 0.0590 - val_accuracy: 0.8644 - val_loss: 0.7581\n",
      "Epoch 67/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9807 - loss: 0.0644 - val_accuracy: 0.8575 - val_loss: 0.8226\n",
      "Epoch 68/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9783 - loss: 0.0606 - val_accuracy: 0.8630 - val_loss: 0.8097\n",
      "Epoch 69/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9667 - loss: 0.0964 - val_accuracy: 0.8543 - val_loss: 0.9083\n",
      "Epoch 70/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9762 - loss: 0.0684 - val_accuracy: 0.8562 - val_loss: 0.7871\n",
      "Epoch 71/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9803 - loss: 0.0550 - val_accuracy: 0.8612 - val_loss: 0.8239\n",
      "Epoch 72/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9854 - loss: 0.0418 - val_accuracy: 0.8543 - val_loss: 0.8761\n",
      "Epoch 73/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9758 - loss: 0.0583 - val_accuracy: 0.8644 - val_loss: 0.7978\n",
      "Epoch 74/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9834 - loss: 0.0493 - val_accuracy: 0.8708 - val_loss: 0.7867\n",
      "Epoch 75/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9836 - loss: 0.0417 - val_accuracy: 0.8694 - val_loss: 0.7960\n",
      "Epoch 76/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9883 - loss: 0.0358 - val_accuracy: 0.8566 - val_loss: 0.8121\n",
      "Epoch 77/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9808 - loss: 0.0631 - val_accuracy: 0.8644 - val_loss: 0.8604\n",
      "Epoch 78/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9829 - loss: 0.0505 - val_accuracy: 0.8566 - val_loss: 0.8826\n",
      "Epoch 79/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9748 - loss: 0.0777 - val_accuracy: 0.8452 - val_loss: 0.9326\n",
      "Epoch 80/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9791 - loss: 0.0605 - val_accuracy: 0.8635 - val_loss: 0.8229\n",
      "Epoch 81/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9817 - loss: 0.0573 - val_accuracy: 0.8658 - val_loss: 0.8083\n",
      "Epoch 82/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9828 - loss: 0.0538 - val_accuracy: 0.8635 - val_loss: 0.8323\n",
      "Epoch 83/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9820 - loss: 0.0465 - val_accuracy: 0.8635 - val_loss: 0.8119\n",
      "Epoch 84/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9820 - loss: 0.0568 - val_accuracy: 0.8607 - val_loss: 0.8022\n",
      "Epoch 85/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9815 - loss: 0.0540 - val_accuracy: 0.8539 - val_loss: 0.9272\n",
      "Epoch 86/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9724 - loss: 0.0907 - val_accuracy: 0.8594 - val_loss: 0.8588\n",
      "Epoch 87/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9824 - loss: 0.0476 - val_accuracy: 0.8594 - val_loss: 0.9413\n",
      "Epoch 88/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9858 - loss: 0.0417 - val_accuracy: 0.8598 - val_loss: 0.9171\n",
      "Epoch 89/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9849 - loss: 0.0485 - val_accuracy: 0.8589 - val_loss: 0.8378\n",
      "Epoch 90/90\n",
      "\u001b[1m219/219\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9827 - loss: 0.0480 - val_accuracy: 0.8552 - val_loss: 0.9354\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8556 - loss: 0.9033\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9921 - loss: 0.0257\n",
      "18.236409290631613\n",
      "1.042875099182129\n",
      "0.052649672826131186\n"
     ]
    }
   ],
   "source": [
    "# read the original dataset\n",
    "df = pd.read_csv(\"/kaggle/input/urbansound8k/UrbanSound8K.csv\")\n",
    "\n",
    "# no augmentation, base model\n",
    "feature, label, start, end = parser(df, noise_factor=0, crop_factor=0, shift_factor=0, pitch_factor=0, speed_rate=1, decimal = True, aug = False)\n",
    "X_train, X_test, Y_train, Y_test = prepare_data(feature, label)\n",
    "\n",
    "model_noaug, train_time_noaug = train_model(train = True, model_name = \"Original_Model\", X_test = X_test, X_train = X_train, Y_test = Y_test, Y_train = Y_train, epochs = 90)\n",
    "train_result_noaug, test_result_noaug, eval_time_noaug = train_test_accuracy(model_noaug, X_train, X_test, Y_train, Y_test)\n",
    "time_elapsed_no_aug = (end-start)/60\n",
    "\n",
    "print(time_elapsed_no_aug)\n",
    "print(train_time_noaug)\n",
    "print(eval_time_noaug)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e2e4ebc8",
   "metadata": {
    "papermill": {
     "duration": 0.087929,
     "end_time": "2024-10-18T19:27:38.698540",
     "exception": false,
     "start_time": "2024-10-18T19:27:38.610611",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# TRAINING MODELS WITH THE AUGMENTED DATASETS, SINGLE AUGMENTATION\n",
    "* a dictionary for model training is created in which we have the augmentation methods, and augmentation value lists with only one augmentation would be active\n",
    "* a for loop to go through these augmentation methods, which would give out the model validation and training properties in a list that can be later tabulated"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "36ad624c",
   "metadata": {
    "collapsed": true,
    "execution": {
     "iopub.execute_input": "2024-10-18T19:27:38.876766Z",
     "iopub.status.busy": "2024-10-18T19:27:38.875519Z",
     "iopub.status.idle": "2024-10-18T21:47:44.587515Z",
     "shell.execute_reply": "2024-10-18T21:47:44.586441Z"
    },
    "jupyter": {
     "outputs_hidden": true
    },
    "papermill": {
     "duration": 8405.802886,
     "end_time": "2024-10-18T21:47:44.589859",
     "exception": false,
     "start_time": "2024-10-18T19:27:38.786973",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "90\n",
      "Epoch 1/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 12ms/step - accuracy: 0.4360 - loss: 1.6514 - val_accuracy: 0.6148 - val_loss: 1.1358\n",
      "Epoch 2/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.6637 - loss: 1.0223 - val_accuracy: 0.6844 - val_loss: 0.9293\n",
      "Epoch 3/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.7393 - loss: 0.7939 - val_accuracy: 0.7142 - val_loss: 0.9106\n",
      "Epoch 4/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.7632 - loss: 0.7036 - val_accuracy: 0.7233 - val_loss: 0.8725\n",
      "Epoch 5/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8072 - loss: 0.5887 - val_accuracy: 0.7728 - val_loss: 0.7577\n",
      "Epoch 6/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8314 - loss: 0.5248 - val_accuracy: 0.7650 - val_loss: 0.8067\n",
      "Epoch 7/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8481 - loss: 0.4571 - val_accuracy: 0.7911 - val_loss: 0.7028\n",
      "Epoch 8/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8528 - loss: 0.4246 - val_accuracy: 0.7943 - val_loss: 0.7031\n",
      "Epoch 9/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8785 - loss: 0.3780 - val_accuracy: 0.8140 - val_loss: 0.6660\n",
      "Epoch 10/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8854 - loss: 0.3436 - val_accuracy: 0.8191 - val_loss: 0.6639\n",
      "Epoch 11/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8972 - loss: 0.3160 - val_accuracy: 0.7975 - val_loss: 0.6923\n",
      "Epoch 12/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9091 - loss: 0.2800 - val_accuracy: 0.8264 - val_loss: 0.6509\n",
      "Epoch 13/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9165 - loss: 0.2557 - val_accuracy: 0.8049 - val_loss: 0.7468\n",
      "Epoch 14/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9220 - loss: 0.2325 - val_accuracy: 0.8168 - val_loss: 0.7298\n",
      "Epoch 15/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9260 - loss: 0.2178 - val_accuracy: 0.8246 - val_loss: 0.6975\n",
      "Epoch 16/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9276 - loss: 0.2141 - val_accuracy: 0.8328 - val_loss: 0.7344\n",
      "Epoch 17/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9333 - loss: 0.2013 - val_accuracy: 0.8296 - val_loss: 0.7572\n",
      "Epoch 18/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9424 - loss: 0.1762 - val_accuracy: 0.8369 - val_loss: 0.6895\n",
      "Epoch 19/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9445 - loss: 0.1698 - val_accuracy: 0.8255 - val_loss: 0.7616\n",
      "Epoch 20/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9484 - loss: 0.1527 - val_accuracy: 0.8323 - val_loss: 0.7830\n",
      "Epoch 21/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9457 - loss: 0.1643 - val_accuracy: 0.8369 - val_loss: 0.7312\n",
      "Epoch 22/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9591 - loss: 0.1244 - val_accuracy: 0.8424 - val_loss: 0.7024\n",
      "Epoch 23/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9617 - loss: 0.1196 - val_accuracy: 0.8433 - val_loss: 0.7123\n",
      "Epoch 24/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9623 - loss: 0.1123 - val_accuracy: 0.8447 - val_loss: 0.7691\n",
      "Epoch 25/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9511 - loss: 0.1437 - val_accuracy: 0.8525 - val_loss: 0.7272\n",
      "Epoch 26/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9616 - loss: 0.1198 - val_accuracy: 0.8530 - val_loss: 0.7116\n",
      "Epoch 27/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9692 - loss: 0.0954 - val_accuracy: 0.8562 - val_loss: 0.7191\n",
      "Epoch 28/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9644 - loss: 0.1038 - val_accuracy: 0.8479 - val_loss: 0.7859\n",
      "Epoch 29/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9663 - loss: 0.1017 - val_accuracy: 0.8470 - val_loss: 0.7921\n",
      "Epoch 30/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9681 - loss: 0.0941 - val_accuracy: 0.8470 - val_loss: 0.7829\n",
      "Epoch 31/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9657 - loss: 0.0998 - val_accuracy: 0.8507 - val_loss: 0.7822\n",
      "Epoch 32/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9745 - loss: 0.0737 - val_accuracy: 0.8548 - val_loss: 0.7896\n",
      "Epoch 33/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9730 - loss: 0.0803 - val_accuracy: 0.8530 - val_loss: 0.7211\n",
      "Epoch 34/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9734 - loss: 0.0800 - val_accuracy: 0.8534 - val_loss: 0.7621\n",
      "Epoch 35/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9785 - loss: 0.0634 - val_accuracy: 0.8607 - val_loss: 0.7351\n",
      "Epoch 36/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9746 - loss: 0.0697 - val_accuracy: 0.8497 - val_loss: 0.8284\n",
      "Epoch 37/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9769 - loss: 0.0683 - val_accuracy: 0.8520 - val_loss: 0.7880\n",
      "Epoch 38/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9729 - loss: 0.0816 - val_accuracy: 0.8507 - val_loss: 0.8576\n",
      "Epoch 39/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9739 - loss: 0.0800 - val_accuracy: 0.8617 - val_loss: 0.7792\n",
      "Epoch 40/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9789 - loss: 0.0603 - val_accuracy: 0.8497 - val_loss: 0.8505\n",
      "Epoch 41/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9706 - loss: 0.0878 - val_accuracy: 0.8562 - val_loss: 0.8196\n",
      "Epoch 42/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9776 - loss: 0.0607 - val_accuracy: 0.8589 - val_loss: 0.8268\n",
      "Epoch 43/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9800 - loss: 0.0629 - val_accuracy: 0.8607 - val_loss: 0.8042\n",
      "Epoch 44/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9782 - loss: 0.0596 - val_accuracy: 0.8438 - val_loss: 0.9149\n",
      "Epoch 45/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9714 - loss: 0.0824 - val_accuracy: 0.8598 - val_loss: 0.8512\n",
      "Epoch 46/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9817 - loss: 0.0582 - val_accuracy: 0.8644 - val_loss: 0.8359\n",
      "Epoch 47/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9811 - loss: 0.0556 - val_accuracy: 0.8580 - val_loss: 0.8287\n",
      "Epoch 48/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9850 - loss: 0.0450 - val_accuracy: 0.8530 - val_loss: 0.8961\n",
      "Epoch 49/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9812 - loss: 0.0586 - val_accuracy: 0.8488 - val_loss: 0.8750\n",
      "Epoch 50/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9836 - loss: 0.0468 - val_accuracy: 0.8571 - val_loss: 0.9047\n",
      "Epoch 51/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9774 - loss: 0.0657 - val_accuracy: 0.8493 - val_loss: 0.9221\n",
      "Epoch 52/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9843 - loss: 0.0491 - val_accuracy: 0.8621 - val_loss: 0.8504\n",
      "Epoch 53/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9807 - loss: 0.0582 - val_accuracy: 0.8484 - val_loss: 0.8913\n",
      "Epoch 54/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9842 - loss: 0.0481 - val_accuracy: 0.8520 - val_loss: 0.9176\n",
      "Epoch 55/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9876 - loss: 0.0399 - val_accuracy: 0.8658 - val_loss: 0.8771\n",
      "Epoch 56/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9857 - loss: 0.0423 - val_accuracy: 0.8571 - val_loss: 0.9230\n",
      "Epoch 57/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9838 - loss: 0.0535 - val_accuracy: 0.8607 - val_loss: 0.8963\n",
      "Epoch 58/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9837 - loss: 0.0503 - val_accuracy: 0.8603 - val_loss: 0.9289\n",
      "Epoch 59/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9817 - loss: 0.0560 - val_accuracy: 0.8562 - val_loss: 0.9079\n",
      "Epoch 60/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9846 - loss: 0.0471 - val_accuracy: 0.8603 - val_loss: 0.9499\n",
      "Epoch 61/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9859 - loss: 0.0457 - val_accuracy: 0.8575 - val_loss: 0.8736\n",
      "Epoch 62/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9865 - loss: 0.0412 - val_accuracy: 0.8525 - val_loss: 0.9231\n",
      "Epoch 63/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9834 - loss: 0.0471 - val_accuracy: 0.8658 - val_loss: 0.9255\n",
      "Epoch 64/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9858 - loss: 0.0479 - val_accuracy: 0.8644 - val_loss: 0.9082\n",
      "Epoch 65/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9845 - loss: 0.0504 - val_accuracy: 0.8552 - val_loss: 0.9765\n",
      "Epoch 66/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9828 - loss: 0.0475 - val_accuracy: 0.8676 - val_loss: 0.8839\n",
      "Epoch 67/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9856 - loss: 0.0417 - val_accuracy: 0.8612 - val_loss: 0.9255\n",
      "Epoch 68/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9830 - loss: 0.0492 - val_accuracy: 0.8589 - val_loss: 0.9213\n",
      "Epoch 69/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9850 - loss: 0.0455 - val_accuracy: 0.8594 - val_loss: 0.9749\n",
      "Epoch 70/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9849 - loss: 0.0500 - val_accuracy: 0.8562 - val_loss: 0.9829\n",
      "Epoch 71/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9845 - loss: 0.0458 - val_accuracy: 0.8607 - val_loss: 0.9078\n",
      "Epoch 72/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9859 - loss: 0.0437 - val_accuracy: 0.8548 - val_loss: 0.9346\n",
      "Epoch 73/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9872 - loss: 0.0419 - val_accuracy: 0.8612 - val_loss: 0.9606\n",
      "Epoch 74/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9911 - loss: 0.0273 - val_accuracy: 0.8653 - val_loss: 0.9298\n",
      "Epoch 75/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9907 - loss: 0.0344 - val_accuracy: 0.8612 - val_loss: 0.9654\n",
      "Epoch 76/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9848 - loss: 0.0457 - val_accuracy: 0.8617 - val_loss: 0.9177\n",
      "Epoch 77/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9831 - loss: 0.0478 - val_accuracy: 0.8484 - val_loss: 1.0619\n",
      "Epoch 78/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9840 - loss: 0.0522 - val_accuracy: 0.8571 - val_loss: 0.9721\n",
      "Epoch 79/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9922 - loss: 0.0276 - val_accuracy: 0.8580 - val_loss: 0.8814\n",
      "Epoch 80/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9850 - loss: 0.0478 - val_accuracy: 0.8493 - val_loss: 1.0719\n",
      "Epoch 81/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9826 - loss: 0.0540 - val_accuracy: 0.8626 - val_loss: 0.9968\n",
      "Epoch 82/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9871 - loss: 0.0374 - val_accuracy: 0.8594 - val_loss: 0.9616\n",
      "Epoch 83/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9901 - loss: 0.0327 - val_accuracy: 0.8672 - val_loss: 0.9349\n",
      "Epoch 84/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9854 - loss: 0.0390 - val_accuracy: 0.8667 - val_loss: 0.9807\n",
      "Epoch 85/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9881 - loss: 0.0357 - val_accuracy: 0.8617 - val_loss: 0.9510\n",
      "Epoch 86/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9896 - loss: 0.0333 - val_accuracy: 0.8740 - val_loss: 0.9329\n",
      "Epoch 87/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9930 - loss: 0.0253 - val_accuracy: 0.8594 - val_loss: 0.9869\n",
      "Epoch 88/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9838 - loss: 0.0537 - val_accuracy: 0.8644 - val_loss: 1.0140\n",
      "Epoch 89/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9846 - loss: 0.0482 - val_accuracy: 0.8603 - val_loss: 0.9627\n",
      "Epoch 90/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9857 - loss: 0.0456 - val_accuracy: 0.8575 - val_loss: 1.0150\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.8634 - loss: 0.9075\n",
      "\u001b[1m410/410\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step\n",
      "\u001b[1m410/410\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9960 - loss: 0.0174\n",
      "15.994467584292094\n",
      "1.7158169984817504\n",
      "0.060438259442647295\n",
      "90\n",
      "Epoch 1/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 11ms/step - accuracy: 0.4752 - loss: 1.5645 - val_accuracy: 0.5703 - val_loss: 1.2888\n",
      "Epoch 2/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.6894 - loss: 0.9235 - val_accuracy: 0.6798 - val_loss: 0.9968\n",
      "Epoch 3/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.7613 - loss: 0.7230 - val_accuracy: 0.7197 - val_loss: 0.9015\n",
      "Epoch 4/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8076 - loss: 0.5948 - val_accuracy: 0.7471 - val_loss: 0.8596\n",
      "Epoch 5/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8365 - loss: 0.5093 - val_accuracy: 0.7719 - val_loss: 0.8515\n",
      "Epoch 6/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8580 - loss: 0.4345 - val_accuracy: 0.7920 - val_loss: 0.7674\n",
      "Epoch 7/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8705 - loss: 0.3915 - val_accuracy: 0.7939 - val_loss: 0.7366\n",
      "Epoch 8/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8785 - loss: 0.3663 - val_accuracy: 0.8035 - val_loss: 0.7871\n",
      "Epoch 9/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8941 - loss: 0.3248 - val_accuracy: 0.8081 - val_loss: 0.8063\n",
      "Epoch 10/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9039 - loss: 0.2905 - val_accuracy: 0.8268 - val_loss: 0.7475\n",
      "Epoch 11/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9210 - loss: 0.2475 - val_accuracy: 0.8122 - val_loss: 0.8156\n",
      "Epoch 12/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9139 - loss: 0.2554 - val_accuracy: 0.8282 - val_loss: 0.7776\n",
      "Epoch 13/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9337 - loss: 0.2066 - val_accuracy: 0.8232 - val_loss: 0.8041\n",
      "Epoch 14/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9337 - loss: 0.1923 - val_accuracy: 0.8264 - val_loss: 0.7343\n",
      "Epoch 15/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9382 - loss: 0.1913 - val_accuracy: 0.8401 - val_loss: 0.7709\n",
      "Epoch 16/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9496 - loss: 0.1579 - val_accuracy: 0.8470 - val_loss: 0.7033\n",
      "Epoch 17/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9520 - loss: 0.1430 - val_accuracy: 0.8392 - val_loss: 0.7483\n",
      "Epoch 18/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9477 - loss: 0.1559 - val_accuracy: 0.8337 - val_loss: 0.8269\n",
      "Epoch 19/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9503 - loss: 0.1448 - val_accuracy: 0.8424 - val_loss: 0.8211\n",
      "Epoch 20/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9597 - loss: 0.1214 - val_accuracy: 0.8502 - val_loss: 0.7647\n",
      "Epoch 21/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9656 - loss: 0.1034 - val_accuracy: 0.8355 - val_loss: 0.8002\n",
      "Epoch 22/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9554 - loss: 0.1277 - val_accuracy: 0.8369 - val_loss: 0.8373\n",
      "Epoch 23/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9629 - loss: 0.1055 - val_accuracy: 0.8511 - val_loss: 0.7751\n",
      "Epoch 24/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9675 - loss: 0.0981 - val_accuracy: 0.8475 - val_loss: 0.8429\n",
      "Epoch 25/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9622 - loss: 0.1103 - val_accuracy: 0.8378 - val_loss: 0.8511\n",
      "Epoch 26/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9713 - loss: 0.0900 - val_accuracy: 0.8589 - val_loss: 0.7359\n",
      "Epoch 27/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9761 - loss: 0.0751 - val_accuracy: 0.8507 - val_loss: 0.8623\n",
      "Epoch 28/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9734 - loss: 0.0755 - val_accuracy: 0.8566 - val_loss: 0.7746\n",
      "Epoch 29/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9702 - loss: 0.0940 - val_accuracy: 0.8493 - val_loss: 0.8578\n",
      "Epoch 30/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9761 - loss: 0.0684 - val_accuracy: 0.8484 - val_loss: 0.9085\n",
      "Epoch 31/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9750 - loss: 0.0787 - val_accuracy: 0.8589 - val_loss: 0.8496\n",
      "Epoch 32/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9775 - loss: 0.0710 - val_accuracy: 0.8218 - val_loss: 1.0570\n",
      "Epoch 33/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9689 - loss: 0.0965 - val_accuracy: 0.8429 - val_loss: 0.9303\n",
      "Epoch 34/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9757 - loss: 0.0772 - val_accuracy: 0.8575 - val_loss: 0.8735\n",
      "Epoch 35/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9773 - loss: 0.0665 - val_accuracy: 0.8410 - val_loss: 0.9188\n",
      "Epoch 36/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9786 - loss: 0.0745 - val_accuracy: 0.8626 - val_loss: 0.8763\n",
      "Epoch 37/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9789 - loss: 0.0638 - val_accuracy: 0.8543 - val_loss: 0.8443\n",
      "Epoch 38/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9769 - loss: 0.0663 - val_accuracy: 0.8635 - val_loss: 0.8164\n",
      "Epoch 39/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9876 - loss: 0.0433 - val_accuracy: 0.8589 - val_loss: 0.8809\n",
      "Epoch 40/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9831 - loss: 0.0554 - val_accuracy: 0.8461 - val_loss: 0.9040\n",
      "Epoch 41/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9771 - loss: 0.0804 - val_accuracy: 0.8525 - val_loss: 0.9089\n",
      "Epoch 42/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9805 - loss: 0.0588 - val_accuracy: 0.8470 - val_loss: 1.0319\n",
      "Epoch 43/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9798 - loss: 0.0603 - val_accuracy: 0.8626 - val_loss: 0.9297\n",
      "Epoch 44/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9829 - loss: 0.0509 - val_accuracy: 0.8530 - val_loss: 0.9350\n",
      "Epoch 45/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9823 - loss: 0.0528 - val_accuracy: 0.8507 - val_loss: 0.8698\n",
      "Epoch 46/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9837 - loss: 0.0525 - val_accuracy: 0.8612 - val_loss: 0.9246\n",
      "Epoch 47/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9832 - loss: 0.0492 - val_accuracy: 0.8626 - val_loss: 0.8695\n",
      "Epoch 48/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9842 - loss: 0.0505 - val_accuracy: 0.8694 - val_loss: 0.8952\n",
      "Epoch 49/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9845 - loss: 0.0467 - val_accuracy: 0.8598 - val_loss: 0.9227\n",
      "Epoch 50/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9835 - loss: 0.0532 - val_accuracy: 0.8493 - val_loss: 0.9907\n",
      "Epoch 51/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9825 - loss: 0.0525 - val_accuracy: 0.8575 - val_loss: 0.9175\n",
      "Epoch 52/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9852 - loss: 0.0486 - val_accuracy: 0.8580 - val_loss: 0.8723\n",
      "Epoch 53/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9868 - loss: 0.0399 - val_accuracy: 0.8539 - val_loss: 0.9657\n",
      "Epoch 54/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9843 - loss: 0.0486 - val_accuracy: 0.8649 - val_loss: 0.8900\n",
      "Epoch 55/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9879 - loss: 0.0387 - val_accuracy: 0.8612 - val_loss: 0.8982\n",
      "Epoch 56/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9882 - loss: 0.0347 - val_accuracy: 0.8630 - val_loss: 0.9970\n",
      "Epoch 57/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9863 - loss: 0.0429 - val_accuracy: 0.8552 - val_loss: 0.9952\n",
      "Epoch 58/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9809 - loss: 0.0548 - val_accuracy: 0.8612 - val_loss: 0.9584\n",
      "Epoch 59/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9855 - loss: 0.0479 - val_accuracy: 0.8603 - val_loss: 1.0005\n",
      "Epoch 60/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9849 - loss: 0.0432 - val_accuracy: 0.8681 - val_loss: 0.9321\n",
      "Epoch 61/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9863 - loss: 0.0459 - val_accuracy: 0.8630 - val_loss: 0.9040\n",
      "Epoch 62/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9917 - loss: 0.0268 - val_accuracy: 0.8649 - val_loss: 0.9266\n",
      "Epoch 63/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9882 - loss: 0.0393 - val_accuracy: 0.8685 - val_loss: 0.9555\n",
      "Epoch 64/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9874 - loss: 0.0376 - val_accuracy: 0.8626 - val_loss: 1.0005\n",
      "Epoch 65/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9870 - loss: 0.0391 - val_accuracy: 0.8639 - val_loss: 0.9554\n",
      "Epoch 66/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9855 - loss: 0.0470 - val_accuracy: 0.8594 - val_loss: 1.0189\n",
      "Epoch 67/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9878 - loss: 0.0364 - val_accuracy: 0.8511 - val_loss: 1.0752\n",
      "Epoch 68/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9869 - loss: 0.0425 - val_accuracy: 0.8543 - val_loss: 0.9798\n",
      "Epoch 69/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9887 - loss: 0.0344 - val_accuracy: 0.8704 - val_loss: 0.9941\n",
      "Epoch 70/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9902 - loss: 0.0322 - val_accuracy: 0.8639 - val_loss: 0.9642\n",
      "Epoch 71/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9878 - loss: 0.0402 - val_accuracy: 0.8704 - val_loss: 0.9657\n",
      "Epoch 72/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9872 - loss: 0.0398 - val_accuracy: 0.8694 - val_loss: 0.9894\n",
      "Epoch 73/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9913 - loss: 0.0268 - val_accuracy: 0.8644 - val_loss: 1.0154\n",
      "Epoch 74/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9857 - loss: 0.0417 - val_accuracy: 0.8649 - val_loss: 0.9527\n",
      "Epoch 75/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9900 - loss: 0.0319 - val_accuracy: 0.8635 - val_loss: 1.0652\n",
      "Epoch 76/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9893 - loss: 0.0409 - val_accuracy: 0.8639 - val_loss: 1.0645\n",
      "Epoch 77/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9904 - loss: 0.0323 - val_accuracy: 0.8575 - val_loss: 1.0746\n",
      "Epoch 78/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9878 - loss: 0.0346 - val_accuracy: 0.8607 - val_loss: 1.0538\n",
      "Epoch 79/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9845 - loss: 0.0565 - val_accuracy: 0.8603 - val_loss: 1.0266\n",
      "Epoch 80/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9894 - loss: 0.0347 - val_accuracy: 0.8575 - val_loss: 1.0574\n",
      "Epoch 81/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9920 - loss: 0.0250 - val_accuracy: 0.8713 - val_loss: 0.9876\n",
      "Epoch 82/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9919 - loss: 0.0261 - val_accuracy: 0.8530 - val_loss: 1.1108\n",
      "Epoch 83/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9831 - loss: 0.0569 - val_accuracy: 0.8548 - val_loss: 1.1033\n",
      "Epoch 84/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9864 - loss: 0.0433 - val_accuracy: 0.8653 - val_loss: 0.9732\n",
      "Epoch 85/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9926 - loss: 0.0290 - val_accuracy: 0.8704 - val_loss: 0.9902\n",
      "Epoch 86/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9909 - loss: 0.0267 - val_accuracy: 0.8626 - val_loss: 1.0386\n",
      "Epoch 87/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9908 - loss: 0.0271 - val_accuracy: 0.8630 - val_loss: 0.9626\n",
      "Epoch 88/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9918 - loss: 0.0254 - val_accuracy: 0.8557 - val_loss: 1.0620\n",
      "Epoch 89/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9900 - loss: 0.0356 - val_accuracy: 0.8557 - val_loss: 1.0240\n",
      "Epoch 90/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9891 - loss: 0.0353 - val_accuracy: 0.8685 - val_loss: 0.9807\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.8646 - loss: 0.9279\n",
      "\u001b[1m410/410\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step\n",
      "\u001b[1m410/410\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9940 - loss: 0.0228\n",
      "15.89735850095749\n",
      "1.6997943282127381\n",
      "0.050347681840260824\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=2048 is too large for input signal of length=1323\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=2048 is too large for input signal of length=1103\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=2048 is too large for input signal of length=1523\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "90\n",
      "Epoch 1/90\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 11ms/step - accuracy: 0.4613 - loss: 1.5960 - val_accuracy: 0.6427 - val_loss: 1.0805\n",
      "Epoch 2/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.6598 - loss: 1.0099 - val_accuracy: 0.6656 - val_loss: 1.0247\n",
      "Epoch 3/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.7305 - loss: 0.8017 - val_accuracy: 0.7242 - val_loss: 0.8928\n",
      "Epoch 4/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.7719 - loss: 0.6872 - val_accuracy: 0.7430 - val_loss: 0.8634\n",
      "Epoch 5/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8086 - loss: 0.5720 - val_accuracy: 0.7306 - val_loss: 0.8306\n",
      "Epoch 6/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8269 - loss: 0.5150 - val_accuracy: 0.7691 - val_loss: 0.7959\n",
      "Epoch 7/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8457 - loss: 0.4569 - val_accuracy: 0.7696 - val_loss: 0.8505\n",
      "Epoch 8/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8612 - loss: 0.4090 - val_accuracy: 0.8044 - val_loss: 0.7285\n",
      "Epoch 9/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8671 - loss: 0.3780 - val_accuracy: 0.8007 - val_loss: 0.7014\n",
      "Epoch 10/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8904 - loss: 0.3327 - val_accuracy: 0.8145 - val_loss: 0.7240\n",
      "Epoch 11/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9000 - loss: 0.3008 - val_accuracy: 0.8191 - val_loss: 0.6996\n",
      "Epoch 12/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9099 - loss: 0.2712 - val_accuracy: 0.8131 - val_loss: 0.6710\n",
      "Epoch 13/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9090 - loss: 0.2662 - val_accuracy: 0.8223 - val_loss: 0.7253\n",
      "Epoch 14/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9190 - loss: 0.2369 - val_accuracy: 0.8301 - val_loss: 0.6597\n",
      "Epoch 15/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9251 - loss: 0.2183 - val_accuracy: 0.8392 - val_loss: 0.6668\n",
      "Epoch 16/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9394 - loss: 0.1813 - val_accuracy: 0.8497 - val_loss: 0.6202\n",
      "Epoch 17/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9396 - loss: 0.1750 - val_accuracy: 0.8163 - val_loss: 0.7394\n",
      "Epoch 18/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9429 - loss: 0.1728 - val_accuracy: 0.8406 - val_loss: 0.6914\n",
      "Epoch 19/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9439 - loss: 0.1687 - val_accuracy: 0.8415 - val_loss: 0.6960\n",
      "Epoch 20/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9506 - loss: 0.1483 - val_accuracy: 0.8438 - val_loss: 0.7160\n",
      "Epoch 21/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9486 - loss: 0.1472 - val_accuracy: 0.8484 - val_loss: 0.6947\n",
      "Epoch 22/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9579 - loss: 0.1216 - val_accuracy: 0.8534 - val_loss: 0.7028\n",
      "Epoch 23/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9553 - loss: 0.1339 - val_accuracy: 0.8470 - val_loss: 0.7539\n",
      "Epoch 24/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9575 - loss: 0.1236 - val_accuracy: 0.8681 - val_loss: 0.6765\n",
      "Epoch 25/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9638 - loss: 0.1091 - val_accuracy: 0.8557 - val_loss: 0.7023\n",
      "Epoch 26/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9593 - loss: 0.1180 - val_accuracy: 0.8598 - val_loss: 0.6842\n",
      "Epoch 27/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9629 - loss: 0.1051 - val_accuracy: 0.8488 - val_loss: 0.7600\n",
      "Epoch 28/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9579 - loss: 0.1177 - val_accuracy: 0.8438 - val_loss: 0.7967\n",
      "Epoch 29/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9674 - loss: 0.0941 - val_accuracy: 0.8548 - val_loss: 0.6936\n",
      "Epoch 30/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9693 - loss: 0.0918 - val_accuracy: 0.8575 - val_loss: 0.7942\n",
      "Epoch 31/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9703 - loss: 0.0882 - val_accuracy: 0.8713 - val_loss: 0.6908\n",
      "Epoch 32/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9734 - loss: 0.0770 - val_accuracy: 0.8598 - val_loss: 0.7877\n",
      "Epoch 33/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9692 - loss: 0.0966 - val_accuracy: 0.8685 - val_loss: 0.7020\n",
      "Epoch 34/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9790 - loss: 0.0676 - val_accuracy: 0.8667 - val_loss: 0.6990\n",
      "Epoch 35/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9760 - loss: 0.0676 - val_accuracy: 0.8768 - val_loss: 0.7093\n",
      "Epoch 36/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9789 - loss: 0.0651 - val_accuracy: 0.8777 - val_loss: 0.7127\n",
      "Epoch 37/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9727 - loss: 0.0775 - val_accuracy: 0.8740 - val_loss: 0.7438\n",
      "Epoch 38/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9789 - loss: 0.0625 - val_accuracy: 0.8598 - val_loss: 0.8092\n",
      "Epoch 39/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9740 - loss: 0.0752 - val_accuracy: 0.8694 - val_loss: 0.7324\n",
      "Epoch 40/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9804 - loss: 0.0564 - val_accuracy: 0.8644 - val_loss: 0.7546\n",
      "Epoch 41/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9808 - loss: 0.0611 - val_accuracy: 0.8644 - val_loss: 0.7682\n",
      "Epoch 42/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9792 - loss: 0.0613 - val_accuracy: 0.8626 - val_loss: 0.7660\n",
      "Epoch 43/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9813 - loss: 0.0559 - val_accuracy: 0.8662 - val_loss: 0.7597\n",
      "Epoch 44/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9782 - loss: 0.0580 - val_accuracy: 0.8676 - val_loss: 0.8277\n",
      "Epoch 45/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9775 - loss: 0.0698 - val_accuracy: 0.8681 - val_loss: 0.7382\n",
      "Epoch 46/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9775 - loss: 0.0619 - val_accuracy: 0.8456 - val_loss: 0.8591\n",
      "Epoch 47/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9818 - loss: 0.0527 - val_accuracy: 0.8754 - val_loss: 0.7446\n",
      "Epoch 48/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9840 - loss: 0.0482 - val_accuracy: 0.8644 - val_loss: 0.7980\n",
      "Epoch 49/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9831 - loss: 0.0472 - val_accuracy: 0.8607 - val_loss: 0.8273\n",
      "Epoch 50/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9827 - loss: 0.0579 - val_accuracy: 0.8740 - val_loss: 0.7198\n",
      "Epoch 51/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9818 - loss: 0.0498 - val_accuracy: 0.8768 - val_loss: 0.8055\n",
      "Epoch 52/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9801 - loss: 0.0511 - val_accuracy: 0.8653 - val_loss: 0.8168\n",
      "Epoch 53/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9759 - loss: 0.0740 - val_accuracy: 0.8763 - val_loss: 0.7270\n",
      "Epoch 54/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9845 - loss: 0.0446 - val_accuracy: 0.8690 - val_loss: 0.8035\n",
      "Epoch 55/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9843 - loss: 0.0478 - val_accuracy: 0.8681 - val_loss: 0.8309\n",
      "Epoch 56/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9879 - loss: 0.0366 - val_accuracy: 0.8694 - val_loss: 0.8354\n",
      "Epoch 57/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9866 - loss: 0.0427 - val_accuracy: 0.8653 - val_loss: 0.8346\n",
      "Epoch 58/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9869 - loss: 0.0433 - val_accuracy: 0.8704 - val_loss: 0.8447\n",
      "Epoch 59/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9783 - loss: 0.0619 - val_accuracy: 0.8639 - val_loss: 0.8550\n",
      "Epoch 60/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9803 - loss: 0.0568 - val_accuracy: 0.8681 - val_loss: 0.8654\n",
      "Epoch 61/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9837 - loss: 0.0487 - val_accuracy: 0.8722 - val_loss: 0.7956\n",
      "Epoch 62/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9880 - loss: 0.0377 - val_accuracy: 0.8681 - val_loss: 0.8324\n",
      "Epoch 63/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9850 - loss: 0.0420 - val_accuracy: 0.8676 - val_loss: 0.8489\n",
      "Epoch 64/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9876 - loss: 0.0391 - val_accuracy: 0.8667 - val_loss: 0.8796\n",
      "Epoch 65/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9884 - loss: 0.0357 - val_accuracy: 0.8781 - val_loss: 0.8247\n",
      "Epoch 66/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9878 - loss: 0.0378 - val_accuracy: 0.8795 - val_loss: 0.7608\n",
      "Epoch 67/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9892 - loss: 0.0325 - val_accuracy: 0.8731 - val_loss: 0.9231\n",
      "Epoch 68/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9832 - loss: 0.0499 - val_accuracy: 0.8667 - val_loss: 0.8642\n",
      "Epoch 69/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9840 - loss: 0.0484 - val_accuracy: 0.8768 - val_loss: 0.8481\n",
      "Epoch 70/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9866 - loss: 0.0452 - val_accuracy: 0.8786 - val_loss: 0.7617\n",
      "Epoch 71/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9888 - loss: 0.0337 - val_accuracy: 0.8795 - val_loss: 0.8370\n",
      "Epoch 72/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9869 - loss: 0.0423 - val_accuracy: 0.8717 - val_loss: 0.7843\n",
      "Epoch 73/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9855 - loss: 0.0473 - val_accuracy: 0.8713 - val_loss: 0.7833\n",
      "Epoch 74/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9876 - loss: 0.0354 - val_accuracy: 0.8740 - val_loss: 0.7969\n",
      "Epoch 75/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9888 - loss: 0.0313 - val_accuracy: 0.8704 - val_loss: 0.8217\n",
      "Epoch 76/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9906 - loss: 0.0269 - val_accuracy: 0.8736 - val_loss: 0.8996\n",
      "Epoch 77/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9855 - loss: 0.0455 - val_accuracy: 0.8745 - val_loss: 0.8480\n",
      "Epoch 78/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9848 - loss: 0.0457 - val_accuracy: 0.8708 - val_loss: 0.8811\n",
      "Epoch 79/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9852 - loss: 0.0461 - val_accuracy: 0.8791 - val_loss: 0.8281\n",
      "Epoch 80/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9913 - loss: 0.0259 - val_accuracy: 0.8727 - val_loss: 0.8824\n",
      "Epoch 81/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9851 - loss: 0.0513 - val_accuracy: 0.8781 - val_loss: 0.8574\n",
      "Epoch 82/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9860 - loss: 0.0413 - val_accuracy: 0.8896 - val_loss: 0.7846\n",
      "Epoch 83/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9887 - loss: 0.0398 - val_accuracy: 0.8759 - val_loss: 0.8333\n",
      "Epoch 84/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9888 - loss: 0.0328 - val_accuracy: 0.8800 - val_loss: 0.8937\n",
      "Epoch 85/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9879 - loss: 0.0393 - val_accuracy: 0.8800 - val_loss: 0.8597\n",
      "Epoch 86/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9903 - loss: 0.0298 - val_accuracy: 0.8644 - val_loss: 0.9468\n",
      "Epoch 87/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9846 - loss: 0.0484 - val_accuracy: 0.8809 - val_loss: 0.8244\n",
      "Epoch 88/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9867 - loss: 0.0375 - val_accuracy: 0.8754 - val_loss: 0.8398\n",
      "Epoch 89/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9933 - loss: 0.0218 - val_accuracy: 0.8841 - val_loss: 0.8544\n",
      "Epoch 90/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9897 - loss: 0.0310 - val_accuracy: 0.8562 - val_loss: 0.9232\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.8492 - loss: 0.9449\n",
      "\u001b[1m410/410\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step\n",
      "\u001b[1m410/410\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9849 - loss: 0.0520\n",
      "21.738033358256022\n",
      "1.6971837719281515\n",
      "0.05607231458028158\n",
      "90\n",
      "Epoch 1/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 11ms/step - accuracy: 0.4323 - loss: 1.6492 - val_accuracy: 0.6111 - val_loss: 1.1658\n",
      "Epoch 2/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.6476 - loss: 1.0412 - val_accuracy: 0.7151 - val_loss: 0.9299\n",
      "Epoch 3/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.7189 - loss: 0.8392 - val_accuracy: 0.7114 - val_loss: 0.8842\n",
      "Epoch 4/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.7720 - loss: 0.7077 - val_accuracy: 0.7430 - val_loss: 0.8332\n",
      "Epoch 5/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.7989 - loss: 0.6107 - val_accuracy: 0.7696 - val_loss: 0.7545\n",
      "Epoch 6/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8291 - loss: 0.5238 - val_accuracy: 0.7678 - val_loss: 0.8032\n",
      "Epoch 7/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8379 - loss: 0.4884 - val_accuracy: 0.7952 - val_loss: 0.7306\n",
      "Epoch 8/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8622 - loss: 0.4233 - val_accuracy: 0.7925 - val_loss: 0.7483\n",
      "Epoch 9/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8719 - loss: 0.3902 - val_accuracy: 0.8108 - val_loss: 0.6925\n",
      "Epoch 10/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8780 - loss: 0.3642 - val_accuracy: 0.8108 - val_loss: 0.6972\n",
      "Epoch 11/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8912 - loss: 0.3126 - val_accuracy: 0.8117 - val_loss: 0.7298\n",
      "Epoch 12/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9014 - loss: 0.2922 - val_accuracy: 0.8062 - val_loss: 0.7236\n",
      "Epoch 13/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9043 - loss: 0.2709 - val_accuracy: 0.8388 - val_loss: 0.6353\n",
      "Epoch 14/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9254 - loss: 0.2211 - val_accuracy: 0.8342 - val_loss: 0.6743\n",
      "Epoch 15/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9205 - loss: 0.2383 - val_accuracy: 0.8388 - val_loss: 0.6639\n",
      "Epoch 16/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9164 - loss: 0.2444 - val_accuracy: 0.8461 - val_loss: 0.6741\n",
      "Epoch 17/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9358 - loss: 0.1859 - val_accuracy: 0.8241 - val_loss: 0.7706\n",
      "Epoch 18/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9372 - loss: 0.1904 - val_accuracy: 0.8465 - val_loss: 0.6553\n",
      "Epoch 19/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9477 - loss: 0.1494 - val_accuracy: 0.8461 - val_loss: 0.7014\n",
      "Epoch 20/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9506 - loss: 0.1486 - val_accuracy: 0.8268 - val_loss: 0.8017\n",
      "Epoch 21/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9407 - loss: 0.1723 - val_accuracy: 0.8557 - val_loss: 0.6721\n",
      "Epoch 22/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9458 - loss: 0.1625 - val_accuracy: 0.8552 - val_loss: 0.6484\n",
      "Epoch 23/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9541 - loss: 0.1337 - val_accuracy: 0.8571 - val_loss: 0.6935\n",
      "Epoch 24/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9573 - loss: 0.1297 - val_accuracy: 0.8511 - val_loss: 0.6768\n",
      "Epoch 25/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9572 - loss: 0.1241 - val_accuracy: 0.8566 - val_loss: 0.6660\n",
      "Epoch 26/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9605 - loss: 0.1181 - val_accuracy: 0.8497 - val_loss: 0.7222\n",
      "Epoch 27/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9657 - loss: 0.0975 - val_accuracy: 0.8543 - val_loss: 0.7738\n",
      "Epoch 28/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9650 - loss: 0.1077 - val_accuracy: 0.8607 - val_loss: 0.6474\n",
      "Epoch 29/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9636 - loss: 0.1093 - val_accuracy: 0.8598 - val_loss: 0.6819\n",
      "Epoch 30/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9653 - loss: 0.1014 - val_accuracy: 0.8681 - val_loss: 0.6900\n",
      "Epoch 31/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9736 - loss: 0.0813 - val_accuracy: 0.8580 - val_loss: 0.7152\n",
      "Epoch 32/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9692 - loss: 0.0951 - val_accuracy: 0.8649 - val_loss: 0.6568\n",
      "Epoch 33/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9707 - loss: 0.0828 - val_accuracy: 0.8662 - val_loss: 0.7010\n",
      "Epoch 34/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9732 - loss: 0.0791 - val_accuracy: 0.8433 - val_loss: 0.8262\n",
      "Epoch 35/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9684 - loss: 0.1001 - val_accuracy: 0.8617 - val_loss: 0.6824\n",
      "Epoch 36/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9772 - loss: 0.0731 - val_accuracy: 0.8603 - val_loss: 0.7973\n",
      "Epoch 37/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9790 - loss: 0.0654 - val_accuracy: 0.8639 - val_loss: 0.7520\n",
      "Epoch 38/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9748 - loss: 0.0706 - val_accuracy: 0.8621 - val_loss: 0.7634\n",
      "Epoch 39/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9785 - loss: 0.0640 - val_accuracy: 0.8493 - val_loss: 0.8771\n",
      "Epoch 40/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9733 - loss: 0.0781 - val_accuracy: 0.8626 - val_loss: 0.7538\n",
      "Epoch 41/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9790 - loss: 0.0624 - val_accuracy: 0.8667 - val_loss: 0.7523\n",
      "Epoch 42/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9759 - loss: 0.0691 - val_accuracy: 0.8479 - val_loss: 0.8187\n",
      "Epoch 43/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9746 - loss: 0.0809 - val_accuracy: 0.8662 - val_loss: 0.7306\n",
      "Epoch 44/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9779 - loss: 0.0638 - val_accuracy: 0.8635 - val_loss: 0.7670\n",
      "Epoch 45/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9782 - loss: 0.0618 - val_accuracy: 0.8722 - val_loss: 0.7672\n",
      "Epoch 46/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9814 - loss: 0.0556 - val_accuracy: 0.8708 - val_loss: 0.7704\n",
      "Epoch 47/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9784 - loss: 0.0681 - val_accuracy: 0.8672 - val_loss: 0.7582\n",
      "Epoch 48/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9821 - loss: 0.0522 - val_accuracy: 0.8717 - val_loss: 0.7132\n",
      "Epoch 49/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9818 - loss: 0.0534 - val_accuracy: 0.8589 - val_loss: 0.8528\n",
      "Epoch 50/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9778 - loss: 0.0734 - val_accuracy: 0.8630 - val_loss: 0.8700\n",
      "Epoch 51/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9835 - loss: 0.0476 - val_accuracy: 0.8649 - val_loss: 0.8392\n",
      "Epoch 52/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9835 - loss: 0.0534 - val_accuracy: 0.8649 - val_loss: 0.8223\n",
      "Epoch 53/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9847 - loss: 0.0475 - val_accuracy: 0.8736 - val_loss: 0.7763\n",
      "Epoch 54/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9796 - loss: 0.0580 - val_accuracy: 0.8694 - val_loss: 0.7966\n",
      "Epoch 55/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9754 - loss: 0.0661 - val_accuracy: 0.8653 - val_loss: 0.8410\n",
      "Epoch 56/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9852 - loss: 0.0473 - val_accuracy: 0.8681 - val_loss: 0.8352\n",
      "Epoch 57/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9808 - loss: 0.0519 - val_accuracy: 0.8639 - val_loss: 0.7987\n",
      "Epoch 58/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9838 - loss: 0.0481 - val_accuracy: 0.8658 - val_loss: 0.8255\n",
      "Epoch 59/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9827 - loss: 0.0528 - val_accuracy: 0.8681 - val_loss: 0.9062\n",
      "Epoch 60/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9828 - loss: 0.0485 - val_accuracy: 0.8667 - val_loss: 0.8606\n",
      "Epoch 61/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9857 - loss: 0.0488 - val_accuracy: 0.8708 - val_loss: 0.8680\n",
      "Epoch 62/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9843 - loss: 0.0462 - val_accuracy: 0.8694 - val_loss: 0.8545\n",
      "Epoch 63/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9818 - loss: 0.0538 - val_accuracy: 0.8690 - val_loss: 0.8034\n",
      "Epoch 64/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9846 - loss: 0.0497 - val_accuracy: 0.8717 - val_loss: 0.7893\n",
      "Epoch 65/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9829 - loss: 0.0486 - val_accuracy: 0.8653 - val_loss: 0.8935\n",
      "Epoch 66/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9852 - loss: 0.0468 - val_accuracy: 0.8653 - val_loss: 0.9487\n",
      "Epoch 67/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9837 - loss: 0.0449 - val_accuracy: 0.8681 - val_loss: 0.9284\n",
      "Epoch 68/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9835 - loss: 0.0505 - val_accuracy: 0.8685 - val_loss: 0.8988\n",
      "Epoch 69/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9834 - loss: 0.0522 - val_accuracy: 0.8763 - val_loss: 0.8140\n",
      "Epoch 70/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9858 - loss: 0.0436 - val_accuracy: 0.8704 - val_loss: 0.8118\n",
      "Epoch 71/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9913 - loss: 0.0275 - val_accuracy: 0.8736 - val_loss: 0.9214\n",
      "Epoch 72/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9877 - loss: 0.0437 - val_accuracy: 0.8713 - val_loss: 0.8402\n",
      "Epoch 73/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9811 - loss: 0.0559 - val_accuracy: 0.8694 - val_loss: 0.8893\n",
      "Epoch 74/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9865 - loss: 0.0434 - val_accuracy: 0.8749 - val_loss: 0.7987\n",
      "Epoch 75/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9911 - loss: 0.0293 - val_accuracy: 0.8740 - val_loss: 0.8556\n",
      "Epoch 76/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9890 - loss: 0.0388 - val_accuracy: 0.8713 - val_loss: 0.8383\n",
      "Epoch 77/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9849 - loss: 0.0485 - val_accuracy: 0.8658 - val_loss: 0.8889\n",
      "Epoch 78/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9868 - loss: 0.0412 - val_accuracy: 0.8759 - val_loss: 0.8173\n",
      "Epoch 79/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9886 - loss: 0.0341 - val_accuracy: 0.8745 - val_loss: 0.8446\n",
      "Epoch 80/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9885 - loss: 0.0327 - val_accuracy: 0.8754 - val_loss: 0.8550\n",
      "Epoch 81/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9862 - loss: 0.0361 - val_accuracy: 0.8685 - val_loss: 0.8829\n",
      "Epoch 82/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9852 - loss: 0.0433 - val_accuracy: 0.8612 - val_loss: 0.8517\n",
      "Epoch 83/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9842 - loss: 0.0481 - val_accuracy: 0.8676 - val_loss: 0.8865\n",
      "Epoch 84/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9903 - loss: 0.0293 - val_accuracy: 0.8694 - val_loss: 0.8608\n",
      "Epoch 85/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9884 - loss: 0.0345 - val_accuracy: 0.8694 - val_loss: 0.9141\n",
      "Epoch 86/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9880 - loss: 0.0370 - val_accuracy: 0.8681 - val_loss: 0.9796\n",
      "Epoch 87/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9867 - loss: 0.0426 - val_accuracy: 0.8667 - val_loss: 0.9165\n",
      "Epoch 88/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9885 - loss: 0.0396 - val_accuracy: 0.8699 - val_loss: 0.9314\n",
      "Epoch 89/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9859 - loss: 0.0437 - val_accuracy: 0.8781 - val_loss: 0.8900\n",
      "Epoch 90/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9885 - loss: 0.0346 - val_accuracy: 0.8731 - val_loss: 0.8118\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.8776 - loss: 0.7646\n",
      "\u001b[1m410/410\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step\n",
      "\u001b[1m410/410\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9959 - loss: 0.0145\n",
      "21.86022452513377\n",
      "1.707611898581187\n",
      "0.05037170648574829\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=2048 is too large for input signal of length=1943\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=2048 is too large for input signal of length=2005\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=2048 is too large for input signal of length=1203\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=2048 is too large for input signal of length=1003\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=2048 is too large for input signal of length=1385\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "90\n",
      "Epoch 1/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 11ms/step - accuracy: 0.4589 - loss: 1.5921 - val_accuracy: 0.6395 - val_loss: 1.1255\n",
      "Epoch 2/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.6740 - loss: 0.9880 - val_accuracy: 0.7073 - val_loss: 0.9861\n",
      "Epoch 3/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.7300 - loss: 0.8155 - val_accuracy: 0.7137 - val_loss: 0.9168\n",
      "Epoch 4/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.7691 - loss: 0.7128 - val_accuracy: 0.7568 - val_loss: 0.8055\n",
      "Epoch 5/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8045 - loss: 0.5872 - val_accuracy: 0.7682 - val_loss: 0.8066\n",
      "Epoch 6/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8336 - loss: 0.5025 - val_accuracy: 0.7700 - val_loss: 0.7954\n",
      "Epoch 7/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8507 - loss: 0.4601 - val_accuracy: 0.7838 - val_loss: 0.7580\n",
      "Epoch 8/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8551 - loss: 0.4198 - val_accuracy: 0.8104 - val_loss: 0.6760\n",
      "Epoch 9/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8813 - loss: 0.3610 - val_accuracy: 0.8090 - val_loss: 0.7357\n",
      "Epoch 10/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8939 - loss: 0.3322 - val_accuracy: 0.8099 - val_loss: 0.6768\n",
      "Epoch 11/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8952 - loss: 0.3116 - val_accuracy: 0.8158 - val_loss: 0.6910\n",
      "Epoch 12/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9100 - loss: 0.2656 - val_accuracy: 0.8223 - val_loss: 0.6936\n",
      "Epoch 13/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9112 - loss: 0.2620 - val_accuracy: 0.8314 - val_loss: 0.7350\n",
      "Epoch 14/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9223 - loss: 0.2297 - val_accuracy: 0.8246 - val_loss: 0.7453\n",
      "Epoch 15/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9310 - loss: 0.2029 - val_accuracy: 0.8355 - val_loss: 0.6621\n",
      "Epoch 16/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9305 - loss: 0.2056 - val_accuracy: 0.8218 - val_loss: 0.7825\n",
      "Epoch 17/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9307 - loss: 0.2039 - val_accuracy: 0.8346 - val_loss: 0.7305\n",
      "Epoch 18/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9443 - loss: 0.1630 - val_accuracy: 0.8497 - val_loss: 0.6338\n",
      "Epoch 19/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9492 - loss: 0.1489 - val_accuracy: 0.8580 - val_loss: 0.6252\n",
      "Epoch 20/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9520 - loss: 0.1443 - val_accuracy: 0.8539 - val_loss: 0.6944\n",
      "Epoch 21/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9446 - loss: 0.1625 - val_accuracy: 0.8365 - val_loss: 0.7316\n",
      "Epoch 22/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9517 - loss: 0.1369 - val_accuracy: 0.8562 - val_loss: 0.6696\n",
      "Epoch 23/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9613 - loss: 0.1161 - val_accuracy: 0.8580 - val_loss: 0.7078\n",
      "Epoch 24/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9658 - loss: 0.1045 - val_accuracy: 0.8612 - val_loss: 0.6963\n",
      "Epoch 25/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9643 - loss: 0.1051 - val_accuracy: 0.8621 - val_loss: 0.7279\n",
      "Epoch 26/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9653 - loss: 0.1015 - val_accuracy: 0.8557 - val_loss: 0.7186\n",
      "Epoch 27/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9653 - loss: 0.1050 - val_accuracy: 0.8589 - val_loss: 0.6613\n",
      "Epoch 28/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9649 - loss: 0.0976 - val_accuracy: 0.8727 - val_loss: 0.6557\n",
      "Epoch 29/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9676 - loss: 0.0964 - val_accuracy: 0.8635 - val_loss: 0.6829\n",
      "Epoch 30/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9692 - loss: 0.0912 - val_accuracy: 0.8658 - val_loss: 0.7707\n",
      "Epoch 31/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9692 - loss: 0.0846 - val_accuracy: 0.8520 - val_loss: 0.8027\n",
      "Epoch 32/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9716 - loss: 0.0841 - val_accuracy: 0.8639 - val_loss: 0.7623\n",
      "Epoch 33/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9744 - loss: 0.0782 - val_accuracy: 0.8566 - val_loss: 0.7929\n",
      "Epoch 34/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9713 - loss: 0.0871 - val_accuracy: 0.8635 - val_loss: 0.7512\n",
      "Epoch 35/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9731 - loss: 0.0773 - val_accuracy: 0.8635 - val_loss: 0.7276\n",
      "Epoch 36/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9773 - loss: 0.0720 - val_accuracy: 0.8708 - val_loss: 0.7043\n",
      "Epoch 37/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9798 - loss: 0.0568 - val_accuracy: 0.8562 - val_loss: 0.8007\n",
      "Epoch 38/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9780 - loss: 0.0674 - val_accuracy: 0.8731 - val_loss: 0.7409\n",
      "Epoch 39/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9811 - loss: 0.0554 - val_accuracy: 0.8534 - val_loss: 0.8542\n",
      "Epoch 40/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9774 - loss: 0.0690 - val_accuracy: 0.8617 - val_loss: 0.7743\n",
      "Epoch 41/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9819 - loss: 0.0562 - val_accuracy: 0.8754 - val_loss: 0.7329\n",
      "Epoch 42/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9792 - loss: 0.0665 - val_accuracy: 0.8626 - val_loss: 0.8272\n",
      "Epoch 43/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9759 - loss: 0.0833 - val_accuracy: 0.8736 - val_loss: 0.7677\n",
      "Epoch 44/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9816 - loss: 0.0504 - val_accuracy: 0.8685 - val_loss: 0.7609\n",
      "Epoch 45/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9819 - loss: 0.0502 - val_accuracy: 0.8704 - val_loss: 0.7662\n",
      "Epoch 46/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9802 - loss: 0.0550 - val_accuracy: 0.8745 - val_loss: 0.7908\n",
      "Epoch 47/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9757 - loss: 0.0717 - val_accuracy: 0.8607 - val_loss: 0.8540\n",
      "Epoch 48/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9766 - loss: 0.0635 - val_accuracy: 0.8626 - val_loss: 0.8626\n",
      "Epoch 49/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9834 - loss: 0.0500 - val_accuracy: 0.8791 - val_loss: 0.7076\n",
      "Epoch 50/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9784 - loss: 0.0617 - val_accuracy: 0.8607 - val_loss: 0.7979\n",
      "Epoch 51/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9826 - loss: 0.0534 - val_accuracy: 0.8566 - val_loss: 0.8513\n",
      "Epoch 52/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9808 - loss: 0.0557 - val_accuracy: 0.8690 - val_loss: 0.8429\n",
      "Epoch 53/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9801 - loss: 0.0597 - val_accuracy: 0.8749 - val_loss: 0.7079\n",
      "Epoch 54/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9904 - loss: 0.0314 - val_accuracy: 0.8644 - val_loss: 0.9009\n",
      "Epoch 55/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9854 - loss: 0.0455 - val_accuracy: 0.8653 - val_loss: 0.8142\n",
      "Epoch 56/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9840 - loss: 0.0529 - val_accuracy: 0.8690 - val_loss: 0.8687\n",
      "Epoch 57/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9815 - loss: 0.0535 - val_accuracy: 0.8713 - val_loss: 0.8721\n",
      "Epoch 58/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9840 - loss: 0.0435 - val_accuracy: 0.8594 - val_loss: 0.8172\n",
      "Epoch 59/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9856 - loss: 0.0444 - val_accuracy: 0.8598 - val_loss: 0.8837\n",
      "Epoch 60/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9834 - loss: 0.0524 - val_accuracy: 0.8649 - val_loss: 0.8822\n",
      "Epoch 61/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9877 - loss: 0.0334 - val_accuracy: 0.8585 - val_loss: 0.8796\n",
      "Epoch 62/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9827 - loss: 0.0543 - val_accuracy: 0.8630 - val_loss: 0.8649\n",
      "Epoch 63/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9855 - loss: 0.0432 - val_accuracy: 0.8717 - val_loss: 0.8518\n",
      "Epoch 64/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9855 - loss: 0.0395 - val_accuracy: 0.8708 - val_loss: 0.8823\n",
      "Epoch 65/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9884 - loss: 0.0356 - val_accuracy: 0.8749 - val_loss: 0.8016\n",
      "Epoch 66/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9857 - loss: 0.0402 - val_accuracy: 0.8662 - val_loss: 0.8973\n",
      "Epoch 67/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9865 - loss: 0.0435 - val_accuracy: 0.8759 - val_loss: 0.8814\n",
      "Epoch 68/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9886 - loss: 0.0361 - val_accuracy: 0.8635 - val_loss: 0.8564\n",
      "Epoch 69/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9893 - loss: 0.0343 - val_accuracy: 0.8607 - val_loss: 0.9823\n",
      "Epoch 70/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9855 - loss: 0.0460 - val_accuracy: 0.8699 - val_loss: 0.8872\n",
      "Epoch 71/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9883 - loss: 0.0359 - val_accuracy: 0.8575 - val_loss: 0.9038\n",
      "Epoch 72/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9871 - loss: 0.0447 - val_accuracy: 0.8781 - val_loss: 0.9006\n",
      "Epoch 73/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9878 - loss: 0.0411 - val_accuracy: 0.8809 - val_loss: 0.8743\n",
      "Epoch 74/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9907 - loss: 0.0320 - val_accuracy: 0.8727 - val_loss: 0.9157\n",
      "Epoch 75/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9880 - loss: 0.0354 - val_accuracy: 0.8704 - val_loss: 0.8393\n",
      "Epoch 76/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9859 - loss: 0.0482 - val_accuracy: 0.8749 - val_loss: 0.8457\n",
      "Epoch 77/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9903 - loss: 0.0320 - val_accuracy: 0.8717 - val_loss: 0.8513\n",
      "Epoch 78/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9885 - loss: 0.0352 - val_accuracy: 0.8639 - val_loss: 0.9400\n",
      "Epoch 79/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9884 - loss: 0.0363 - val_accuracy: 0.8681 - val_loss: 0.8697\n",
      "Epoch 80/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9875 - loss: 0.0377 - val_accuracy: 0.8823 - val_loss: 0.8842\n",
      "Epoch 81/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9896 - loss: 0.0377 - val_accuracy: 0.8763 - val_loss: 0.8992\n",
      "Epoch 82/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9898 - loss: 0.0303 - val_accuracy: 0.8777 - val_loss: 0.8533\n",
      "Epoch 83/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9864 - loss: 0.0432 - val_accuracy: 0.8736 - val_loss: 0.8823\n",
      "Epoch 84/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9874 - loss: 0.0437 - val_accuracy: 0.8745 - val_loss: 0.9182\n",
      "Epoch 85/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9889 - loss: 0.0406 - val_accuracy: 0.8836 - val_loss: 0.8345\n",
      "Epoch 86/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9893 - loss: 0.0346 - val_accuracy: 0.8736 - val_loss: 0.8894\n",
      "Epoch 87/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9888 - loss: 0.0389 - val_accuracy: 0.8759 - val_loss: 0.8439\n",
      "Epoch 88/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9908 - loss: 0.0278 - val_accuracy: 0.8763 - val_loss: 0.8856\n",
      "Epoch 89/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9895 - loss: 0.0418 - val_accuracy: 0.8777 - val_loss: 0.8707\n",
      "Epoch 90/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9867 - loss: 0.0405 - val_accuracy: 0.8768 - val_loss: 0.8432\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.8835 - loss: 0.7820\n",
      "\u001b[1m410/410\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step\n",
      "\u001b[1m410/410\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9939 - loss: 0.0164\n",
      "21.093572334448496\n",
      "1.6998400727907816\n",
      "0.047853581110636395\n",
      "90\n",
      "Epoch 1/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 11ms/step - accuracy: 0.4507 - loss: 1.6123 - val_accuracy: 0.6322 - val_loss: 1.1454\n",
      "Epoch 2/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.6743 - loss: 0.9977 - val_accuracy: 0.6880 - val_loss: 0.9890\n",
      "Epoch 3/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.7356 - loss: 0.7891 - val_accuracy: 0.7393 - val_loss: 0.8952\n",
      "Epoch 4/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.7702 - loss: 0.6844 - val_accuracy: 0.7311 - val_loss: 0.8822\n",
      "Epoch 5/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.8108 - loss: 0.5899 - val_accuracy: 0.7494 - val_loss: 0.8860\n",
      "Epoch 6/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8272 - loss: 0.5182 - val_accuracy: 0.7554 - val_loss: 0.8518\n",
      "Epoch 7/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8508 - loss: 0.4472 - val_accuracy: 0.7558 - val_loss: 0.8904\n",
      "Epoch 8/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8660 - loss: 0.4089 - val_accuracy: 0.7774 - val_loss: 0.7771\n",
      "Epoch 9/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8789 - loss: 0.3639 - val_accuracy: 0.7778 - val_loss: 0.7997\n",
      "Epoch 10/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8864 - loss: 0.3492 - val_accuracy: 0.8058 - val_loss: 0.7424\n",
      "Epoch 11/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9005 - loss: 0.3016 - val_accuracy: 0.7893 - val_loss: 0.8571\n",
      "Epoch 12/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9019 - loss: 0.2830 - val_accuracy: 0.8053 - val_loss: 0.7612\n",
      "Epoch 13/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9219 - loss: 0.2410 - val_accuracy: 0.8218 - val_loss: 0.6933\n",
      "Epoch 14/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9224 - loss: 0.2364 - val_accuracy: 0.8319 - val_loss: 0.6635\n",
      "Epoch 15/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9277 - loss: 0.2140 - val_accuracy: 0.8204 - val_loss: 0.7478\n",
      "Epoch 16/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9329 - loss: 0.1996 - val_accuracy: 0.8310 - val_loss: 0.7131\n",
      "Epoch 17/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9368 - loss: 0.1861 - val_accuracy: 0.8296 - val_loss: 0.7127\n",
      "Epoch 18/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9412 - loss: 0.1725 - val_accuracy: 0.8351 - val_loss: 0.6970\n",
      "Epoch 19/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9448 - loss: 0.1592 - val_accuracy: 0.8461 - val_loss: 0.6491\n",
      "Epoch 20/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9449 - loss: 0.1659 - val_accuracy: 0.8562 - val_loss: 0.6739\n",
      "Epoch 21/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9556 - loss: 0.1408 - val_accuracy: 0.8479 - val_loss: 0.7286\n",
      "Epoch 22/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9625 - loss: 0.1178 - val_accuracy: 0.8543 - val_loss: 0.6756\n",
      "Epoch 23/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9582 - loss: 0.1230 - val_accuracy: 0.8310 - val_loss: 0.7985\n",
      "Epoch 24/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9602 - loss: 0.1214 - val_accuracy: 0.8575 - val_loss: 0.6593\n",
      "Epoch 25/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9597 - loss: 0.1160 - val_accuracy: 0.8511 - val_loss: 0.7144\n",
      "Epoch 26/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9594 - loss: 0.1161 - val_accuracy: 0.8497 - val_loss: 0.7178\n",
      "Epoch 27/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9632 - loss: 0.1117 - val_accuracy: 0.8502 - val_loss: 0.7276\n",
      "Epoch 28/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9662 - loss: 0.0997 - val_accuracy: 0.8502 - val_loss: 0.7647\n",
      "Epoch 29/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9724 - loss: 0.0855 - val_accuracy: 0.8342 - val_loss: 0.8488\n",
      "Epoch 30/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9664 - loss: 0.0993 - val_accuracy: 0.8607 - val_loss: 0.7777\n",
      "Epoch 31/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9710 - loss: 0.0907 - val_accuracy: 0.8552 - val_loss: 0.7698\n",
      "Epoch 32/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9702 - loss: 0.0888 - val_accuracy: 0.8461 - val_loss: 0.8210\n",
      "Epoch 33/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9755 - loss: 0.0733 - val_accuracy: 0.8630 - val_loss: 0.7273\n",
      "Epoch 34/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9732 - loss: 0.0780 - val_accuracy: 0.8360 - val_loss: 0.8005\n",
      "Epoch 35/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9699 - loss: 0.0872 - val_accuracy: 0.8548 - val_loss: 0.7501\n",
      "Epoch 36/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9741 - loss: 0.0763 - val_accuracy: 0.8621 - val_loss: 0.7615\n",
      "Epoch 37/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9793 - loss: 0.0616 - val_accuracy: 0.8603 - val_loss: 0.7041\n",
      "Epoch 38/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9798 - loss: 0.0571 - val_accuracy: 0.8612 - val_loss: 0.7744\n",
      "Epoch 39/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9789 - loss: 0.0597 - val_accuracy: 0.8525 - val_loss: 0.8267\n",
      "Epoch 40/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9774 - loss: 0.0671 - val_accuracy: 0.8621 - val_loss: 0.7817\n",
      "Epoch 41/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9774 - loss: 0.0683 - val_accuracy: 0.8484 - val_loss: 0.7992\n",
      "Epoch 42/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9773 - loss: 0.0666 - val_accuracy: 0.8562 - val_loss: 0.8506\n",
      "Epoch 43/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9748 - loss: 0.0744 - val_accuracy: 0.8575 - val_loss: 0.8035\n",
      "Epoch 44/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9795 - loss: 0.0580 - val_accuracy: 0.8575 - val_loss: 0.8343\n",
      "Epoch 45/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9800 - loss: 0.0616 - val_accuracy: 0.8484 - val_loss: 0.8533\n",
      "Epoch 46/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9808 - loss: 0.0577 - val_accuracy: 0.8520 - val_loss: 0.8776\n",
      "Epoch 47/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9762 - loss: 0.0710 - val_accuracy: 0.8621 - val_loss: 0.7440\n",
      "Epoch 48/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9837 - loss: 0.0510 - val_accuracy: 0.8653 - val_loss: 0.7672\n",
      "Epoch 49/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9848 - loss: 0.0444 - val_accuracy: 0.8594 - val_loss: 0.8277\n",
      "Epoch 50/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9860 - loss: 0.0402 - val_accuracy: 0.8598 - val_loss: 0.8888\n",
      "Epoch 51/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9807 - loss: 0.0591 - val_accuracy: 0.8392 - val_loss: 1.0618\n",
      "Epoch 52/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9720 - loss: 0.0987 - val_accuracy: 0.8635 - val_loss: 0.8678\n",
      "Epoch 53/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9854 - loss: 0.0462 - val_accuracy: 0.8612 - val_loss: 0.8221\n",
      "Epoch 54/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9855 - loss: 0.0427 - val_accuracy: 0.8690 - val_loss: 0.8065\n",
      "Epoch 55/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9804 - loss: 0.0588 - val_accuracy: 0.8525 - val_loss: 0.9041\n",
      "Epoch 56/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9865 - loss: 0.0474 - val_accuracy: 0.8580 - val_loss: 0.9177\n",
      "Epoch 57/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9817 - loss: 0.0565 - val_accuracy: 0.8552 - val_loss: 0.8495\n",
      "Epoch 58/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9831 - loss: 0.0492 - val_accuracy: 0.8607 - val_loss: 0.8723\n",
      "Epoch 59/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9775 - loss: 0.0709 - val_accuracy: 0.8644 - val_loss: 0.8397\n",
      "Epoch 60/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9833 - loss: 0.0512 - val_accuracy: 0.8713 - val_loss: 0.8104\n",
      "Epoch 61/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9878 - loss: 0.0358 - val_accuracy: 0.8580 - val_loss: 0.9021\n",
      "Epoch 62/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9849 - loss: 0.0436 - val_accuracy: 0.8644 - val_loss: 0.8869\n",
      "Epoch 63/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9849 - loss: 0.0437 - val_accuracy: 0.8552 - val_loss: 0.9117\n",
      "Epoch 64/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9837 - loss: 0.0446 - val_accuracy: 0.8552 - val_loss: 0.8939\n",
      "Epoch 65/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9861 - loss: 0.0445 - val_accuracy: 0.8507 - val_loss: 0.9510\n",
      "Epoch 66/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9854 - loss: 0.0461 - val_accuracy: 0.8552 - val_loss: 0.9558\n",
      "Epoch 67/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9880 - loss: 0.0364 - val_accuracy: 0.8571 - val_loss: 0.9180\n",
      "Epoch 68/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9873 - loss: 0.0382 - val_accuracy: 0.8621 - val_loss: 0.8984\n",
      "Epoch 69/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9904 - loss: 0.0319 - val_accuracy: 0.8511 - val_loss: 0.9672\n",
      "Epoch 70/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9826 - loss: 0.0560 - val_accuracy: 0.8672 - val_loss: 0.8458\n",
      "Epoch 71/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9857 - loss: 0.0459 - val_accuracy: 0.8690 - val_loss: 0.8559\n",
      "Epoch 72/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9868 - loss: 0.0439 - val_accuracy: 0.8575 - val_loss: 0.9097\n",
      "Epoch 73/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9873 - loss: 0.0392 - val_accuracy: 0.8575 - val_loss: 0.9101\n",
      "Epoch 74/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9870 - loss: 0.0430 - val_accuracy: 0.8612 - val_loss: 0.9141\n",
      "Epoch 75/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9808 - loss: 0.0564 - val_accuracy: 0.8603 - val_loss: 0.9964\n",
      "Epoch 76/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9857 - loss: 0.0473 - val_accuracy: 0.8626 - val_loss: 0.8883\n",
      "Epoch 77/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9858 - loss: 0.0446 - val_accuracy: 0.8607 - val_loss: 0.8977\n",
      "Epoch 78/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9865 - loss: 0.0414 - val_accuracy: 0.8690 - val_loss: 0.8716\n",
      "Epoch 79/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9903 - loss: 0.0275 - val_accuracy: 0.8658 - val_loss: 0.9334\n",
      "Epoch 80/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9911 - loss: 0.0317 - val_accuracy: 0.8598 - val_loss: 0.9673\n",
      "Epoch 81/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9885 - loss: 0.0343 - val_accuracy: 0.8630 - val_loss: 0.9734\n",
      "Epoch 82/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9853 - loss: 0.0452 - val_accuracy: 0.8598 - val_loss: 0.8573\n",
      "Epoch 83/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9841 - loss: 0.0503 - val_accuracy: 0.8653 - val_loss: 0.9434\n",
      "Epoch 84/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9873 - loss: 0.0413 - val_accuracy: 0.8694 - val_loss: 0.9173\n",
      "Epoch 85/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9884 - loss: 0.0373 - val_accuracy: 0.8685 - val_loss: 0.8951\n",
      "Epoch 86/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9891 - loss: 0.0363 - val_accuracy: 0.8704 - val_loss: 0.8666\n",
      "Epoch 87/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9891 - loss: 0.0351 - val_accuracy: 0.8699 - val_loss: 0.9337\n",
      "Epoch 88/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9871 - loss: 0.0403 - val_accuracy: 0.8717 - val_loss: 0.8598\n",
      "Epoch 89/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9919 - loss: 0.0275 - val_accuracy: 0.8626 - val_loss: 0.8707\n",
      "Epoch 90/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9879 - loss: 0.0355 - val_accuracy: 0.8575 - val_loss: 1.0429\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.8627 - loss: 0.9499\n",
      "\u001b[1m410/410\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step\n",
      "\u001b[1m410/410\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9933 - loss: 0.0232\n",
      "15.68455946445465\n",
      "1.7077325622240702\n",
      "0.04902549187342326\n",
      "90\n",
      "Epoch 1/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 11ms/step - accuracy: 0.4739 - loss: 1.5561 - val_accuracy: 0.6221 - val_loss: 1.0836\n",
      "Epoch 2/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.6950 - loss: 0.9306 - val_accuracy: 0.7055 - val_loss: 0.9318\n",
      "Epoch 3/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.7585 - loss: 0.7276 - val_accuracy: 0.7508 - val_loss: 0.8188\n",
      "Epoch 4/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8017 - loss: 0.6004 - val_accuracy: 0.7407 - val_loss: 0.8925\n",
      "Epoch 5/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8285 - loss: 0.5243 - val_accuracy: 0.7627 - val_loss: 0.7638\n",
      "Epoch 6/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8568 - loss: 0.4350 - val_accuracy: 0.7787 - val_loss: 0.7939\n",
      "Epoch 7/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8669 - loss: 0.4079 - val_accuracy: 0.7902 - val_loss: 0.7765\n",
      "Epoch 8/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8903 - loss: 0.3402 - val_accuracy: 0.8108 - val_loss: 0.6927\n",
      "Epoch 9/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8972 - loss: 0.3214 - val_accuracy: 0.8071 - val_loss: 0.7590\n",
      "Epoch 10/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9095 - loss: 0.2801 - val_accuracy: 0.7994 - val_loss: 0.8118\n",
      "Epoch 11/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9124 - loss: 0.2703 - val_accuracy: 0.8241 - val_loss: 0.7193\n",
      "Epoch 12/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9239 - loss: 0.2261 - val_accuracy: 0.8365 - val_loss: 0.6845\n",
      "Epoch 13/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9344 - loss: 0.1992 - val_accuracy: 0.8264 - val_loss: 0.7538\n",
      "Epoch 14/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9290 - loss: 0.2216 - val_accuracy: 0.8328 - val_loss: 0.8128\n",
      "Epoch 15/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9415 - loss: 0.1764 - val_accuracy: 0.8168 - val_loss: 0.8045\n",
      "Epoch 16/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9478 - loss: 0.1534 - val_accuracy: 0.8397 - val_loss: 0.7528\n",
      "Epoch 17/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9475 - loss: 0.1618 - val_accuracy: 0.8511 - val_loss: 0.7619\n",
      "Epoch 18/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9494 - loss: 0.1428 - val_accuracy: 0.8502 - val_loss: 0.6985\n",
      "Epoch 19/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9584 - loss: 0.1216 - val_accuracy: 0.8447 - val_loss: 0.7573\n",
      "Epoch 20/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9577 - loss: 0.1269 - val_accuracy: 0.8438 - val_loss: 0.7731\n",
      "Epoch 21/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9630 - loss: 0.1130 - val_accuracy: 0.8479 - val_loss: 0.8022\n",
      "Epoch 22/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9669 - loss: 0.1004 - val_accuracy: 0.8562 - val_loss: 0.7236\n",
      "Epoch 23/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9598 - loss: 0.1221 - val_accuracy: 0.8443 - val_loss: 0.7651\n",
      "Epoch 24/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9675 - loss: 0.0982 - val_accuracy: 0.8534 - val_loss: 0.7777\n",
      "Epoch 25/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9694 - loss: 0.0917 - val_accuracy: 0.8543 - val_loss: 0.7799\n",
      "Epoch 26/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9709 - loss: 0.0840 - val_accuracy: 0.8589 - val_loss: 0.7629\n",
      "Epoch 27/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9704 - loss: 0.0894 - val_accuracy: 0.8415 - val_loss: 0.8634\n",
      "Epoch 28/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9669 - loss: 0.0935 - val_accuracy: 0.8319 - val_loss: 0.9294\n",
      "Epoch 29/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9753 - loss: 0.0775 - val_accuracy: 0.8612 - val_loss: 0.8057\n",
      "Epoch 30/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9808 - loss: 0.0624 - val_accuracy: 0.8699 - val_loss: 0.7564\n",
      "Epoch 31/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9788 - loss: 0.0621 - val_accuracy: 0.8534 - val_loss: 0.8898\n",
      "Epoch 32/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9738 - loss: 0.0794 - val_accuracy: 0.8543 - val_loss: 0.8487\n",
      "Epoch 33/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9759 - loss: 0.0761 - val_accuracy: 0.8676 - val_loss: 0.8007\n",
      "Epoch 34/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9806 - loss: 0.0630 - val_accuracy: 0.8708 - val_loss: 0.8058\n",
      "Epoch 35/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9787 - loss: 0.0619 - val_accuracy: 0.8685 - val_loss: 0.7841\n",
      "Epoch 36/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9814 - loss: 0.0536 - val_accuracy: 0.8543 - val_loss: 0.8828\n",
      "Epoch 37/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9746 - loss: 0.0666 - val_accuracy: 0.8548 - val_loss: 0.9393\n",
      "Epoch 38/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9774 - loss: 0.0627 - val_accuracy: 0.8662 - val_loss: 0.8305\n",
      "Epoch 39/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9796 - loss: 0.0611 - val_accuracy: 0.8543 - val_loss: 0.8862\n",
      "Epoch 40/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9802 - loss: 0.0535 - val_accuracy: 0.8603 - val_loss: 0.8756\n",
      "Epoch 41/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9782 - loss: 0.0654 - val_accuracy: 0.8736 - val_loss: 0.8011\n",
      "Epoch 42/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9880 - loss: 0.0436 - val_accuracy: 0.8658 - val_loss: 0.8451\n",
      "Epoch 43/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9835 - loss: 0.0504 - val_accuracy: 0.8662 - val_loss: 0.8576\n",
      "Epoch 44/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9847 - loss: 0.0468 - val_accuracy: 0.8713 - val_loss: 0.8359\n",
      "Epoch 45/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9856 - loss: 0.0461 - val_accuracy: 0.8429 - val_loss: 1.0248\n",
      "Epoch 46/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9788 - loss: 0.0674 - val_accuracy: 0.8649 - val_loss: 0.8851\n",
      "Epoch 47/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9805 - loss: 0.0574 - val_accuracy: 0.8626 - val_loss: 0.9332\n",
      "Epoch 48/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9815 - loss: 0.0576 - val_accuracy: 0.8621 - val_loss: 0.9026\n",
      "Epoch 49/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9856 - loss: 0.0421 - val_accuracy: 0.8786 - val_loss: 0.8842\n",
      "Epoch 50/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9847 - loss: 0.0493 - val_accuracy: 0.8667 - val_loss: 0.9141\n",
      "Epoch 51/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9855 - loss: 0.0425 - val_accuracy: 0.8694 - val_loss: 0.9005\n",
      "Epoch 52/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9874 - loss: 0.0359 - val_accuracy: 0.8658 - val_loss: 0.9127\n",
      "Epoch 53/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9823 - loss: 0.0581 - val_accuracy: 0.8653 - val_loss: 0.9377\n",
      "Epoch 54/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9876 - loss: 0.0365 - val_accuracy: 0.8736 - val_loss: 0.8632\n",
      "Epoch 55/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9835 - loss: 0.0482 - val_accuracy: 0.8667 - val_loss: 0.9351\n",
      "Epoch 56/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9850 - loss: 0.0461 - val_accuracy: 0.8722 - val_loss: 0.8668\n",
      "Epoch 57/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9853 - loss: 0.0449 - val_accuracy: 0.8672 - val_loss: 1.0019\n",
      "Epoch 58/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9831 - loss: 0.0518 - val_accuracy: 0.8717 - val_loss: 0.8935\n",
      "Epoch 59/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9871 - loss: 0.0388 - val_accuracy: 0.8722 - val_loss: 0.9073\n",
      "Epoch 60/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9870 - loss: 0.0372 - val_accuracy: 0.8676 - val_loss: 0.9335\n",
      "Epoch 61/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9851 - loss: 0.0483 - val_accuracy: 0.8722 - val_loss: 0.8898\n",
      "Epoch 62/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9892 - loss: 0.0375 - val_accuracy: 0.8607 - val_loss: 0.9231\n",
      "Epoch 63/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9839 - loss: 0.0428 - val_accuracy: 0.8575 - val_loss: 0.9271\n",
      "Epoch 64/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9878 - loss: 0.0345 - val_accuracy: 0.8749 - val_loss: 0.8895\n",
      "Epoch 65/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9874 - loss: 0.0380 - val_accuracy: 0.8676 - val_loss: 0.9441\n",
      "Epoch 66/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9869 - loss: 0.0488 - val_accuracy: 0.8736 - val_loss: 0.9422\n",
      "Epoch 67/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9911 - loss: 0.0303 - val_accuracy: 0.8791 - val_loss: 0.9052\n",
      "Epoch 68/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9878 - loss: 0.0397 - val_accuracy: 0.8575 - val_loss: 1.0831\n",
      "Epoch 69/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9833 - loss: 0.0551 - val_accuracy: 0.8694 - val_loss: 0.8760\n",
      "Epoch 70/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9845 - loss: 0.0515 - val_accuracy: 0.8704 - val_loss: 0.9283\n",
      "Epoch 71/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9917 - loss: 0.0286 - val_accuracy: 0.8749 - val_loss: 0.8725\n",
      "Epoch 72/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9870 - loss: 0.0417 - val_accuracy: 0.8694 - val_loss: 0.8685\n",
      "Epoch 73/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9882 - loss: 0.0427 - val_accuracy: 0.8667 - val_loss: 0.9831\n",
      "Epoch 74/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9886 - loss: 0.0371 - val_accuracy: 0.8635 - val_loss: 0.9735\n",
      "Epoch 75/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9885 - loss: 0.0402 - val_accuracy: 0.8662 - val_loss: 0.9523\n",
      "Epoch 76/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9935 - loss: 0.0241 - val_accuracy: 0.8694 - val_loss: 1.0097\n",
      "Epoch 77/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9896 - loss: 0.0328 - val_accuracy: 0.8672 - val_loss: 0.9882\n",
      "Epoch 78/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9817 - loss: 0.0700 - val_accuracy: 0.8772 - val_loss: 0.9335\n",
      "Epoch 79/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9911 - loss: 0.0282 - val_accuracy: 0.8763 - val_loss: 0.9184\n",
      "Epoch 80/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9925 - loss: 0.0238 - val_accuracy: 0.8635 - val_loss: 0.9566\n",
      "Epoch 81/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9871 - loss: 0.0473 - val_accuracy: 0.8736 - val_loss: 0.8331\n",
      "Epoch 82/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9872 - loss: 0.0386 - val_accuracy: 0.8763 - val_loss: 0.9163\n",
      "Epoch 83/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9913 - loss: 0.0296 - val_accuracy: 0.8722 - val_loss: 0.9049\n",
      "Epoch 84/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9912 - loss: 0.0320 - val_accuracy: 0.8681 - val_loss: 0.9712\n",
      "Epoch 85/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9903 - loss: 0.0312 - val_accuracy: 0.8722 - val_loss: 0.9466\n",
      "Epoch 86/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9889 - loss: 0.0400 - val_accuracy: 0.8699 - val_loss: 0.9700\n",
      "Epoch 87/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9823 - loss: 0.0613 - val_accuracy: 0.8589 - val_loss: 1.0778\n",
      "Epoch 88/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9876 - loss: 0.0433 - val_accuracy: 0.8722 - val_loss: 0.9626\n",
      "Epoch 89/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9923 - loss: 0.0254 - val_accuracy: 0.8722 - val_loss: 0.9640\n",
      "Epoch 90/90\n",
      "\u001b[1m437/437\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9905 - loss: 0.0313 - val_accuracy: 0.8585 - val_loss: 1.1546\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.8659 - loss: 1.0802\n",
      "\u001b[1m410/410\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step\n",
      "\u001b[1m410/410\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9811 - loss: 0.0858\n",
      "15.517639676729837\n",
      "1.713182282447815\n",
      "0.050556429227193195\n"
     ]
    }
   ],
   "source": [
    "# test for model training module\n",
    "# augmentation_list_format = [noise_flag, crop_freq_time_flag, noise_factor, shift_factor, pitch_factor, speed_rate, time_or_freq_crop_factor, reflection_factor, crop_double_mask]\n",
    "augment_train_dict = {}\n",
    "augment_train_dict['CropDoubleMasked_0.1'] = [0,1,0,0,0,1,0.1,0,1]\n",
    "augment_train_dict['Noised_12dBs'] = [1,1,12,0,0,1,0,0,0]\n",
    "# augment_train_dict['Noised_20dBs'] = [1,1,20,0,0,1,0,0,0]\n",
    "augment_train_dict['Pitched_0.1'] = [0,1,0,0,0.1,1,0,0,0]\n",
    "augment_train_dict['Pitched_0.25'] = [0,1,0,0,0.25,1,0,0,0]\n",
    "# augment_train_dict['Pitched_0.5'] = [1,1,0,0,0.5,1,0,0,0]\n",
    "augment_train_dict['Sped_1.1'] = [0,1,0,0,0,1.1,0,0,0]\n",
    "# augment_train_dict['FreqCropped_0.05'] = [0,1,0,0,0,1,0.05,0,0] # freq_domain data crop\n",
    "augment_train_dict['FreqCropped_0.1'] = [0,1,0,0,0,1,0.1,0,0]\n",
    "# augment_train_dict['TimeCropped_0.05'] = [0,0,0,0,0,1,0.05,0,0]\n",
    "augment_train_dict['TimeCropped_0.1'] = [0,0,0,0,0,1,0.1,0,0]\n",
    "# augment_train_dict['Reflected_0.05'] = [0,1,0,0,0,1,0,0.05,0]\n",
    "# augment_train_dict['Reflected_0.1'] = [0,1,0,0,0,1,0,0.05,0]\n",
    "\n",
    "\n",
    "aug_models_list, aug_models_validation_acc_list, aug_models_train_acc_list = [],[],[]\n",
    "aug_models_dataprep_time_list, aug_models_train_time_list,  aug_models_eval_time_list = [],[],[]\n",
    "aug_model_samples_list = []\n",
    "\n",
    "\n",
    "# model_trainer returns [model_aug, test_result_aug, train_result_aug, dataprep_aug, train_time_aug, eval_time_aug]\n",
    "for aug_method in augment_train_dict.keys():\n",
    "    [model, test_acc, train_acc, prep_time, train_time, eval_time] = model_trainer(data=df, model_name=aug_method, aug_set=augment_train_dict[aug_method],\n",
    "                                                           X_train_no_aug=X_train, Y_train_no_aug=Y_train)\n",
    "    aug_models_list.append(model)\n",
    "    aug_models_validation_acc_list.append(test_acc)\n",
    "    aug_models_train_acc_list.append(train_acc)\n",
    "    aug_models_dataprep_time_list.append(prep_time)\n",
    "    aug_models_train_time_list.append(train_time)\n",
    "    aug_models_eval_time_list.append(eval_time)\n",
    "    aug_model_samples_list.append(aug_method)\n",
    "                                      "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "811bbca3",
   "metadata": {
    "papermill": {
     "duration": 1.184494,
     "end_time": "2024-10-18T21:47:46.911120",
     "exception": false,
     "start_time": "2024-10-18T21:47:45.726626",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "* definitions of the dictionary and lists for differing augmentation methods, this set of data will be used in training and creating data_set\n",
    "* this data_set then will be tested with the model in hand"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "5f642491",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-18T21:47:49.133608Z",
     "iopub.status.busy": "2024-10-18T21:47:49.133222Z",
     "iopub.status.idle": "2024-10-18T21:47:49.141670Z",
     "shell.execute_reply": "2024-10-18T21:47:49.140782Z"
    },
    "papermill": {
     "duration": 1.124059,
     "end_time": "2024-10-18T21:47:49.143604",
     "exception": false,
     "start_time": "2024-10-18T21:47:48.019545",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# augmentation parameter declaration for testing purposes\n",
    "# augmentation_list_format = [noise_flag, crop_freq_time_flag, noise_factor, shift_factor, pitch_factor, speed_rate, time_or_freq_crop_factor, reflection_factor]\n",
    "# crop_freq_time_flag=1 for data cropping in freq domain; crop_freq_time_flag=0 for data cropping in time domain\n",
    "# each type of augmentation has its first value element as the index in the base augmentation list\n",
    "\n",
    "augmentation_dict = {}\n",
    "augmentation_dict['noise_factor'] = [2, 0, 5, 10, 20]\n",
    "augmentation_dict['shift_factor'] = [3, 0.05, 0.35] # [0,1] interval\n",
    "augmentation_dict['pitch_factor'] = [4, 0.1, 0.50, 1]\n",
    "augmentation_dict['speed_rate'] = [5, 0.90, 0.95]\n",
    "augmentation_dict['time_crop_factor'] = [6, 0.10, 0.20] # [0,1] interval\n",
    "augmentation_dict['freq_crop_factor'] = [6, 0.10, 0.20] # [0,1] interval\n",
    "augmentation_dict['reflection_factor'] = [7, 0.10, 0.20] # [0,1] interval\n",
    "base_augmentation_list = [0, 1, 0, 0, 0, 1, 0, 0]\n",
    "\n",
    "# to ease the creation of the index list for the .csv file\n",
    "def factor_percentage(factor):\n",
    "    \"\"\"\n",
    "    percentage calculator for factors in the [0,2] interval\n",
    "    \"\"\"\n",
    "    if factor >=1:\n",
    "        return f\"{(factor-1)*100:.2f}\" + '%'\n",
    "    else:\n",
    "        return f\"{(factor-1)*100:.2f}\" + '%'\n",
    "\n",
    "def pos_factor_percentage(factor):\n",
    "    \"\"\"\n",
    "    percentage calculator for factors in the [0,1] interval\n",
    "    \"\"\"\n",
    "    return f\"{factor*100:.2f}\" + '%'"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77af00eb",
   "metadata": {
    "papermill": {
     "duration": 1.108193,
     "end_time": "2024-10-18T21:47:51.421033",
     "exception": false,
     "start_time": "2024-10-18T21:47:50.312840",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# TESTING MODELS WITH THE AUGMENTED DATASETS\n",
    "* observes the .keys() of the augmentation dictionary, sets the parser input factors\n",
    "* augmentation_list_format = [noise_flag, crop_freq_time_flag, noise_factor, shift_factor, pitch_factor, speed_rate, time_or_freq_crop_factor, reflection_factor]; datacrop is not available in this section\n",
    "* crop_freq_time_flag=1 for data cropping in freq domain; crop_freq_time_flag=0 for data cropping in time domain\n",
    "* each type of augmentation has its first value element as the index in the base augmentation list\n",
    "* the loop is able to produce sample_list for tabulation for proper formation of the dictionary.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "ff90d877",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-18T21:47:53.710430Z",
     "iopub.status.busy": "2024-10-18T21:47:53.709742Z",
     "iopub.status.idle": "2024-10-18T21:47:53.714006Z",
     "shell.execute_reply": "2024-10-18T21:47:53.713092Z"
    },
    "papermill": {
     "duration": 1.122851,
     "end_time": "2024-10-18T21:47:53.716007",
     "exception": false,
     "start_time": "2024-10-18T21:47:52.593156",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# property_dict = []\n",
    "# def model_tester(data, model, augmentation_dict, property_dict, base_augmentation_list=[[0, 1, 0, 0, 0, 1, 0, 0]]  test_counter=0):\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "83eac5a4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-18T21:47:56.005704Z",
     "iopub.status.busy": "2024-10-18T21:47:56.005328Z",
     "iopub.status.idle": "2024-10-19T02:45:15.403985Z",
     "shell.execute_reply": "2024-10-19T02:45:15.402963Z"
    },
    "papermill": {
     "duration": 17840.506185,
     "end_time": "2024-10-19T02:45:15.405951",
     "exception": false,
     "start_time": "2024-10-18T21:47:54.899766",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.5430 - loss: 3.1346\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.6453 - loss: 2.0193\n",
      "15.498571010430654\n",
      "0.04306208690007528\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.7234 - loss: 1.8405\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8521 - loss: 0.6989\n",
      "15.46579443216324\n",
      "0.04621682564417521\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.8236 - loss: 1.2033\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9605 - loss: 0.1662\n",
      "15.401514395078022\n",
      "0.043227831522623696\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.8603 - loss: 0.9121\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9912 - loss: 0.0265\n",
      "15.290860525767009\n",
      "0.04263873895009359\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.8562 - loss: 0.9051\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9921 - loss: 0.0257\n",
      "15.343672629197439\n",
      "0.04511284033457438\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.8567 - loss: 0.9107\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9921 - loss: 0.0256\n",
      "15.271762053171793\n",
      "0.04324788649876912\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.8135 - loss: 1.1010\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9558 - loss: 0.1540\n",
      "21.750274813175203\n",
      "0.04210405747095744\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.7204 - loss: 1.8715\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8082 - loss: 1.0879\n",
      "21.89341061115265\n",
      "0.04376547733942668\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.6281 - loss: 2.6022\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.6752 - loss: 2.2449\n",
      "22.027257279555002\n",
      "0.043330037593841554\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=2048 is too large for input signal of length=1470\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=2048 is too large for input signal of length=1226\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=2048 is too large for input signal of length=1692\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.8031 - loss: 1.1550\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9498 - loss: 0.1616\n",
      "22.114717626571654\n",
      "0.0452039361000061\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=2048 is too large for input signal of length=1393\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=2048 is too large for input signal of length=1161\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/librosa/core/spectrum.py:266: UserWarning: n_fft=2048 is too large for input signal of length=1603\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.7993 - loss: 1.1520\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9511 - loss: 0.1755\n",
      "21.99976218144099\n",
      "0.044000264008839926\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.8524 - loss: 0.9089\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9884 - loss: 0.0404\n",
      "15.671530159314473\n",
      "0.042913357416788735\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.8404 - loss: 0.9834\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9803 - loss: 0.0743\n",
      "15.627504587173462\n",
      "0.04358060359954834\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.7902 - loss: 1.4985\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9131 - loss: 0.6708\n",
      "15.663265860080719\n",
      "0.044317909081776935\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.7173 - loss: 2.1170\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8385 - loss: 1.3352\n",
      "15.766623349984487\n",
      "0.05098067919413249\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.7983 - loss: 1.5050\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9415 - loss: 0.3865\n",
      "15.783739364147186\n",
      "0.0436374028523763\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step\n",
      "\u001b[1m69/69\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.8183 - loss: 1.2152\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step\n",
      "\u001b[1m205/205\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9583 - loss: 0.2519\n",
      "15.938923422495524\n",
      "0.04379771550496419\n",
      "17 17\n"
     ]
    }
   ],
   "source": [
    "# accuracy testing per modified augmentation list, which has only one value changed at a time\n",
    "\n",
    "# crop_freq_time_flag=1 for data cropping in freq domain; crop_freq_time_flag=0 for data cropping in time domain\n",
    "# each type of augmentation has its first value element as the index in the base augmentation list\n",
    "\n",
    "validation_acc_list, train_acc_list, dataprep_time_list, eval_time_list = [],[],[],[]\n",
    "# list for final dataFrame indices\n",
    "samples_list = []\n",
    "test_counter = 0\n",
    "for aug_method in augmentation_dict.keys():\n",
    "    aug_idx = augmentation_dict[aug_method][0]\n",
    "    dummy_idx = 0\n",
    "    for aug_value in augmentation_dict[aug_method]:\n",
    "        if dummy_idx != 0:\n",
    "            test_counter += 1\n",
    "            modified_augmentation_list = base_augmentation_list.copy()\n",
    "            modified_augmentation_list[aug_idx] = aug_value\n",
    "            \n",
    "            noise_flag = 1 if (aug_method == 'noise_factor') else 0\n",
    "            crop_freq_time_flag = 0 if (aug_method == 'time_crop_factor') else 1\n",
    "            modified_augmentation_list[0] = noise_flag\n",
    "            modified_augmentation_list[1] = crop_freq_time_flag\n",
    "            [noise_factor, shift_factor, pitch_factor, speed_rate, time_or_freq_crop_factor, reflection_factor] = modified_augmentation_list[2:]\n",
    "            \n",
    "            \n",
    "            # data preparation and testing\n",
    "            # extract the feature and label arrays\n",
    "            feature, label, start, end = parser(df, noise_factor=noise_flag, crop_freq=crop_freq_time_flag, snr_dbs=noise_factor,\n",
    "                                                    shift_factor=shift_factor, pitch_factor=pitch_factor, speed_rate=speed_rate,\n",
    "                                                    crop_factor=time_or_freq_crop_factor, added_shift_factor=reflection_factor, decimal = True, aug = True)\n",
    "\n",
    "            # prepare the train and test data\n",
    "            X_train, X_test, Y_train, Y_test = prepare_data(feature, label)\n",
    " \n",
    "            #  call the not_augmented model for testing\n",
    "            model = train_model(train = False, model_name = \"Original_Model.keras\")\n",
    "\n",
    "            # attain the accuracy results\n",
    "            train_result, test_result, eval_time = train_test_accuracy(model, X_train, X_test, Y_train, Y_test)\n",
    "            \n",
    "            #show the time elapsed for further analysis\n",
    "            dataprep_time = (end-start)/60\n",
    "            print(dataprep_time)\n",
    "            print(eval_time)\n",
    "\n",
    "            # accrue the data\n",
    "            validation_acc_list.append(test_result)\n",
    "            train_acc_list.append(train_result)\n",
    "            dataprep_time_list.append(dataprep_time)\n",
    "            eval_time_list.append(eval_time)\n",
    "\n",
    "            samples_list_dict = {'noise_factor':'Noise', 'shift_factor':'Shift_Factor', 'pitch_factor':'Pitch_Change', 'speed_rate':'Time_Stretched',\n",
    "                                 'time_crop_factor':'Time_DataCrop_Factor', 'freq_crop_factor':'Freq_DataCrop_Factor', 'reflection_factor':'Reflection_Factor'}\n",
    "            # if noise is augmented, put units at the end of the samples_list element\n",
    "            unit_list_dict = {'noise_factor':'dBs', 'shift_factor':'', 'pitch_factor':' semiNote', 'speed_rate':'',\n",
    "                                 'time_crop_factor':'', 'freq_crop_factor':'', 'reflection_factor':''}\n",
    "            # value format separation works if the decimal factors are put in the format z.xy..., due to the basic slicing\n",
    "            augmentation_value_dict = {'noise_factor':'SNR:' + str(aug_value), 'shift_factor':pos_factor_percentage(aug_value), 'pitch_factor':str(aug_value), 'speed_rate':factor_percentage(aug_value),\n",
    "                                 'time_crop_factor':pos_factor_percentage(aug_value), 'freq_crop_factor':pos_factor_percentage(aug_value), 'reflection_factor':pos_factor_percentage(aug_value)}\n",
    "            samples_list.append(samples_list_dict[aug_method] + ', ' + augmentation_value_dict[aug_method] + unit_list_dict[aug_method])\n",
    "            \n",
    "        \n",
    "        dummy_idx += 1\n",
    "\n",
    "print(len(samples_list), test_counter)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "266bef3f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-19T02:45:17.794266Z",
     "iopub.status.busy": "2024-10-19T02:45:17.793881Z",
     "iopub.status.idle": "2024-10-19T02:45:17.813597Z",
     "shell.execute_reply": "2024-10-19T02:45:17.812455Z"
    },
    "papermill": {
     "duration": 1.193079,
     "end_time": "2024-10-19T02:45:17.815594",
     "exception": false,
     "start_time": "2024-10-19T02:45:16.622515",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                Samples  Validation Accuracy  Training Accuracy  \\\n",
      "0        NoAugmentation             0.855245           0.990991   \n",
      "1  CropDoubleMasked_0.1             0.857077           0.995190   \n",
      "2          Noised_12dBs             0.868530           0.992900   \n",
      "3           Pitched_0.1             0.857077           0.982287   \n",
      "4          Pitched_0.25             0.873110           0.995266   \n",
      "5              Sped_1.1             0.876775           0.993358   \n",
      "6       FreqCropped_0.1             0.857535           0.992976   \n",
      "7       TimeCropped_0.1             0.858452           0.979997   \n",
      "\n",
      "   Data Creation Time  Evaluation Time  Training Time  \n",
      "0           18.236409         0.052650       1.042875  \n",
      "1           15.994468         0.060438       1.715817  \n",
      "2           15.897359         0.050348       1.699794  \n",
      "3           21.738033         0.056072       1.697184  \n",
      "4           21.860225         0.050372       1.707612  \n",
      "5           21.093572         0.047854       1.699840  \n",
      "6           15.684559         0.049025       1.707733  \n",
      "7           15.517640         0.050556       1.713182  \n"
     ]
    }
   ],
   "source": [
    "# for the augmented-model training results, to check how each augmentation method affects the accuracy values and time periods\n",
    "aug_models_results_dict = {\n",
    "    'Samples':['NoAugmentation'] + aug_model_samples_list,\n",
    "    'Validation Accuracy': [test_result_noaug] + aug_models_validation_acc_list,\n",
    "    'Training Accuracy': [train_result_noaug] + aug_models_train_acc_list,\n",
    "    'Data Creation Time': [time_elapsed_no_aug] + aug_models_dataprep_time_list,\n",
    "    'Evaluation Time': [eval_time_noaug] + aug_models_eval_time_list,\n",
    "    'Training Time' : [train_time_noaug] + aug_models_train_time_list\n",
    "}\n",
    "aug_models_test_results = pd.DataFrame(aug_models_results_dict)\n",
    "aug_models_test_results.set_index(\"Samples\")\n",
    "\n",
    "print(aug_models_test_results)\n",
    "aug_models_test_results.to_csv(\"Augmented_Model_Results.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "aca0571d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-19T02:45:20.232900Z",
     "iopub.status.busy": "2024-10-19T02:45:20.232516Z",
     "iopub.status.idle": "2024-10-19T02:45:20.247344Z",
     "shell.execute_reply": "2024-10-19T02:45:20.246199Z"
    },
    "papermill": {
     "duration": 1.176016,
     "end_time": "2024-10-19T02:45:20.249810",
     "exception": false,
     "start_time": "2024-10-19T02:45:19.073794",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                         Samples  Validation Accuracy  Training Accuracy  \\\n",
      "0                 NoAugmentation             0.855245           0.990991   \n",
      "1                Noise, SNR:0dBs             0.548328           0.635517   \n",
      "2                Noise, SNR:5dBs             0.720568           0.844709   \n",
      "3               Noise, SNR:10dBs             0.821805           0.957856   \n",
      "4               Noise, SNR:20dBs             0.856619           0.989922   \n",
      "5            Shift_Factor, 5.00%             0.856619           0.991144   \n",
      "6           Shift_Factor, 35.00%             0.855245           0.990991   \n",
      "7     Pitch_Change, 0.1 semiNote             0.818598           0.954344   \n",
      "8     Pitch_Change, 0.5 semiNote             0.713697           0.813407   \n",
      "9       Pitch_Change, 1 semiNote             0.628493           0.683769   \n",
      "10       Time_Stretched, -10.00%             0.804856           0.948084   \n",
      "11        Time_Stretched, -5.00%             0.808062           0.949763   \n",
      "12  Time_DataCrop_Factor, 10.00%             0.854329           0.986257   \n",
      "13  Time_DataCrop_Factor, 20.00%             0.841044           0.977706   \n",
      "14  Freq_DataCrop_Factor, 10.00%             0.785616           0.914491   \n",
      "15  Freq_DataCrop_Factor, 20.00%             0.726523           0.843640   \n",
      "16     Reflection_Factor, 10.00%             0.812185           0.939380   \n",
      "17     Reflection_Factor, 20.00%             0.823637           0.951901   \n",
      "\n",
      "    Data Creation Time  Evaluation Time  \n",
      "0            18.236409         0.052650  \n",
      "1            15.498571         0.043062  \n",
      "2            15.465794         0.046217  \n",
      "3            15.401514         0.043228  \n",
      "4            15.290861         0.042639  \n",
      "5            15.343673         0.045113  \n",
      "6            15.271762         0.043248  \n",
      "7            21.750275         0.042104  \n",
      "8            21.893411         0.043765  \n",
      "9            22.027257         0.043330  \n",
      "10           22.114718         0.045204  \n",
      "11           21.999762         0.044000  \n",
      "12           15.671530         0.042913  \n",
      "13           15.627505         0.043581  \n",
      "14           15.663266         0.044318  \n",
      "15           15.766623         0.050981  \n",
      "16           15.783739         0.043637  \n",
      "17           15.938923         0.043798  \n"
     ]
    }
   ],
   "source": [
    "# for the test results of the not-augmented model on augmented datasets, to check the not-augmented model performance\n",
    "test_results_dict = {\n",
    "    'Samples':['NoAugmentation'] + samples_list,\n",
    "    'Validation Accuracy': [test_result_noaug] + validation_acc_list,\n",
    "    'Training Accuracy': [train_result_noaug] + train_acc_list,\n",
    "    'Data Creation Time': [time_elapsed_no_aug] + dataprep_time_list,\n",
    "    'Evaluation Time': [eval_time_noaug] + eval_time_list\n",
    "}\n",
    "test_results = pd.DataFrame(test_results_dict)\n",
    "test_results.set_index(\"Samples\")\n",
    "\n",
    "print(test_results)\n",
    "test_results.to_csv(\"Efficient_Augmentation_Selection_Results.csv\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 500970,
     "sourceId": 928025,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 5518832,
     "sourceId": 9348736,
     "sourceType": "datasetVersion"
    },
    {
     "sourceId": 24385415,
     "sourceType": "kernelVersion"
    },
    {
     "sourceId": 195734660,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30746,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 27457.592799,
   "end_time": "2024-10-19T02:45:24.522880",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-10-18T19:07:46.930081",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
